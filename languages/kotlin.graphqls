# Generated by `gradle :tools:schemas`; run it to update & do not edit.

schema {
  query: QueryRoot
  mutation: MutationRoot
}

#Destination for notifications
interface Channel {
  accountId: String!
  id: ID!
  name: String
  queryTriggers: [QueryTrigger!]!
}

interface Identity {
  id: ID!
  name: String!
}

union IdentityMutation = ServiceMutation | UserMutation

union _Entity = Service | ServiceMutation

type Account {
  avatarUrl: String
  billingInfo: BillingInfo
  channels(channelIds: [ID!]): [Channel!]
  currentPlan: BillingPlan
  currentSubscription: BillingSubscription
  exceededSubLimitAt: Timestamp
  id: ID!
  invitations(includeAccepted: Boolean! = false): [AccountInvitation!]!
  invoices: [Invoice!]!
  #Token allowing to join the account using mutation{join(accountId:,token:)}}
  joinToken: String
  memberships: [AccountMembership!]!
  name: String!
  #Number of seats currently allocated to active users
  occupiedSeats: Int!
  provisionedAt: Timestamp
  recurlyCompanyName: String
  recurlyEmail: String
  requests(from: Timestamp!, to: Timestamp!): Long!
  requestsInCurrentBillingMonth: Long!
  requestsInCurrentBillingPeriod: Long!
  roles: AccountRoles
  #How many seats would be included in your next bill, as best estimated today
  seatCountForNextBill: Int
  serviceIDs: [ID!]!
  services(includeDeleted: Boolean): [Service!]!
  state: AccountState!
  stats(
    from: Timestamp!,
    #Granularity of buckets. Defaults to the entire range (aggregate all data into a single durationBucket) when null.
    resolution: Resolution,
    #Defaults to the current time when null.
    to: Timestamp
  ): AccountStatsWindow!
  subscriptions: [BillingSubscription!]!
  #A synchronized account tracks its members through an upstream, eg GitHub;
  #invitations and member removals are only possible on accounts that are not synchronized.
  synchronized: Boolean!
  users: [User!]! @deprecated(reason : "Replaced with Account.memberships.user")
}

type AccountErrorStatsDimensions {
  clientName: String
  clientReferenceId: ID
  clientVersion: String
  path: String
  queryId: ID
  queryName: String
  querySignature: String
  schemaHash: String
  schemaTag: String
  serviceId: ID
  serviceVersion: String
}

type AccountErrorStatsMetrics {
  errorsCount: Long!
  requestsWithErrorsCount: Long!
}

type AccountErrorStatsRecord {
  #Dimensions of AccountErrorStats that can be grouped by.
  groupBy: AccountErrorStatsDimensions!
  #Metrics of AccountErrorStats that can be aggregated over.
  metrics: AccountErrorStatsMetrics!
  #Starting segment timestamp.
  timestamp: Timestamp!
}

type AccountFieldStatsDimensions {
  clientName: String
  clientReferenceId: String
  clientVersion: String
  field: String
  queryId: ID
  queryName: String
  querySignature: String
  schemaHash: String
  schemaTag: String
  serviceId: ID
  serviceVersion: String
}

type AccountFieldStatsMetrics {
  errorsCount: Long!
  fieldHistogram: DurationHistogram!
}

type AccountFieldStatsRecord {
  #Dimensions of AccountFieldStats that can be grouped by.
  groupBy: AccountFieldStatsDimensions!
  #Metrics of AccountFieldStats that can be aggregated over.
  metrics: AccountFieldStatsMetrics!
  #Starting segment timestamp.
  timestamp: Timestamp!
}

type AccountInvitation {
  #An accepted invitation cannot be used anymore
  acceptedAt: Timestamp
  #Who accepted the invitation
  acceptedBy: User
  #Time the invitation was created
  createdAt: Timestamp!
  #Who created the invitation
  createdBy: User
  email: String!
  id: ID!
  #Last time we sent an email for the invitation
  lastSentAt: Timestamp
}

type AccountMembership {
  createdAt: Timestamp!
  permission: UserPermission!
  user: User!
}

type AccountMutation {
  #Claim a service that doesn't have an account yet using one of its API tokens
  claimService(token: String!): Service
  #Delete an existing channel
  deleteChannel(id: ID!): Boolean!
  #Hard delete an account and all associated services
  hardDelete: Void
  #Send an invitation to join the account by E-mail
  invite(email: String!): AccountInvitation
  #Refresh billing information from third-party billing service
  refreshBilling: Void
  #Set the account-wide invitation token to a new random value
  regenerateJoinToken: String
  #Delete an invitation
  removeInvitation(id: ID): Void
  #Remove a member of the account
  removeMember(id: ID!): Account
  #Send a new E-mail for an existing invitation
  resendInvitation(id: ID): AccountInvitation
  #Disable the account-wide join token
  revokeJoinToken: Void
  #Set the billing plan
  setPlan(id: ID!): Void
  #Test Slack notification channel
  testSlackChannel(id: ID!, notification: SlackNotificationInput!): Void
  #Update the billing information from a Recurly token
  updateBillingInfo(token: String!): Void
  #Update the company name in Recurly
  updateRecurlyCompanyName(companyName: String!): Void
  #Set the E-mail address in Recurly
  updateRecurlyEmail(email: String!): Void
  #Create/update PagerDuty notification channel
  upsertPagerDutyChannel(channel: PagerDutyChannelInput!, id: ID): PagerDutyChannel
  #Create/update Slack notification channel
  upsertSlackChannel(channel: SlackChannelInput!, id: ID): SlackChannel
}

type AccountQueryStatsDimensions {
  clientName: String
  clientReferenceId: ID
  clientVersion: String
  queryId: ID
  queryName: String
  querySignature: String
  schemaHash: String
  schemaTag: String
  serviceId: ID
  serviceVersion: String
}

type AccountQueryStatsMetrics {
  cacheTtlHistogram: DurationHistogram!
  cachedHistogram: DurationHistogram!
  cachedRequestsCount: Long!
  forbiddenOperationCount: Long!
  registeredOperationCount: Long!
  requestsWithErrorsCount: Long!
  totalLatencyHistogram: DurationHistogram!
  uncachedHistogram: DurationHistogram!
  uncachedRequestsCount: Long!
}

type AccountQueryStatsRecord {
  #Dimensions of AccountQueryStats that can be grouped by.
  groupBy: AccountQueryStatsDimensions!
  #Metrics of AccountQueryStats that can be aggregated over.
  metrics: AccountQueryStatsMetrics!
  #Starting segment timestamp.
  timestamp: Timestamp!
}

type AccountRoles {
  canCreateService: Boolean
  canDownloadInvoice: Boolean
  canModify: Boolean
  canQuery: Boolean
}

#A time window with a specified granularity over a given account.
type AccountStatsWindow {
  errorStats(
    #Filter to select what rows to return.
    filter: AccountErrorStatsFilter,
    #The maximum number of entries to return, cannot be more than 15000.
    limit: Int = 10000,
    #A list of OrderBySpecs to order AccountErrorStats by. The earlier an OrderBySpec appears in the list, the higher priority it has in the final ordering. When empty or null, defaults to sorting by ascending timestamp.
    orderBy: [AccountErrorStatsOrderBySpec!]
  ): [AccountErrorStatsRecord!]!
  fieldStats(
    #Filter to select what rows to return.
    filter: AccountFieldStatsFilter,
    #The maximum number of entries to return, cannot be more than 15000.
    limit: Int = 10000,
    #A list of OrderBySpecs to order AccountFieldStats by. The earlier an OrderBySpec appears in the list, the higher priority it has in the final ordering. When empty or null, defaults to sorting by ascending timestamp.
    orderBy: [AccountFieldStatsOrderBySpec!]
  ): [AccountFieldStatsRecord!]!
  queryStats(
    #Filter to select what rows to return.
    filter: AccountQueryStatsFilter,
    #The maximum number of entries to return, cannot be more than 15000.
    limit: Int = 10000,
    #A list of OrderBySpecs to order AccountQueryStats by. The earlier an OrderBySpec appears in the list, the higher priority it has in the final ordering. When empty or null, defaults to sorting by ascending timestamp.
    orderBy: [AccountQueryStatsOrderBySpec!]
  ): [AccountQueryStatsRecord!]!
  #From field rounded down to the nearest resolution.
  roundedDownFrom: Timestamp!
  #To field rounded up to the nearest resolution.
  roundedUpTo: Timestamp!
  tracePathErrorsRefs(
    #Filter to select what rows to return.
    filter: AccountTracePathErrorsRefsFilter,
    #The maximum number of entries to return, cannot be more than 15000.
    limit: Int = 10000,
    #A list of OrderBySpecs to order AccountTracePathErrorsRefs by. The earlier an OrderBySpec appears in the list, the higher priority it has in the final ordering. When empty or null, defaults to sorting by ascending timestamp.
    orderBy: [AccountTracePathErrorsRefsOrderBySpec!]
  ): [AccountTracePathErrorsRefsRecord!]!
  traceRefs(
    #Filter to select what rows to return.
    filter: AccountTraceRefsFilter,
    #The maximum number of entries to return, cannot be more than 15000.
    limit: Int = 10000,
    #A list of OrderBySpecs to order AccountTraceRefs by. The earlier an OrderBySpec appears in the list, the higher priority it has in the final ordering. When empty or null, defaults to sorting by ascending timestamp.
    orderBy: [AccountTraceRefsOrderBySpec!]
  ): [AccountTraceRefsRecord!]!
}

type AccountTracePathErrorsRefsDimensions {
  clientName: String
  clientReferenceId: ID
  clientVersion: String
  durationBucket: Int
  errorMessage: String
  gcsBucket: String
  path: String
  queryId: ID
  queryName: String
  querySignature: String
  schemaHash: String
  schemaTag: String
  serviceId: ID
  serviceVersion: String
  traceHttpStatusCode: Int
  traceId: ID
  traceStartsAt: Timestamp
}

type AccountTracePathErrorsRefsMetrics {
  errorsCountInPath: Long!
  errorsCountInTrace: Long!
  traceSizeBytes: Long!
}

type AccountTracePathErrorsRefsRecord {
  #Dimensions of AccountTracePathErrorsRefs that can be grouped by.
  groupBy: AccountTracePathErrorsRefsDimensions!
  #Metrics of AccountTracePathErrorsRefs that can be aggregated over.
  metrics: AccountTracePathErrorsRefsMetrics!
  #Starting segment timestamp.
  timestamp: Timestamp!
}

type AccountTraceRefsDimensions {
  clientName: String
  clientReferenceId: ID
  clientVersion: String
  durationBucket: Int
  gcsBucket: String
  queryId: ID
  queryName: String
  querySignature: String
  schemaHash: String
  schemaTag: String
  serviceId: ID
  serviceVersion: String
  traceId: ID
}

type AccountTraceRefsMetrics {
  durationNs: Long!
  traceSizeBytes: Long!
}

type AccountTraceRefsRecord {
  #Dimensions of AccountTraceRefs that can be grouped by.
  groupBy: AccountTraceRefsDimensions!
  #Metrics of AccountTraceRefs that can be aggregated over.
  metrics: AccountTraceRefsMetrics!
  #Starting segment timestamp.
  timestamp: Timestamp!
}

type ApiKey {
  keyName: String
  token: String!
}

type BillingInfo {
  cardType: String
  lastFour: Int
  month: Int
  year: Int
}

type BillingPlan {
  addons: [BillingPlanAddon!]!
  billingModel: BillingModel!
  billingPeriod: BillingPeriod
  capabilities: BillingPlanCapabilities!
  description: String
  flags: Object! @deprecated(reason : "All flags should have equivalents on BillingPlan or BillingPlanCapabilities")
  id: ID!
  intervalLength: Int @deprecated(reason : "Use billingPeriod instead")
  intervalUnit: String @deprecated(reason : "Use billingPeriod instead")
  #Whether this plan is an upgrade option and requires billing information
  isUpgradeOption: Boolean!
  name: String!
  #The price of every seat
  pricePerSeatInUsdCents: Int
  pricePerUnitInUsdCents: Int!
  prices: [FinancialAmount!]! @deprecated(reason : "Use pricePerUnitInUsdCents instead")
  pricesPerSeat: [FinancialAmount!]! @deprecated(reason : "Use pricePerSeatInUsdCents instead")
  #Whether the plan is accessible by all users in QueryRoot.allPlans, QueryRoot.plan, or AccountMutation.setPlan
  public: Boolean!
  tier: BillingPlanTier!
  trialPeriodDays: Int
}

type BillingPlanAddon {
  id: ID!
  pricePerUnitInUsdCents: Int!
  prices: [FinancialAmount!]! @deprecated(reason : "Use priceInUsdCents instead")
}

type BillingPlanCapabilities {
  clients: Boolean!
  datadog: Boolean!
  errors: Boolean!
  federation: Boolean!
  maxRangeInDays: Int
  maxRequestsPerMonth: Long
  metrics: Boolean!
  notifications: Boolean!
  operationRegistry: Boolean!
  ranges: [String!]!
  schemaValidation: Boolean!
  traces: Boolean!
}

type BillingSubscription {
  activatedAt: Timestamp
  addons: [BillingSubscriptionAddon!]!
  #The price of the subscription when ignoring addons, ie quantity * pricePerUnitInUsdCents
  basePriceInUsdCents: Long!
  canceledAt: Timestamp
  currentPeriodEndsAt: Timestamp
  currentPeriodStartedAt: Timestamp
  expiresAt: Timestamp
  plan: BillingPlan!
  #The price of every seat
  pricePerSeatInUsdCents: Int
  #The price of every unit in the subscription (hence multiplied by quantity to get to the basePriceInUsdCents)
  pricePerUnitInUsdCents: Int
  pricesPerSeat: [FinancialAmount!]! @deprecated(reason : "Use pricePerSeatInUsdCents instead")
  quantity: Int
  state: SubscriptionState!
  #Total price of the subscription, including add-ons
  totalPriceInUsdCents: Long!
  uuid: ID!
}

type BillingSubscriptionAddon {
  id: ID!
  pricePerUnitInUsdCents: Int!
  prices: [FinancialAmount!]! @deprecated(reason : "Use priceInUsdCents instead")
  quantity: Int!
}

type DatadogMetricsConfig {
  apiKey: String!
  enabled: Boolean!
}

type DurationHistogram {
  averageDurationMs: Float
  buckets: [DurationHistogramBucket!]!
  durationMs(
    #Percentile (between 0 and 1)
    percentile: Float!
  ): Float
  #Counts per durationBucket, where sequences of zeroes are replaced with the negative of their size
  sparseBuckets: [Long!]!
  totalCount: Long!
  totalDurationMs: Float!
}

type DurationHistogramBucket {
  count: Long!
  index: Int!
  rangeBeginMs: Float!
  rangeEndMs: Float!
}

type ErrorStatsDimensions {
  accountId: ID
  clientName: String
  clientReferenceId: ID
  clientVersion: String
  path: String
  queryId: ID
  queryName: String
  querySignature: String
  schemaHash: String
  schemaTag: String
  serviceId: ID
  serviceVersion: String
}

type ErrorStatsMetrics {
  errorsCount: Long!
  requestsWithErrorsCount: Long!
}

type ErrorStatsRecord {
  #Dimensions of ErrorStats that can be grouped by.
  groupBy: ErrorStatsDimensions!
  #Metrics of ErrorStats that can be aggregated over.
  metrics: ErrorStatsMetrics!
  #Starting segment timestamp.
  timestamp: Timestamp!
}

type FieldStatsDimensions {
  accountId: ID
  clientName: String
  clientReferenceId: String
  clientVersion: String
  field: String
  queryId: ID
  queryName: String
  querySignature: String
  schemaHash: String
  schemaTag: String
  serviceId: ID
  serviceVersion: String
}

type FieldStatsMetrics {
  errorsCount: Long!
  fieldHistogram: DurationHistogram!
}

type FieldStatsRecord {
  #Dimensions of FieldStats that can be grouped by.
  groupBy: FieldStatsDimensions!
  #Metrics of FieldStats that can be aggregated over.
  metrics: FieldStatsMetrics!
  #Starting segment timestamp.
  timestamp: Timestamp!
}

type FinancialAmount {
  amount: Float!
  currency: Currency!
}

type InternalAdminUser {
  role: InternalMdgAdminRole!
  userID: String!
}

type InternalIdentity implements Identity {
  accountIDs: [ID!]!
  accounts: [Account!]!
  email: String
  id: ID!
  name: String!
}

type Invoice {
  closedAt: Timestamp
  collectionMethod: String
  createdAt: Timestamp
  invoiceNumber: Int!
  state: InvoiceState!
  totalInCents: Int!
  updatedAt: Timestamp
  uuid: ID!
}

type MutationRoot {
  account(id: ID!): AccountMutation
  #Refresh all accounts from third-party billing service
  accountsRefreshBilling: Void
  #Finalize a password reset with a token included in the E-mail link,
  #returns the corresponding login email when successful
  finalizePasswordReset(newPassword: String!, resetToken: String!): String
  #Join an account with a token
  joinAccount(accountId: ID!, joinToken: String!): Account
  me: IdentityMutation
  newAccount(id: ID!): Account
  newService(accountId: ID, id: ID!, name: String): Service
  #Refresh all plans from third-party billing service
  plansRefreshBilling: Void
  #Refresh all billing information from third-party billing service
  refreshBilling: Void
  #Ask for a user's password to be reset by E-mail
  resetPassword(email: String!): Void
  service(id: ID!): ServiceMutation
  signUp(email: String!, fullName: String!, password: String!): User
  user(id: ID!): UserMutation
}

#PagerDuty notification channel
type PagerDutyChannel implements Channel {
  accountId: String!
  id: ID!
  name: String
  queryTriggers: [QueryTrigger!]!
  routingKey: String!
}

type Protobuf {
  json: String
  object: Object
  raw: Blob!
  text: String!
}

type QueryRoot {
  _entities(representations: [_Any!]!): [_Entity]!
  _service: _Service
  #Account by ID
  account(id: ID!): Account
  #Whether an account ID is available for mutation{newAccount(id:)}
  accountIDAvailable(id: ID!): Boolean!
  #All accounts
  allAccounts: [Account!]
  #All available plans
  allPlans: [BillingPlan!]!
  #All services
  allServices: [Service!]
  #All timezones with their offsets from UTC
  allTimezoneOffsets: [TimezoneOffset!]!
  #All users
  allUsers: [User!]
  # Artificially trigger an error asynchronously
  asyncError(message: String): Void
  # Artificially trigger an error
  error(message: String): Void
  internalAdminUsers: [InternalAdminUser!]!
  #Current identity, null if not authenticated
  me: Identity
  #Look up a plan by ID
  plan(id: ID): BillingPlan
  #Service by ID
  service(id: ID!): Service
  #Query statistics across all services. For admins only; normal users must go through AccountsStatsWindow or ServiceStatsWindow.
  stats(
    from: Timestamp!,
    #Granularity of buckets. Defaults to the entire range (aggregate all data into a single durationBucket) when null.
    resolution: Resolution,
    #Defaults to the current time when null.
    to: Timestamp
  ): StatsWindow!
  #User by ID
  user(id: ID!): User
}

type QueryStatsDimensions {
  accountId: ID
  clientName: String
  clientReferenceId: ID
  clientVersion: String
  queryId: ID
  queryName: String
  querySignature: String
  schemaHash: String
  schemaTag: String
  serviceId: ID
  serviceVersion: String
}

type QueryStatsMetrics {
  cacheTtlHistogram: DurationHistogram!
  cachedHistogram: DurationHistogram!
  cachedRequestsCount: Long!
  forbiddenOperationCount: Long!
  registeredOperationCount: Long!
  requestsWithErrorsCount: Long!
  totalLatencyHistogram: DurationHistogram!
  uncachedHistogram: DurationHistogram!
  uncachedRequestsCount: Long!
}

type QueryStatsRecord {
  #Dimensions of QueryStats that can be grouped by.
  groupBy: QueryStatsDimensions!
  #Metrics of QueryStats that can be aggregated over.
  metrics: QueryStatsMetrics!
  #Starting segment timestamp.
  timestamp: Timestamp!
}

#Query Trigger
type QueryTrigger {
  channels: [Channel!]
  comparisonOperator: ComparisonOperator!
  enabled: Boolean
  excludedOperationNames: [String!]!
  id: ID!
  metric: QueryTriggerMetric!
  operationNames: [String!]!
  percentile: Float
  scope: QueryTriggerScope!
  serviceId: String!
  state: QueryTriggerState!
  threshold: Float!
  window: QueryTriggerWindow!
}

#Query trigger state
type QueryTriggerState {
  evaluatedAt: Timestamp!
  lastTriggeredAt: Timestamp
  operations: [QueryTriggerStateOperation!]!
  triggered: Boolean!
}

type QueryTriggerStateOperation {
  count: Long!
  operation: String!
  triggered: Boolean!
  value: Float!
}

type ScheduledSummary {
  channel: Channel
  consecutiveFailures: Int!
  enabled: Boolean!
  id: ID!
  lastCompletedAt: Timestamp
  lastFailedAt: Timestamp
  lastFailureReason: String
  lastScheduledAt: Timestamp
  service: Service!
  tag: String
  timezone: String!
}

type Service implements Identity @key(fields : "id") {
  account: Account
  accountId: ID
  apiKeys: [ApiKey!]
  createdAt: Timestamp!
  datadogMetricsConfig: DatadogMetricsConfig!
  deletedAt: Timestamp
  firstReportedAt: Timestamp
  id: ID!
  lastReportedAt(graphVariant: String): Timestamp
  name: String!
  queryTriggers(operationNames: [String!]): [QueryTrigger!]
  reportingEnabled: Boolean!
  #Which permissions the current user has for interacting with this service
  roles: ServiceRoles
  scheduledSummaries: [ScheduledSummary!]!
  stats(
    from: Timestamp!,
    #Granularity of buckets. Defaults to the entire range (aggregate all data into a single durationBucket) when null.
    resolution: Resolution,
    #Defaults to the current time when null.
    to: Timestamp
  ): ServiceStatsWindow!
  trace(id: ID!): Trace
  traceStorageEnabled: Boolean!
}

type ServiceErrorStatsDimensions {
  clientName: String
  clientReferenceId: ID
  clientVersion: String
  path: String
  queryId: ID
  queryName: String
  querySignature: String
  schemaHash: String
  schemaTag: String
  serviceVersion: String
}

type ServiceErrorStatsMetrics {
  errorsCount: Long!
  requestsWithErrorsCount: Long!
}

type ServiceErrorStatsRecord {
  #Dimensions of ServiceErrorStats that can be grouped by.
  groupBy: ServiceErrorStatsDimensions!
  #Metrics of ServiceErrorStats that can be aggregated over.
  metrics: ServiceErrorStatsMetrics!
  #Starting segment timestamp.
  timestamp: Timestamp!
}

type ServiceFieldStatsDimensions {
  clientName: String
  clientReferenceId: String
  clientVersion: String
  field: String
  queryId: ID
  queryName: String
  querySignature: String
  schemaHash: String
  schemaTag: String
  serviceVersion: String
}

type ServiceFieldStatsMetrics {
  errorsCount: Long!
  fieldHistogram: DurationHistogram!
}

type ServiceFieldStatsRecord {
  #Dimensions of ServiceFieldStats that can be grouped by.
  groupBy: ServiceFieldStatsDimensions!
  #Metrics of ServiceFieldStats that can be aggregated over.
  metrics: ServiceFieldStatsMetrics!
  #Starting segment timestamp.
  timestamp: Timestamp!
}

type ServiceMutation @key(fields : "id") {
  delete: Void
  #Delete an existing query trigger
  deleteQueryTrigger(id: ID!): Boolean!
  deleteScheduledSummary(id: ID!): Boolean!
  id: ID! @deprecated(reason : "Use service.id")
  newKey(keyName: String): ApiKey
  removeKey(
    #API key
    key: String,
    #Deprecated, use the 'key' argument instead
    token: String
  ): Void
  rename(to: String!): Service
  renameKey(newKeyName: String!, token: String!): ApiKey
  service: Service!
  transfer(to: String!): Service
  undelete: Service
  #Update datadog configuration
  updateDatadogMetricsConfig(apiKey: String, enabled: Boolean): DatadogMetricsConfig!
  upsertQueryTrigger(id: ID, trigger: QueryTriggerInput!): QueryTrigger
  upsertScheduledSummary(channelID: ID, enabled: Boolean, id: ID, tag: String, timezone: String): ScheduledSummary
}

type ServiceQueryStatsDimensions {
  clientName: String
  clientReferenceId: ID
  clientVersion: String
  queryId: ID
  queryName: String
  querySignature: String
  schemaHash: String
  schemaTag: String
  serviceVersion: String
}

type ServiceQueryStatsMetrics {
  cacheTtlHistogram: DurationHistogram!
  cachedHistogram: DurationHistogram!
  cachedRequestsCount: Long!
  forbiddenOperationCount: Long!
  registeredOperationCount: Long!
  requestsWithErrorsCount: Long!
  totalLatencyHistogram: DurationHistogram!
  uncachedHistogram: DurationHistogram!
  uncachedRequestsCount: Long!
}

type ServiceQueryStatsRecord {
  #Dimensions of ServiceQueryStats that can be grouped by.
  groupBy: ServiceQueryStatsDimensions!
  #Metrics of ServiceQueryStats that can be aggregated over.
  metrics: ServiceQueryStatsMetrics!
  #Starting segment timestamp.
  timestamp: Timestamp!
}

#A map from role (permission) String to boolean that the current user is allowed for the root service
type ServiceRoles {
  canDelete: Boolean
  canDeleteSchemas: Boolean
  canManageDatadogMetricsConfig: Boolean
  canManageKeys: Boolean
  canManageQueryTriggers: Boolean
  canPublishSchemas: Boolean
  canQuery: Boolean
  canQueryImplementingServices: Boolean
  canQuerySchemas: Boolean
  canQueryTokens: Boolean
  canRegisterImplementingServices: Boolean
  canRegisterOperations: Boolean
  canRename: Boolean
  canUndelete: Boolean
  canUploadPartialSchemas: Boolean
  canUploadSchemas: Boolean
  canValidateSchemas: Boolean
  canWriteCompositionConfig: Boolean
  canWriteReports: Boolean
  canWriteTraces: Boolean
}

#A time window with a specified granularity over a given service.
type ServiceStatsWindow {
  errorStats(
    #Filter to select what rows to return.
    filter: ServiceErrorStatsFilter,
    #The maximum number of entries to return, cannot be more than 15000.
    limit: Int = 10000,
    #A list of OrderBySpecs to order ServiceErrorStats by. The earlier an OrderBySpec appears in the list, the higher priority it has in the final ordering. When empty or null, defaults to sorting by ascending timestamp.
    orderBy: [ServiceErrorStatsOrderBySpec!]
  ): [ServiceErrorStatsRecord!]!
  fieldStats(
    #Filter to select what rows to return.
    filter: ServiceFieldStatsFilter,
    #The maximum number of entries to return, cannot be more than 15000.
    limit: Int = 10000,
    #A list of OrderBySpecs to order ServiceFieldStats by. The earlier an OrderBySpec appears in the list, the higher priority it has in the final ordering. When empty or null, defaults to sorting by ascending timestamp.
    orderBy: [ServiceFieldStatsOrderBySpec!]
  ): [ServiceFieldStatsRecord!]!
  queryStats(
    #Filter to select what rows to return.
    filter: ServiceQueryStatsFilter,
    #The maximum number of entries to return, cannot be more than 15000.
    limit: Int = 10000,
    #A list of OrderBySpecs to order ServiceQueryStats by. The earlier an OrderBySpec appears in the list, the higher priority it has in the final ordering. When empty or null, defaults to sorting by ascending timestamp.
    orderBy: [ServiceQueryStatsOrderBySpec!]
  ): [ServiceQueryStatsRecord!]!
  #From field rounded down to the nearest resolution.
  roundedDownFrom: Timestamp!
  #To field rounded up to the nearest resolution.
  roundedUpTo: Timestamp!
  tracePathErrorsRefs(
    #Filter to select what rows to return.
    filter: ServiceTracePathErrorsRefsFilter,
    #The maximum number of entries to return, cannot be more than 15000.
    limit: Int = 10000,
    #A list of OrderBySpecs to order ServiceTracePathErrorsRefs by. The earlier an OrderBySpec appears in the list, the higher priority it has in the final ordering. When empty or null, defaults to sorting by ascending timestamp.
    orderBy: [ServiceTracePathErrorsRefsOrderBySpec!]
  ): [ServiceTracePathErrorsRefsRecord!]!
  traceRefs(
    #Filter to select what rows to return.
    filter: ServiceTraceRefsFilter,
    #The maximum number of entries to return, cannot be more than 15000.
    limit: Int = 10000,
    #A list of OrderBySpecs to order ServiceTraceRefs by. The earlier an OrderBySpec appears in the list, the higher priority it has in the final ordering. When empty or null, defaults to sorting by ascending timestamp.
    orderBy: [ServiceTraceRefsOrderBySpec!]
  ): [ServiceTraceRefsRecord!]!
}

type ServiceTracePathErrorsRefsDimensions {
  clientName: String
  clientReferenceId: ID
  clientVersion: String
  durationBucket: Int
  errorMessage: String
  gcsBucket: String
  path: String
  queryId: ID
  queryName: String
  querySignature: String
  schemaHash: String
  schemaTag: String
  serviceVersion: String
  traceHttpStatusCode: Int
  traceId: ID
  traceStartsAt: Timestamp
}

type ServiceTracePathErrorsRefsMetrics {
  errorsCountInPath: Long!
  errorsCountInTrace: Long!
  traceSizeBytes: Long!
}

type ServiceTracePathErrorsRefsRecord {
  #Dimensions of ServiceTracePathErrorsRefs that can be grouped by.
  groupBy: ServiceTracePathErrorsRefsDimensions!
  #Metrics of ServiceTracePathErrorsRefs that can be aggregated over.
  metrics: ServiceTracePathErrorsRefsMetrics!
  #Starting segment timestamp.
  timestamp: Timestamp!
}

type ServiceTraceRefsDimensions {
  clientName: String
  clientReferenceId: ID
  clientVersion: String
  durationBucket: Int
  gcsBucket: String
  queryId: ID
  queryName: String
  querySignature: String
  schemaHash: String
  schemaTag: String
  serviceVersion: String
  traceId: ID
}

type ServiceTraceRefsMetrics {
  durationNs: Long!
  traceSizeBytes: Long!
}

type ServiceTraceRefsRecord {
  #Dimensions of ServiceTraceRefs that can be grouped by.
  groupBy: ServiceTraceRefsDimensions!
  #Metrics of ServiceTraceRefs that can be aggregated over.
  metrics: ServiceTraceRefsMetrics!
  #Starting segment timestamp.
  timestamp: Timestamp!
}

#Slack notification channel
type SlackChannel implements Channel {
  accountId: String!
  id: ID!
  name: String
  queryTriggers: [QueryTrigger!]!
  url: String!
}

#A time window with a specified granularity.
type StatsWindow {
  errorStats(
    #Filter to select what rows to return.
    filter: ErrorStatsFilter,
    #The maximum number of entries to return, cannot be more than 15000.
    limit: Int = 10000,
    #A list of OrderBySpecs to order ErrorStats by. The earlier an OrderBySpec appears in the list, the higher priority it has in the final ordering. When empty or null, defaults to sorting by ascending timestamp.
    orderBy: [ErrorStatsOrderBySpec!]
  ): [ErrorStatsRecord!]!
  fieldStats(
    #Filter to select what rows to return.
    filter: FieldStatsFilter,
    #The maximum number of entries to return, cannot be more than 15000.
    limit: Int = 10000,
    #A list of OrderBySpecs to order FieldStats by. The earlier an OrderBySpec appears in the list, the higher priority it has in the final ordering. When empty or null, defaults to sorting by ascending timestamp.
    orderBy: [FieldStatsOrderBySpec!]
  ): [FieldStatsRecord!]!
  queryStats(
    #Filter to select what rows to return.
    filter: QueryStatsFilter,
    #The maximum number of entries to return, cannot be more than 15000.
    limit: Int = 10000,
    #A list of OrderBySpecs to order QueryStats by. The earlier an OrderBySpec appears in the list, the higher priority it has in the final ordering. When empty or null, defaults to sorting by ascending timestamp.
    orderBy: [QueryStatsOrderBySpec!]
  ): [QueryStatsRecord!]!
  #From field rounded down to the nearest resolution.
  roundedDownFrom: Timestamp!
  #To field rounded up to the nearest resolution.
  roundedUpTo: Timestamp!
  tracePathErrorsRefs(
    #Filter to select what rows to return.
    filter: TracePathErrorsRefsFilter,
    #The maximum number of entries to return, cannot be more than 15000.
    limit: Int = 10000,
    #A list of OrderBySpecs to order TracePathErrorsRefs by. The earlier an OrderBySpec appears in the list, the higher priority it has in the final ordering. When empty or null, defaults to sorting by ascending timestamp.
    orderBy: [TracePathErrorsRefsOrderBySpec!]
  ): [TracePathErrorsRefsRecord!]!
  traceRefs(
    #Filter to select what rows to return.
    filter: TraceRefsFilter,
    #The maximum number of entries to return, cannot be more than 15000.
    limit: Int = 10000,
    #A list of OrderBySpecs to order TraceRefs by. The earlier an OrderBySpec appears in the list, the higher priority it has in the final ordering. When empty or null, defaults to sorting by ascending timestamp.
    orderBy: [TraceRefsOrderBySpec!]
  ): [TraceRefsRecord!]!
}

type StringToString {
  key: String!
  value: String!
}

type TimezoneOffset {
  minutesOffsetFromUTC: Int!
  zoneID: String!
}

type Trace {
  cacheMaxAgeMs: Float
  cacheScope: CacheScope
  durationMs: Float!
  endTime: Timestamp!
  http: TraceHTTP
  id: ID!
  operationName: String
  originReportedDurationMs: Float
  originReportedEndTime: Timestamp
  originReportedStartTime: Timestamp
  protobuf: Protobuf!
  rawQuery: String
  root: TraceNode!
  signature: String!
  signatureId: ID!
  startTime: Timestamp!
  variables: [StringToString!]!
  variablesJSON: [StringToString!]!
}

type TraceError {
  json: String!
  locations: [TraceSourceLocation!]!
  message: String!
  timestamp: Timestamp
}

type TraceHTTP {
  host: String
  method: HTTPMethod!
  path: String
  protocol: String
  requestHeaders: [StringToString!]!
  responseHeaders: [StringToString!]!
  secure: Boolean!
  statusCode: Int!
}

type TraceNode {
  cacheMaxAgeMs: Float
  cacheScope: CacheScope
  children: [TraceNode!]!
  childrenIds: [ID!]!
  descendants: [TraceNode!]!
  descendantsIds: [ID!]!
  endTime: Timestamp!
  errors: [TraceError!]!
  id: ID!
  key: StringOrInt
  originalFieldName: String
  parent: ID!
  parentId: ID
  path: [String!]!
  startTime: Timestamp!
  type: String
}

type TracePathErrorsRefsDimensions {
  clientName: String
  clientReferenceId: ID
  clientVersion: String
  durationBucket: Int
  errorMessage: String
  gcsBucket: String
  #If metrics were collected from a federated service, this field will be prefixed with `service:<SERVICE_NAME>.`
  path: String
  queryId: ID
  queryName: String
  querySignature: String
  schemaHash: String
  schemaTag: String
  serviceId: ID
  serviceVersion: String
  traceHttpStatusCode: Int
  traceId: ID
  traceStartsAt: Timestamp
}

type TracePathErrorsRefsMetrics {
  errorsCountInPath: Long!
  errorsCountInTrace: Long!
  traceSizeBytes: Long!
}

type TracePathErrorsRefsRecord {
  #Dimensions of TracePathErrorsRefs that can be grouped by.
  groupBy: TracePathErrorsRefsDimensions!
  #Metrics of TracePathErrorsRefs that can be aggregated over.
  metrics: TracePathErrorsRefsMetrics!
  #Starting segment timestamp.
  timestamp: Timestamp!
}

type TraceRefsDimensions {
  clientName: String
  clientReferenceId: ID
  clientVersion: String
  durationBucket: Int
  gcsBucket: String
  queryId: ID
  queryName: String
  querySignature: String
  schemaHash: String
  schemaTag: String
  serviceId: ID
  serviceVersion: String
  traceId: ID
}

type TraceRefsMetrics {
  durationNs: Long!
  traceSizeBytes: Long!
}

type TraceRefsRecord {
  #Dimensions of TraceRefs that can be grouped by.
  groupBy: TraceRefsDimensions!
  #Metrics of TraceRefs that can be aggregated over.
  metrics: TraceRefsMetrics!
  #Starting segment timestamp.
  timestamp: Timestamp!
}

type TraceSourceLocation {
  column: Int!
  line: Int!
}

type User implements Identity {
  acceptedPrivacyPolicyAt: Timestamp
  accountIDs: [ID!]!
  accounts: [Account!]!
  avatarUrl: String
  canUpdateEmail: Boolean!
  canUpdateFullName: Boolean!
  createdAt: Timestamp!
  email: String
  fullName: String!
  id: ID!
  #This role is reserved exclusively for internal MDG employees, and it controls what access they may have to other
  #organizations within Graph Manager. Only admins are allowed to see this field.
  internalAdminRole: InternalMdgAdminRole
  #Last time any API token from this service was used against Engine services
  lastAuthenticatedAt: Timestamp
  name: String!
  setting(key: String!): String
  settings: [StringToString!]! @deprecated(reason : "Moved the only supported key to `User.acceptedPrivacyPolicyAt`")
  synchronized: Boolean!
  type: UserType!
}

type UserMutation {
  acceptPrivacyPolicy: Void
  #Change the user's password
  changePassword(newPassword: String!, previousPassword: String!): Void
  #Refresh information about the user from its upstream service (eg list of organizations from GitHub)
  refresh: User
  #Change the user's E-mail address
  setEmail(email: String!): Void @deprecated(reason : "Use UserMutation.update")
  #Update information about a user; all arguments are optional
  update(email: String, fullName: String): User
  # Update user to have the given internal mdg admin role.
  # It is necessary to be an MDG_INTERNAL_SUPER_ADMIN to perform update.
  # Additionally, upserting a null value explicitly revokes this user's
  # admin status.
  updateRole(newRole: InternalMdgAdminRole): User
  #Upsert any set of keys in the user settings to corresponding values
  updateSettings(settings: [StringToStringInput!]!): Void @deprecated(reason : "Moved the only supported key to `UserMutation.acceptPrivacyPolicy`")
  user: User!
}

type _Service {
  sdl: String!
}

#Columns of AccountErrorStats.
enum AccountErrorStatsColumn {
  CLIENT_NAME
  CLIENT_REFERENCE_ID
  CLIENT_VERSION
  ERRORS_COUNT
  PATH
  QUERY_ID
  QUERY_NAME
  QUERY_SIGNATURE
  REQUESTS_WITH_ERRORS_COUNT
  SCHEMA_HASH
  SCHEMA_TAG
  SERVICE_ID
  SERVICE_VERSION
  TIMESTAMP
}

#Columns of AccountFieldStats.
enum AccountFieldStatsColumn {
  CLIENT_NAME
  CLIENT_REFERENCE_ID
  CLIENT_VERSION
  ERRORS_COUNT
  FIELD
  FIELD_HISTOGRAM
  QUERY_ID
  QUERY_NAME
  QUERY_SIGNATURE
  SCHEMA_HASH
  SCHEMA_TAG
  SERVICE_ID
  SERVICE_VERSION
  TIMESTAMP
}

#Columns of AccountQueryStats.
enum AccountQueryStatsColumn {
  CACHED_HISTOGRAM
  CACHED_REQUESTS_COUNT
  CACHE_TTL_HISTOGRAM
  CLIENT_NAME
  CLIENT_REFERENCE_ID
  CLIENT_VERSION
  FORBIDDEN_OPERATION_COUNT
  QUERY_ID
  QUERY_NAME
  QUERY_SIGNATURE
  REGISTERED_OPERATION_COUNT
  REQUESTS_WITH_ERRORS_COUNT
  SCHEMA_HASH
  SCHEMA_TAG
  SERVICE_ID
  SERVICE_VERSION
  TIMESTAMP
  UNCACHED_HISTOGRAM
  UNCACHED_REQUESTS_COUNT
}

enum AccountState {
  ACTIVE
  CLOSED
  IN_TRIAL
  PROBATION
  SUSPENSION
  TRIAL_EXPIRED
  UNKNOWN
  UNPROVISIONED
}

#Columns of AccountTracePathErrorsRefs.
enum AccountTracePathErrorsRefsColumn {
  CLIENT_NAME
  CLIENT_REFERENCE_ID
  CLIENT_VERSION
  DURATION_BUCKET
  ERRORS_COUNT_IN_PATH
  ERRORS_COUNT_IN_TRACE
  ERROR_MESSAGE
  GCS_BUCKET
  PATH
  QUERY_ID
  QUERY_NAME
  QUERY_SIGNATURE
  SCHEMA_HASH
  SCHEMA_TAG
  SERVICE_ID
  SERVICE_VERSION
  TIMESTAMP
  TRACE_HTTP_STATUS_CODE
  TRACE_ID
  TRACE_SIZE_BYTES
  TRACE_STARTS_AT
}

#Columns of AccountTraceRefs.
enum AccountTraceRefsColumn {
  CLIENT_NAME
  CLIENT_REFERENCE_ID
  CLIENT_VERSION
  DURATION_BUCKET
  DURATION_NS
  GCS_BUCKET
  QUERY_ID
  QUERY_NAME
  QUERY_SIGNATURE
  SCHEMA_HASH
  SCHEMA_TAG
  SERVICE_ID
  SERVICE_VERSION
  TIMESTAMP
  TRACE_ID
  TRACE_SIZE_BYTES
}

enum BillingModel {
  REQUEST_BASED
  SEAT_BASED
}

enum BillingPeriod {
  MONTHLY
  YEARLY
}

enum BillingPlanTier {
  COMMUNITY
  PRO
  STANDARD
  TEAM
}

enum CacheScope {
  PRIVATE
  PUBLIC
  UNKNOWN
  UNRECOGNIZED
}

enum ComparisonOperator {
  EQUALS
  GREATER_THAN
  GREATER_THAN_OR_EQUAL_TO
  LESS_THAN
  LESS_THAN_OR_EQUAL_TO
  NOT_EQUALS
  UNRECOGNIZED
}

enum Currency {
  USD
}

#Columns of ErrorStats.
enum ErrorStatsColumn {
  ACCOUNT_ID
  CLIENT_NAME
  CLIENT_REFERENCE_ID
  CLIENT_VERSION
  ERRORS_COUNT
  PATH
  QUERY_ID
  QUERY_NAME
  QUERY_SIGNATURE
  REQUESTS_WITH_ERRORS_COUNT
  SCHEMA_HASH
  SCHEMA_TAG
  SERVICE_ID
  SERVICE_VERSION
  TIMESTAMP
}

#Columns of FieldStats.
enum FieldStatsColumn {
  ACCOUNT_ID
  CLIENT_NAME
  CLIENT_REFERENCE_ID
  CLIENT_VERSION
  ERRORS_COUNT
  FIELD
  FIELD_HISTOGRAM
  QUERY_ID
  QUERY_NAME
  QUERY_SIGNATURE
  SCHEMA_HASH
  SCHEMA_TAG
  SERVICE_ID
  SERVICE_VERSION
  TIMESTAMP
}

enum HTTPMethod {
  CONNECT
  DELETE
  GET
  HEAD
  OPTIONS
  PATCH
  POST
  PUT
  TRACE
  UNKNOWN
  UNRECOGNIZED
}

enum InternalMdgAdminRole {
  INTERNAL_MDG_READ_ONLY
  INTERNAL_MDG_SALES
  INTERNAL_MDG_SUPER_ADMIN
  INTERNAL_MDG_SUPPORT
}

enum InvoiceState {
  COLLECTED
  FAILED
  OPEN
  PAST_DUE
  UNKNOWN
}

enum Ordering {
  ASCENDING
  DESCENDING
}

#Columns of QueryStats.
enum QueryStatsColumn {
  ACCOUNT_ID
  CACHED_HISTOGRAM
  CACHED_REQUESTS_COUNT
  CACHE_TTL_HISTOGRAM
  CLIENT_NAME
  CLIENT_REFERENCE_ID
  CLIENT_VERSION
  FORBIDDEN_OPERATION_COUNT
  QUERY_ID
  QUERY_NAME
  QUERY_SIGNATURE
  REGISTERED_OPERATION_COUNT
  REQUESTS_WITH_ERRORS_COUNT
  SCHEMA_HASH
  SCHEMA_TAG
  SERVICE_ID
  SERVICE_VERSION
  TIMESTAMP
  UNCACHED_HISTOGRAM
  UNCACHED_REQUESTS_COUNT
}

enum QueryTriggerMetric {
  #Number of requests within the window that resulted in an error. Ignores `percentile`.
  ERROR_COUNT
  #Number of error requests divided by total number of requests. Ignores `percentile`.
  ERROR_PERCENTAGE
  #Number of requests within the window. Ignores `percentile`.
  REQUEST_COUNT
  #Request latency in ms. Requires `percentile`.
  REQUEST_SERVICE_TIME
}

enum QueryTriggerScope {
  ALL
  ANY
  UNRECOGNIZED
}

enum QueryTriggerWindow {
  FIFTEEN_MINUTES
  FIVE_MINUTES
  ONE_MINUTE
  UNRECOGNIZED
}

enum Resolution {
  R15M
  R1D
  R1H
  R1M
  R5M
  R6H
}

#Columns of ServiceErrorStats.
enum ServiceErrorStatsColumn {
  CLIENT_NAME
  CLIENT_REFERENCE_ID
  CLIENT_VERSION
  ERRORS_COUNT
  PATH
  QUERY_ID
  QUERY_NAME
  QUERY_SIGNATURE
  REQUESTS_WITH_ERRORS_COUNT
  SCHEMA_HASH
  SCHEMA_TAG
  SERVICE_VERSION
  TIMESTAMP
}

#Columns of ServiceFieldStats.
enum ServiceFieldStatsColumn {
  CLIENT_NAME
  CLIENT_REFERENCE_ID
  CLIENT_VERSION
  ERRORS_COUNT
  FIELD
  FIELD_HISTOGRAM
  QUERY_ID
  QUERY_NAME
  QUERY_SIGNATURE
  SCHEMA_HASH
  SCHEMA_TAG
  SERVICE_VERSION
  TIMESTAMP
}

#Columns of ServiceQueryStats.
enum ServiceQueryStatsColumn {
  CACHED_HISTOGRAM
  CACHED_REQUESTS_COUNT
  CACHE_TTL_HISTOGRAM
  CLIENT_NAME
  CLIENT_REFERENCE_ID
  CLIENT_VERSION
  FORBIDDEN_OPERATION_COUNT
  QUERY_ID
  QUERY_NAME
  QUERY_SIGNATURE
  REGISTERED_OPERATION_COUNT
  REQUESTS_WITH_ERRORS_COUNT
  SCHEMA_HASH
  SCHEMA_TAG
  SERVICE_VERSION
  TIMESTAMP
  UNCACHED_HISTOGRAM
  UNCACHED_REQUESTS_COUNT
}

#Columns of ServiceTracePathErrorsRefs.
enum ServiceTracePathErrorsRefsColumn {
  CLIENT_NAME
  CLIENT_REFERENCE_ID
  CLIENT_VERSION
  DURATION_BUCKET
  ERRORS_COUNT_IN_PATH
  ERRORS_COUNT_IN_TRACE
  ERROR_MESSAGE
  GCS_BUCKET
  PATH
  QUERY_ID
  QUERY_NAME
  QUERY_SIGNATURE
  SCHEMA_HASH
  SCHEMA_TAG
  SERVICE_VERSION
  TIMESTAMP
  TRACE_HTTP_STATUS_CODE
  TRACE_ID
  TRACE_SIZE_BYTES
  TRACE_STARTS_AT
}

#Columns of ServiceTraceRefs.
enum ServiceTraceRefsColumn {
  CLIENT_NAME
  CLIENT_REFERENCE_ID
  CLIENT_VERSION
  DURATION_BUCKET
  DURATION_NS
  GCS_BUCKET
  QUERY_ID
  QUERY_NAME
  QUERY_SIGNATURE
  SCHEMA_HASH
  SCHEMA_TAG
  SERVICE_VERSION
  TIMESTAMP
  TRACE_ID
  TRACE_SIZE_BYTES
}

enum SubscriptionState {
  ACTIVE
  CANCELED
  EXPIRED
  FUTURE
  IN_TRIAL
  PAST_DUE
  PENDING
  TRIAL_EXPIRED
  UNKNOWN
}

#Columns of TracePathErrorsRefs.
enum TracePathErrorsRefsColumn {
  CLIENT_NAME
  CLIENT_REFERENCE_ID
  CLIENT_VERSION
  DURATION_BUCKET
  ERRORS_COUNT_IN_PATH
  ERRORS_COUNT_IN_TRACE
  ERROR_MESSAGE
  GCS_BUCKET
  PATH
  QUERY_ID
  QUERY_NAME
  QUERY_SIGNATURE
  SCHEMA_HASH
  SCHEMA_TAG
  SERVICE_ID
  SERVICE_VERSION
  TIMESTAMP
  TRACE_HTTP_STATUS_CODE
  TRACE_ID
  TRACE_SIZE_BYTES
  TRACE_STARTS_AT
}

#Columns of TraceRefs.
enum TraceRefsColumn {
  CLIENT_NAME
  CLIENT_REFERENCE_ID
  CLIENT_VERSION
  DURATION_BUCKET
  DURATION_NS
  GCS_BUCKET
  QUERY_ID
  QUERY_NAME
  QUERY_SIGNATURE
  SCHEMA_HASH
  SCHEMA_TAG
  SERVICE_ID
  SERVICE_VERSION
  TIMESTAMP
  TRACE_ID
  TRACE_SIZE_BYTES
}

enum UserPermission {
  ADMIN
  STANDARD
}

enum UserType {
  APOLLO
  GITHUB
  SSO
}

#A blob (base64'ed in JSON & GraphQL)
scalar Blob

#Long type
scalar Long

#Arbitrary JSON object
scalar Object

scalar StringOrInt

#ISO 8601, extended format with nanoseconds, Zulu (or "[+-]seconds" for times relative to now)
scalar Timestamp

#Always null
scalar Void

scalar _Any

scalar _FieldSet

#Filter for data in AccountErrorStats. Fields with dimension names represent equality checks. All fields are implicitly ANDed together.
input AccountErrorStatsFilter {
  and: [AccountErrorStatsFilter!]
  #Selects rows whose clientName dimension equals the given value. If the given value is null, this parameter is ignored; to query for rows whose value is null, use {in: {clientName: [null]}}.
  clientName: String
  #Selects rows whose clientReferenceId dimension equals the given value. If the given value is null, this parameter is ignored; to query for rows whose value is null, use {in: {clientReferenceId: [null]}}.
  clientReferenceId: ID
  #Selects rows whose clientVersion dimension equals the given value. If the given value is null, this parameter is ignored; to query for rows whose value is null, use {in: {clientVersion: [null]}}.
  clientVersion: String
  in: AccountErrorStatsFilterIn
  not: AccountErrorStatsFilter
  or: [AccountErrorStatsFilter!]
  #Selects rows whose path dimension equals the given value. If the given value is null, this parameter is ignored; to query for rows whose value is null, use {in: {path: [null]}}.
  path: String
  #Selects rows whose queryId dimension equals the given value. If the given value is null, this parameter is ignored; to query for rows whose value is null, use {in: {queryId: [null]}}.
  queryId: ID
  #Selects rows whose queryName dimension equals the given value. If the given value is null, this parameter is ignored; to query for rows whose value is null, use {in: {queryName: [null]}}.
  queryName: String
  #Selects rows whose querySignature dimension equals the given value. If the given value is null, this parameter is ignored; to query for rows whose value is null, use {in: {querySignature: [null]}}.
  querySignature: String
  #Selects rows whose schemaHash dimension equals the given value. If the given value is null, this parameter is ignored; to query for rows whose value is null, use {in: {schemaHash: [null]}}.
  schemaHash: String
  #Selects rows whose schemaTag dimension equals the given value. If the given value is null, this parameter is ignored; to query for rows whose value is null, use {in: {schemaTag: [null]}}.
  schemaTag: String
  #Selects rows whose serviceId dimension equals the given value. If the given value is null, this parameter is ignored; to query for rows whose value is null, use {in: {serviceId: [null]}}.
  serviceId: ID
  #Selects rows whose serviceVersion dimension equals the given value. If the given value is null, this parameter is ignored; to query for rows whose value is null, use {in: {serviceVersion: [null]}}.
  serviceVersion: String
}

#Filter for data in AccountErrorStats. Fields match if the corresponding dimension's value is in the given list. All fields are implicitly ANDed together.
input AccountErrorStatsFilterIn {
  #Selects rows whose clientName dimension is in the given list. A null value in the list means a row with null for that dimension.
  clientName: [String]
  #Selects rows whose clientReferenceId dimension is in the given list. A null value in the list means a row with null for that dimension.
  clientReferenceId: [ID]
  #Selects rows whose clientVersion dimension is in the given list. A null value in the list means a row with null for that dimension.
  clientVersion: [String]
  #Selects rows whose path dimension is in the given list. A null value in the list means a row with null for that dimension.
  path: [String]
  #Selects rows whose queryId dimension is in the given list. A null value in the list means a row with null for that dimension.
  queryId: [ID]
  #Selects rows whose queryName dimension is in the given list. A null value in the list means a row with null for that dimension.
  queryName: [String]
  #Selects rows whose querySignature dimension is in the given list. A null value in the list means a row with null for that dimension.
  querySignature: [String]
  #Selects rows whose schemaHash dimension is in the given list. A null value in the list means a row with null for that dimension.
  schemaHash: [String]
  #Selects rows whose schemaTag dimension is in the given list. A null value in the list means a row with null for that dimension.
  schemaTag: [String]
  #Selects rows whose serviceId dimension is in the given list. A null value in the list means a row with null for that dimension.
  serviceId: [ID]
  #Selects rows whose serviceVersion dimension is in the given list. A null value in the list means a row with null for that dimension.
  serviceVersion: [String]
}

input AccountErrorStatsOrderBySpec {
  column: AccountErrorStatsColumn!
  direction: Ordering!
}

#Filter for data in AccountFieldStats. Fields with dimension names represent equality checks. All fields are implicitly ANDed together.
input AccountFieldStatsFilter {
  and: [AccountFieldStatsFilter!]
  #Selects rows whose clientName dimension equals the given value. If the given value is null, this parameter is ignored; to query for rows whose value is null, use {in: {clientName: [null]}}.
  clientName: String
  #Selects rows whose clientReferenceId dimension equals the given value. If the given value is null, this parameter is ignored; to query for rows whose value is null, use {in: {clientReferenceId: [null]}}.
  clientReferenceId: String
  #Selects rows whose clientVersion dimension equals the given value. If the given value is null, this parameter is ignored; to query for rows whose value is null, use {in: {clientVersion: [null]}}.
  clientVersion: String
  #Selects rows whose field dimension equals the given value. If the given value is null, this parameter is ignored; to query for rows whose value is null, use {in: {field: [null]}}.
  field: String
  in: AccountFieldStatsFilterIn
  not: AccountFieldStatsFilter
  or: [AccountFieldStatsFilter!]
  #Selects rows whose queryId dimension equals the given value. If the given value is null, this parameter is ignored; to query for rows whose value is null, use {in: {queryId: [null]}}.
  queryId: ID
  #Selects rows whose queryName dimension equals the given value. If the given value is null, this parameter is ignored; to query for rows whose value is null, use {in: {queryName: [null]}}.
  queryName: String
  #Selects rows whose querySignature dimension equals the given value. If the given value is null, this parameter is ignored; to query for rows whose value is null, use {in: {querySignature: [null]}}.
  querySignature: String
  #Selects rows whose schemaHash dimension equals the given value. If the given value is null, this parameter is ignored; to query for rows whose value is null, use {in: {schemaHash: [null]}}.
  schemaHash: String
  #Selects rows whose schemaTag dimension equals the given value. If the given value is null, this parameter is ignored; to query for rows whose value is null, use {in: {schemaTag: [null]}}.
  schemaTag: String
  #Selects rows whose serviceId dimension equals the given value. If the given value is null, this parameter is ignored; to query for rows whose value is null, use {in: {serviceId: [null]}}.
  serviceId: ID
  #Selects rows whose serviceVersion dimension equals the given value. If the given value is null, this parameter is ignored; to query for rows whose value is null, use {in: {serviceVersion: [null]}}.
  serviceVersion: String
}

#Filter for data in AccountFieldStats. Fields match if the corresponding dimension's value is in the given list. All fields are implicitly ANDed together.
input AccountFieldStatsFilterIn {
  #Selects rows whose clientName dimension is in the given list. A null value in the list means a row with null for that dimension.
  clientName: [String]
  #Selects rows whose clientReferenceId dimension is in the given list. A null value in the list means a row with null for that dimension.
  clientReferenceId: [String]
  #Selects rows whose clientVersion dimension is in the given list. A null value in the list means a row with null for that dimension.
  clientVersion: [String]
  #Selects rows whose field dimension is in the given list. A null value in the list means a row with null for that dimension.
  field: [String]
  #Selects rows whose queryId dimension is in the given list. A null value in the list means a row with null for that dimension.
  queryId: [ID]
  #Selects rows whose queryName dimension is in the given list. A null value in the list means a row with null for that dimension.
  queryName: [String]
  #Selects rows whose querySignature dimension is in the given list. A null value in the list means a row with null for that dimension.
  querySignature: [String]
  #Selects rows whose schemaHash dimension is in the given list. A null value in the list means a row with null for that dimension.
  schemaHash: [String]
  #Selects rows whose schemaTag dimension is in the given list. A null value in the list means a row with null for that dimension.
  schemaTag: [String]
  #Selects rows whose serviceId dimension is in the given list. A null value in the list means a row with null for that dimension.
  serviceId: [ID]
  #Selects rows whose serviceVersion dimension is in the given list. A null value in the list means a row with null for that dimension.
  serviceVersion: [String]
}

input AccountFieldStatsOrderBySpec {
  column: AccountFieldStatsColumn!
  direction: Ordering!
}

#Filter for data in AccountQueryStats. Fields with dimension names represent equality checks. All fields are implicitly ANDed together.
input AccountQueryStatsFilter {
  and: [AccountQueryStatsFilter!]
  #Selects rows whose clientName dimension equals the given value. If the given value is null, this parameter is ignored; to query for rows whose value is null, use {in: {clientName: [null]}}.
  clientName: String
  #Selects rows whose clientReferenceId dimension equals the given value. If the given value is null, this parameter is ignored; to query for rows whose value is null, use {in: {clientReferenceId: [null]}}.
  clientReferenceId: ID
  #Selects rows whose clientVersion dimension equals the given value. If the given value is null, this parameter is ignored; to query for rows whose value is null, use {in: {clientVersion: [null]}}.
  clientVersion: String
  in: AccountQueryStatsFilterIn
  not: AccountQueryStatsFilter
  or: [AccountQueryStatsFilter!]
  #Selects rows whose queryId dimension equals the given value. If the given value is null, this parameter is ignored; to query for rows whose value is null, use {in: {queryId: [null]}}.
  queryId: ID
  #Selects rows whose queryName dimension equals the given value. If the given value is null, this parameter is ignored; to query for rows whose value is null, use {in: {queryName: [null]}}.
  queryName: String
  #Selects rows whose querySignature dimension equals the given value. If the given value is null, this parameter is ignored; to query for rows whose value is null, use {in: {querySignature: [null]}}.
  querySignature: String
  #Selects rows whose schemaHash dimension equals the given value. If the given value is null, this parameter is ignored; to query for rows whose value is null, use {in: {schemaHash: [null]}}.
  schemaHash: String
  #Selects rows whose schemaTag dimension equals the given value. If the given value is null, this parameter is ignored; to query for rows whose value is null, use {in: {schemaTag: [null]}}.
  schemaTag: String
  #Selects rows whose serviceId dimension equals the given value. If the given value is null, this parameter is ignored; to query for rows whose value is null, use {in: {serviceId: [null]}}.
  serviceId: ID
  #Selects rows whose serviceVersion dimension equals the given value. If the given value is null, this parameter is ignored; to query for rows whose value is null, use {in: {serviceVersion: [null]}}.
  serviceVersion: String
}

#Filter for data in AccountQueryStats. Fields match if the corresponding dimension's value is in the given list. All fields are implicitly ANDed together.
input AccountQueryStatsFilterIn {
  #Selects rows whose clientName dimension is in the given list. A null value in the list means a row with null for that dimension.
  clientName: [String]
  #Selects rows whose clientReferenceId dimension is in the given list. A null value in the list means a row with null for that dimension.
  clientReferenceId: [ID]
  #Selects rows whose clientVersion dimension is in the given list. A null value in the list means a row with null for that dimension.
  clientVersion: [String]
  #Selects rows whose queryId dimension is in the given list. A null value in the list means a row with null for that dimension.
  queryId: [ID]
  #Selects rows whose queryName dimension is in the given list. A null value in the list means a row with null for that dimension.
  queryName: [String]
  #Selects rows whose querySignature dimension is in the given list. A null value in the list means a row with null for that dimension.
  querySignature: [String]
  #Selects rows whose schemaHash dimension is in the given list. A null value in the list means a row with null for that dimension.
  schemaHash: [String]
  #Selects rows whose schemaTag dimension is in the given list. A null value in the list means a row with null for that dimension.
  schemaTag: [String]
  #Selects rows whose serviceId dimension is in the given list. A null value in the list means a row with null for that dimension.
  serviceId: [ID]
  #Selects rows whose serviceVersion dimension is in the given list. A null value in the list means a row with null for that dimension.
  serviceVersion: [String]
}

input AccountQueryStatsOrderBySpec {
  column: AccountQueryStatsColumn!
  direction: Ordering!
}

#Filter for data in AccountTracePathErrorsRefs. Fields with dimension names represent equality checks. All fields are implicitly ANDed together.
input AccountTracePathErrorsRefsFilter {
  and: [AccountTracePathErrorsRefsFilter!]
  #Selects rows whose clientName dimension equals the given value. If the given value is null, this parameter is ignored; to query for rows whose value is null, use {in: {clientName: [null]}}.
  clientName: String
  #Selects rows whose clientReferenceId dimension equals the given value. If the given value is null, this parameter is ignored; to query for rows whose value is null, use {in: {clientReferenceId: [null]}}.
  clientReferenceId: ID
  #Selects rows whose clientVersion dimension equals the given value. If the given value is null, this parameter is ignored; to query for rows whose value is null, use {in: {clientVersion: [null]}}.
  clientVersion: String
  #Selects rows whose durationBucket dimension equals the given value. If the given value is null, this parameter is ignored; to query for rows whose value is null, use {in: {durationBucket: [null]}}.
  durationBucket: Long
  #Selects rows whose errorMessage dimension equals the given value. If the given value is null, this parameter is ignored; to query for rows whose value is null, use {in: {errorMessage: [null]}}.
  errorMessage: String
  #Selects rows whose gcsBucket dimension equals the given value. If the given value is null, this parameter is ignored; to query for rows whose value is null, use {in: {gcsBucket: [null]}}.
  gcsBucket: String
  in: AccountTracePathErrorsRefsFilterIn
  not: AccountTracePathErrorsRefsFilter
  or: [AccountTracePathErrorsRefsFilter!]
  #Selects rows whose path dimension equals the given value. If the given value is null, this parameter is ignored; to query for rows whose value is null, use {in: {path: [null]}}.
  path: String
  #Selects rows whose queryId dimension equals the given value. If the given value is null, this parameter is ignored; to query for rows whose value is null, use {in: {queryId: [null]}}.
  queryId: ID
  #Selects rows whose queryName dimension equals the given value. If the given value is null, this parameter is ignored; to query for rows whose value is null, use {in: {queryName: [null]}}.
  queryName: String
  #Selects rows whose querySignature dimension equals the given value. If the given value is null, this parameter is ignored; to query for rows whose value is null, use {in: {querySignature: [null]}}.
  querySignature: String
  #Selects rows whose schemaHash dimension equals the given value. If the given value is null, this parameter is ignored; to query for rows whose value is null, use {in: {schemaHash: [null]}}.
  schemaHash: String
  #Selects rows whose schemaTag dimension equals the given value. If the given value is null, this parameter is ignored; to query for rows whose value is null, use {in: {schemaTag: [null]}}.
  schemaTag: String
  #Selects rows whose serviceId dimension equals the given value. If the given value is null, this parameter is ignored; to query for rows whose value is null, use {in: {serviceId: [null]}}.
  serviceId: ID
  #Selects rows whose serviceVersion dimension equals the given value. If the given value is null, this parameter is ignored; to query for rows whose value is null, use {in: {serviceVersion: [null]}}.
  serviceVersion: String
  #Selects rows whose traceHttpStatusCode dimension equals the given value. If the given value is null, this parameter is ignored; to query for rows whose value is null, use {in: {traceHttpStatusCode: [null]}}.
  traceHttpStatusCode: Long
  #Selects rows whose traceId dimension equals the given value. If the given value is null, this parameter is ignored; to query for rows whose value is null, use {in: {traceId: [null]}}.
  traceId: ID
}

#Filter for data in AccountTracePathErrorsRefs. Fields match if the corresponding dimension's value is in the given list. All fields are implicitly ANDed together.
input AccountTracePathErrorsRefsFilterIn {
  #Selects rows whose clientName dimension is in the given list. A null value in the list means a row with null for that dimension.
  clientName: [String]
  #Selects rows whose clientReferenceId dimension is in the given list. A null value in the list means a row with null for that dimension.
  clientReferenceId: [ID]
  #Selects rows whose clientVersion dimension is in the given list. A null value in the list means a row with null for that dimension.
  clientVersion: [String]
  #Selects rows whose durationBucket dimension is in the given list. A null value in the list means a row with null for that dimension.
  durationBucket: [Long]
  #Selects rows whose errorMessage dimension is in the given list. A null value in the list means a row with null for that dimension.
  errorMessage: [String]
  #Selects rows whose gcsBucket dimension is in the given list. A null value in the list means a row with null for that dimension.
  gcsBucket: [String]
  #Selects rows whose path dimension is in the given list. A null value in the list means a row with null for that dimension.
  path: [String]
  #Selects rows whose queryId dimension is in the given list. A null value in the list means a row with null for that dimension.
  queryId: [ID]
  #Selects rows whose queryName dimension is in the given list. A null value in the list means a row with null for that dimension.
  queryName: [String]
  #Selects rows whose querySignature dimension is in the given list. A null value in the list means a row with null for that dimension.
  querySignature: [String]
  #Selects rows whose schemaHash dimension is in the given list. A null value in the list means a row with null for that dimension.
  schemaHash: [String]
  #Selects rows whose schemaTag dimension is in the given list. A null value in the list means a row with null for that dimension.
  schemaTag: [String]
  #Selects rows whose serviceId dimension is in the given list. A null value in the list means a row with null for that dimension.
  serviceId: [ID]
  #Selects rows whose serviceVersion dimension is in the given list. A null value in the list means a row with null for that dimension.
  serviceVersion: [String]
  #Selects rows whose traceHttpStatusCode dimension is in the given list. A null value in the list means a row with null for that dimension.
  traceHttpStatusCode: [Long]
  #Selects rows whose traceId dimension is in the given list. A null value in the list means a row with null for that dimension.
  traceId: [ID]
}

input AccountTracePathErrorsRefsOrderBySpec {
  column: AccountTracePathErrorsRefsColumn!
  direction: Ordering!
}

#Filter for data in AccountTraceRefs. Fields with dimension names represent equality checks. All fields are implicitly ANDed together.
input AccountTraceRefsFilter {
  and: [AccountTraceRefsFilter!]
  #Selects rows whose clientName dimension equals the given value. If the given value is null, this parameter is ignored; to query for rows whose value is null, use {in: {clientName: [null]}}.
  clientName: String
  #Selects rows whose clientReferenceId dimension equals the given value. If the given value is null, this parameter is ignored; to query for rows whose value is null, use {in: {clientReferenceId: [null]}}.
  clientReferenceId: ID
  #Selects rows whose clientVersion dimension equals the given value. If the given value is null, this parameter is ignored; to query for rows whose value is null, use {in: {clientVersion: [null]}}.
  clientVersion: String
  #Selects rows whose durationBucket dimension equals the given value. If the given value is null, this parameter is ignored; to query for rows whose value is null, use {in: {durationBucket: [null]}}.
  durationBucket: Long
  #Selects rows whose gcsBucket dimension equals the given value. If the given value is null, this parameter is ignored; to query for rows whose value is null, use {in: {gcsBucket: [null]}}.
  gcsBucket: String
  in: AccountTraceRefsFilterIn
  not: AccountTraceRefsFilter
  or: [AccountTraceRefsFilter!]
  #Selects rows whose queryId dimension equals the given value. If the given value is null, this parameter is ignored; to query for rows whose value is null, use {in: {queryId: [null]}}.
  queryId: ID
  #Selects rows whose queryName dimension equals the given value. If the given value is null, this parameter is ignored; to query for rows whose value is null, use {in: {queryName: [null]}}.
  queryName: String
  #Selects rows whose querySignature dimension equals the given value. If the given value is null, this parameter is ignored; to query for rows whose value is null, use {in: {querySignature: [null]}}.
  querySignature: String
  #Selects rows whose schemaHash dimension equals the given value. If the given value is null, this parameter is ignored; to query for rows whose value is null, use {in: {schemaHash: [null]}}.
  schemaHash: String
  #Selects rows whose schemaTag dimension equals the given value. If the given value is null, this parameter is ignored; to query for rows whose value is null, use {in: {schemaTag: [null]}}.
  schemaTag: String
  #Selects rows whose serviceId dimension equals the given value. If the given value is null, this parameter is ignored; to query for rows whose value is null, use {in: {serviceId: [null]}}.
  serviceId: ID
  #Selects rows whose serviceVersion dimension equals the given value. If the given value is null, this parameter is ignored; to query for rows whose value is null, use {in: {serviceVersion: [null]}}.
  serviceVersion: String
  #Selects rows whose traceId dimension equals the given value. If the given value is null, this parameter is ignored; to query for rows whose value is null, use {in: {traceId: [null]}}.
  traceId: ID
}

#Filter for data in AccountTraceRefs. Fields match if the corresponding dimension's value is in the given list. All fields are implicitly ANDed together.
input AccountTraceRefsFilterIn {
  #Selects rows whose clientName dimension is in the given list. A null value in the list means a row with null for that dimension.
  clientName: [String]
  #Selects rows whose clientReferenceId dimension is in the given list. A null value in the list means a row with null for that dimension.
  clientReferenceId: [ID]
  #Selects rows whose clientVersion dimension is in the given list. A null value in the list means a row with null for that dimension.
  clientVersion: [String]
  #Selects rows whose durationBucket dimension is in the given list. A null value in the list means a row with null for that dimension.
  durationBucket: [Long]
  #Selects rows whose gcsBucket dimension is in the given list. A null value in the list means a row with null for that dimension.
  gcsBucket: [String]
  #Selects rows whose queryId dimension is in the given list. A null value in the list means a row with null for that dimension.
  queryId: [ID]
  #Selects rows whose queryName dimension is in the given list. A null value in the list means a row with null for that dimension.
  queryName: [String]
  #Selects rows whose querySignature dimension is in the given list. A null value in the list means a row with null for that dimension.
  querySignature: [String]
  #Selects rows whose schemaHash dimension is in the given list. A null value in the list means a row with null for that dimension.
  schemaHash: [String]
  #Selects rows whose schemaTag dimension is in the given list. A null value in the list means a row with null for that dimension.
  schemaTag: [String]
  #Selects rows whose serviceId dimension is in the given list. A null value in the list means a row with null for that dimension.
  serviceId: [ID]
  #Selects rows whose serviceVersion dimension is in the given list. A null value in the list means a row with null for that dimension.
  serviceVersion: [String]
  #Selects rows whose traceId dimension is in the given list. A null value in the list means a row with null for that dimension.
  traceId: [ID]
}

input AccountTraceRefsOrderBySpec {
  column: AccountTraceRefsColumn!
  direction: Ordering!
}

#Filter for data in ErrorStats. Fields with dimension names represent equality checks. All fields are implicitly ANDed together.
input ErrorStatsFilter {
  #Selects rows whose accountId dimension equals the given value. If the given value is null, this parameter is ignored; to query for rows whose value is null, use {in: {accountId: [null]}}.
  accountId: ID
  and: [ErrorStatsFilter!]
  #Selects rows whose clientName dimension equals the given value. If the given value is null, this parameter is ignored; to query for rows whose value is null, use {in: {clientName: [null]}}.
  clientName: String
  #Selects rows whose clientReferenceId dimension equals the given value. If the given value is null, this parameter is ignored; to query for rows whose value is null, use {in: {clientReferenceId: [null]}}.
  clientReferenceId: ID
  #Selects rows whose clientVersion dimension equals the given value. If the given value is null, this parameter is ignored; to query for rows whose value is null, use {in: {clientVersion: [null]}}.
  clientVersion: String
  in: ErrorStatsFilterIn
  not: ErrorStatsFilter
  or: [ErrorStatsFilter!]
  #Selects rows whose path dimension equals the given value. If the given value is null, this parameter is ignored; to query for rows whose value is null, use {in: {path: [null]}}.
  path: String
  #Selects rows whose queryId dimension equals the given value. If the given value is null, this parameter is ignored; to query for rows whose value is null, use {in: {queryId: [null]}}.
  queryId: ID
  #Selects rows whose queryName dimension equals the given value. If the given value is null, this parameter is ignored; to query for rows whose value is null, use {in: {queryName: [null]}}.
  queryName: String
  #Selects rows whose querySignature dimension equals the given value. If the given value is null, this parameter is ignored; to query for rows whose value is null, use {in: {querySignature: [null]}}.
  querySignature: String
  #Selects rows whose schemaHash dimension equals the given value. If the given value is null, this parameter is ignored; to query for rows whose value is null, use {in: {schemaHash: [null]}}.
  schemaHash: String
  #Selects rows whose schemaTag dimension equals the given value. If the given value is null, this parameter is ignored; to query for rows whose value is null, use {in: {schemaTag: [null]}}.
  schemaTag: String
  #Selects rows whose serviceId dimension equals the given value. If the given value is null, this parameter is ignored; to query for rows whose value is null, use {in: {serviceId: [null]}}.
  serviceId: ID
  #Selects rows whose serviceVersion dimension equals the given value. If the given value is null, this parameter is ignored; to query for rows whose value is null, use {in: {serviceVersion: [null]}}.
  serviceVersion: String
}

#Filter for data in ErrorStats. Fields match if the corresponding dimension's value is in the given list. All fields are implicitly ANDed together.
input ErrorStatsFilterIn {
  #Selects rows whose accountId dimension is in the given list. A null value in the list means a row with null for that dimension.
  accountId: [ID]
  #Selects rows whose clientName dimension is in the given list. A null value in the list means a row with null for that dimension.
  clientName: [String]
  #Selects rows whose clientReferenceId dimension is in the given list. A null value in the list means a row with null for that dimension.
  clientReferenceId: [ID]
  #Selects rows whose clientVersion dimension is in the given list. A null value in the list means a row with null for that dimension.
  clientVersion: [String]
  #Selects rows whose path dimension is in the given list. A null value in the list means a row with null for that dimension.
  path: [String]
  #Selects rows whose queryId dimension is in the given list. A null value in the list means a row with null for that dimension.
  queryId: [ID]
  #Selects rows whose queryName dimension is in the given list. A null value in the list means a row with null for that dimension.
  queryName: [String]
  #Selects rows whose querySignature dimension is in the given list. A null value in the list means a row with null for that dimension.
  querySignature: [String]
  #Selects rows whose schemaHash dimension is in the given list. A null value in the list means a row with null for that dimension.
  schemaHash: [String]
  #Selects rows whose schemaTag dimension is in the given list. A null value in the list means a row with null for that dimension.
  schemaTag: [String]
  #Selects rows whose serviceId dimension is in the given list. A null value in the list means a row with null for that dimension.
  serviceId: [ID]
  #Selects rows whose serviceVersion dimension is in the given list. A null value in the list means a row with null for that dimension.
  serviceVersion: [String]
}

input ErrorStatsOrderBySpec {
  column: ErrorStatsColumn!
  direction: Ordering!
}

#Filter for data in FieldStats. Fields with dimension names represent equality checks. All fields are implicitly ANDed together.
input FieldStatsFilter {
  #Selects rows whose accountId dimension equals the given value. If the given value is null, this parameter is ignored; to query for rows whose value is null, use {in: {accountId: [null]}}.
  accountId: ID
  and: [FieldStatsFilter!]
  #Selects rows whose clientName dimension equals the given value. If the given value is null, this parameter is ignored; to query for rows whose value is null, use {in: {clientName: [null]}}.
  clientName: String
  #Selects rows whose clientReferenceId dimension equals the given value. If the given value is null, this parameter is ignored; to query for rows whose value is null, use {in: {clientReferenceId: [null]}}.
  clientReferenceId: String
  #Selects rows whose clientVersion dimension equals the given value. If the given value is null, this parameter is ignored; to query for rows whose value is null, use {in: {clientVersion: [null]}}.
  clientVersion: String
  #Selects rows whose field dimension equals the given value. If the given value is null, this parameter is ignored; to query for rows whose value is null, use {in: {field: [null]}}.
  field: String
  in: FieldStatsFilterIn
  not: FieldStatsFilter
  or: [FieldStatsFilter!]
  #Selects rows whose queryId dimension equals the given value. If the given value is null, this parameter is ignored; to query for rows whose value is null, use {in: {queryId: [null]}}.
  queryId: ID
  #Selects rows whose queryName dimension equals the given value. If the given value is null, this parameter is ignored; to query for rows whose value is null, use {in: {queryName: [null]}}.
  queryName: String
  #Selects rows whose querySignature dimension equals the given value. If the given value is null, this parameter is ignored; to query for rows whose value is null, use {in: {querySignature: [null]}}.
  querySignature: String
  #Selects rows whose schemaHash dimension equals the given value. If the given value is null, this parameter is ignored; to query for rows whose value is null, use {in: {schemaHash: [null]}}.
  schemaHash: String
  #Selects rows whose schemaTag dimension equals the given value. If the given value is null, this parameter is ignored; to query for rows whose value is null, use {in: {schemaTag: [null]}}.
  schemaTag: String
  #Selects rows whose serviceId dimension equals the given value. If the given value is null, this parameter is ignored; to query for rows whose value is null, use {in: {serviceId: [null]}}.
  serviceId: ID
  #Selects rows whose serviceVersion dimension equals the given value. If the given value is null, this parameter is ignored; to query for rows whose value is null, use {in: {serviceVersion: [null]}}.
  serviceVersion: String
}

#Filter for data in FieldStats. Fields match if the corresponding dimension's value is in the given list. All fields are implicitly ANDed together.
input FieldStatsFilterIn {
  #Selects rows whose accountId dimension is in the given list. A null value in the list means a row with null for that dimension.
  accountId: [ID]
  #Selects rows whose clientName dimension is in the given list. A null value in the list means a row with null for that dimension.
  clientName: [String]
  #Selects rows whose clientReferenceId dimension is in the given list. A null value in the list means a row with null for that dimension.
  clientReferenceId: [String]
  #Selects rows whose clientVersion dimension is in the given list. A null value in the list means a row with null for that dimension.
  clientVersion: [String]
  #Selects rows whose field dimension is in the given list. A null value in the list means a row with null for that dimension.
  field: [String]
  #Selects rows whose queryId dimension is in the given list. A null value in the list means a row with null for that dimension.
  queryId: [ID]
  #Selects rows whose queryName dimension is in the given list. A null value in the list means a row with null for that dimension.
  queryName: [String]
  #Selects rows whose querySignature dimension is in the given list. A null value in the list means a row with null for that dimension.
  querySignature: [String]
  #Selects rows whose schemaHash dimension is in the given list. A null value in the list means a row with null for that dimension.
  schemaHash: [String]
  #Selects rows whose schemaTag dimension is in the given list. A null value in the list means a row with null for that dimension.
  schemaTag: [String]
  #Selects rows whose serviceId dimension is in the given list. A null value in the list means a row with null for that dimension.
  serviceId: [ID]
  #Selects rows whose serviceVersion dimension is in the given list. A null value in the list means a row with null for that dimension.
  serviceVersion: [String]
}

input FieldStatsOrderBySpec {
  column: FieldStatsColumn!
  direction: Ordering!
}

#PagerDuty notification channel parameters
input PagerDutyChannelInput {
  name: String
  routingKey: String!
}

#Filter for data in QueryStats. Fields with dimension names represent equality checks. All fields are implicitly ANDed together.
input QueryStatsFilter {
  #Selects rows whose accountId dimension equals the given value. If the given value is null, this parameter is ignored; to query for rows whose value is null, use {in: {accountId: [null]}}.
  accountId: ID
  and: [QueryStatsFilter!]
  #Selects rows whose clientName dimension equals the given value. If the given value is null, this parameter is ignored; to query for rows whose value is null, use {in: {clientName: [null]}}.
  clientName: String
  #Selects rows whose clientReferenceId dimension equals the given value. If the given value is null, this parameter is ignored; to query for rows whose value is null, use {in: {clientReferenceId: [null]}}.
  clientReferenceId: ID
  #Selects rows whose clientVersion dimension equals the given value. If the given value is null, this parameter is ignored; to query for rows whose value is null, use {in: {clientVersion: [null]}}.
  clientVersion: String
  in: QueryStatsFilterIn
  not: QueryStatsFilter
  or: [QueryStatsFilter!]
  #Selects rows whose queryId dimension equals the given value. If the given value is null, this parameter is ignored; to query for rows whose value is null, use {in: {queryId: [null]}}.
  queryId: ID
  #Selects rows whose queryName dimension equals the given value. If the given value is null, this parameter is ignored; to query for rows whose value is null, use {in: {queryName: [null]}}.
  queryName: String
  #Selects rows whose querySignature dimension equals the given value. If the given value is null, this parameter is ignored; to query for rows whose value is null, use {in: {querySignature: [null]}}.
  querySignature: String
  #Selects rows whose schemaHash dimension equals the given value. If the given value is null, this parameter is ignored; to query for rows whose value is null, use {in: {schemaHash: [null]}}.
  schemaHash: String
  #Selects rows whose schemaTag dimension equals the given value. If the given value is null, this parameter is ignored; to query for rows whose value is null, use {in: {schemaTag: [null]}}.
  schemaTag: String
  #Selects rows whose serviceId dimension equals the given value. If the given value is null, this parameter is ignored; to query for rows whose value is null, use {in: {serviceId: [null]}}.
  serviceId: ID
  #Selects rows whose serviceVersion dimension equals the given value. If the given value is null, this parameter is ignored; to query for rows whose value is null, use {in: {serviceVersion: [null]}}.
  serviceVersion: String
}

#Filter for data in QueryStats. Fields match if the corresponding dimension's value is in the given list. All fields are implicitly ANDed together.
input QueryStatsFilterIn {
  #Selects rows whose accountId dimension is in the given list. A null value in the list means a row with null for that dimension.
  accountId: [ID]
  #Selects rows whose clientName dimension is in the given list. A null value in the list means a row with null for that dimension.
  clientName: [String]
  #Selects rows whose clientReferenceId dimension is in the given list. A null value in the list means a row with null for that dimension.
  clientReferenceId: [ID]
  #Selects rows whose clientVersion dimension is in the given list. A null value in the list means a row with null for that dimension.
  clientVersion: [String]
  #Selects rows whose queryId dimension is in the given list. A null value in the list means a row with null for that dimension.
  queryId: [ID]
  #Selects rows whose queryName dimension is in the given list. A null value in the list means a row with null for that dimension.
  queryName: [String]
  #Selects rows whose querySignature dimension is in the given list. A null value in the list means a row with null for that dimension.
  querySignature: [String]
  #Selects rows whose schemaHash dimension is in the given list. A null value in the list means a row with null for that dimension.
  schemaHash: [String]
  #Selects rows whose schemaTag dimension is in the given list. A null value in the list means a row with null for that dimension.
  schemaTag: [String]
  #Selects rows whose serviceId dimension is in the given list. A null value in the list means a row with null for that dimension.
  serviceId: [ID]
  #Selects rows whose serviceVersion dimension is in the given list. A null value in the list means a row with null for that dimension.
  serviceVersion: [String]
}

input QueryStatsOrderBySpec {
  column: QueryStatsColumn!
  direction: Ordering!
}

#Query trigger
input QueryTriggerInput {
  channelIds: [String!]
  comparisonOperator: ComparisonOperator!
  enabled: Boolean
  excludedOperationNames: [String!]
  metric: QueryTriggerMetric!
  operationNames: [String!]
  percentile: Float
  scope: QueryTriggerScope
  threshold: Float!
  window: QueryTriggerWindow!
}

#Filter for data in ServiceErrorStats. Fields with dimension names represent equality checks. All fields are implicitly ANDed together.
input ServiceErrorStatsFilter {
  and: [ServiceErrorStatsFilter!]
  #Selects rows whose clientName dimension equals the given value. If the given value is null, this parameter is ignored; to query for rows whose value is null, use {in: {clientName: [null]}}.
  clientName: String
  #Selects rows whose clientReferenceId dimension equals the given value. If the given value is null, this parameter is ignored; to query for rows whose value is null, use {in: {clientReferenceId: [null]}}.
  clientReferenceId: ID
  #Selects rows whose clientVersion dimension equals the given value. If the given value is null, this parameter is ignored; to query for rows whose value is null, use {in: {clientVersion: [null]}}.
  clientVersion: String
  in: ServiceErrorStatsFilterIn
  not: ServiceErrorStatsFilter
  or: [ServiceErrorStatsFilter!]
  #Selects rows whose path dimension equals the given value. If the given value is null, this parameter is ignored; to query for rows whose value is null, use {in: {path: [null]}}.
  path: String
  #Selects rows whose queryId dimension equals the given value. If the given value is null, this parameter is ignored; to query for rows whose value is null, use {in: {queryId: [null]}}.
  queryId: ID
  #Selects rows whose queryName dimension equals the given value. If the given value is null, this parameter is ignored; to query for rows whose value is null, use {in: {queryName: [null]}}.
  queryName: String
  #Selects rows whose querySignature dimension equals the given value. If the given value is null, this parameter is ignored; to query for rows whose value is null, use {in: {querySignature: [null]}}.
  querySignature: String
  #Selects rows whose schemaHash dimension equals the given value. If the given value is null, this parameter is ignored; to query for rows whose value is null, use {in: {schemaHash: [null]}}.
  schemaHash: String
  #Selects rows whose schemaTag dimension equals the given value. If the given value is null, this parameter is ignored; to query for rows whose value is null, use {in: {schemaTag: [null]}}.
  schemaTag: String
  #Selects rows whose serviceVersion dimension equals the given value. If the given value is null, this parameter is ignored; to query for rows whose value is null, use {in: {serviceVersion: [null]}}.
  serviceVersion: String
}

#Filter for data in ServiceErrorStats. Fields match if the corresponding dimension's value is in the given list. All fields are implicitly ANDed together.
input ServiceErrorStatsFilterIn {
  #Selects rows whose clientName dimension is in the given list. A null value in the list means a row with null for that dimension.
  clientName: [String]
  #Selects rows whose clientReferenceId dimension is in the given list. A null value in the list means a row with null for that dimension.
  clientReferenceId: [ID]
  #Selects rows whose clientVersion dimension is in the given list. A null value in the list means a row with null for that dimension.
  clientVersion: [String]
  #Selects rows whose path dimension is in the given list. A null value in the list means a row with null for that dimension.
  path: [String]
  #Selects rows whose queryId dimension is in the given list. A null value in the list means a row with null for that dimension.
  queryId: [ID]
  #Selects rows whose queryName dimension is in the given list. A null value in the list means a row with null for that dimension.
  queryName: [String]
  #Selects rows whose querySignature dimension is in the given list. A null value in the list means a row with null for that dimension.
  querySignature: [String]
  #Selects rows whose schemaHash dimension is in the given list. A null value in the list means a row with null for that dimension.
  schemaHash: [String]
  #Selects rows whose schemaTag dimension is in the given list. A null value in the list means a row with null for that dimension.
  schemaTag: [String]
  #Selects rows whose serviceVersion dimension is in the given list. A null value in the list means a row with null for that dimension.
  serviceVersion: [String]
}

input ServiceErrorStatsOrderBySpec {
  column: ServiceErrorStatsColumn!
  direction: Ordering!
}

#Filter for data in ServiceFieldStats. Fields with dimension names represent equality checks. All fields are implicitly ANDed together.
input ServiceFieldStatsFilter {
  and: [ServiceFieldStatsFilter!]
  #Selects rows whose clientName dimension equals the given value. If the given value is null, this parameter is ignored; to query for rows whose value is null, use {in: {clientName: [null]}}.
  clientName: String
  #Selects rows whose clientReferenceId dimension equals the given value. If the given value is null, this parameter is ignored; to query for rows whose value is null, use {in: {clientReferenceId: [null]}}.
  clientReferenceId: String
  #Selects rows whose clientVersion dimension equals the given value. If the given value is null, this parameter is ignored; to query for rows whose value is null, use {in: {clientVersion: [null]}}.
  clientVersion: String
  #Selects rows whose field dimension equals the given value. If the given value is null, this parameter is ignored; to query for rows whose value is null, use {in: {field: [null]}}.
  field: String
  in: ServiceFieldStatsFilterIn
  not: ServiceFieldStatsFilter
  or: [ServiceFieldStatsFilter!]
  #Selects rows whose queryId dimension equals the given value. If the given value is null, this parameter is ignored; to query for rows whose value is null, use {in: {queryId: [null]}}.
  queryId: ID
  #Selects rows whose queryName dimension equals the given value. If the given value is null, this parameter is ignored; to query for rows whose value is null, use {in: {queryName: [null]}}.
  queryName: String
  #Selects rows whose querySignature dimension equals the given value. If the given value is null, this parameter is ignored; to query for rows whose value is null, use {in: {querySignature: [null]}}.
  querySignature: String
  #Selects rows whose schemaHash dimension equals the given value. If the given value is null, this parameter is ignored; to query for rows whose value is null, use {in: {schemaHash: [null]}}.
  schemaHash: String
  #Selects rows whose schemaTag dimension equals the given value. If the given value is null, this parameter is ignored; to query for rows whose value is null, use {in: {schemaTag: [null]}}.
  schemaTag: String
  #Selects rows whose serviceVersion dimension equals the given value. If the given value is null, this parameter is ignored; to query for rows whose value is null, use {in: {serviceVersion: [null]}}.
  serviceVersion: String
}

#Filter for data in ServiceFieldStats. Fields match if the corresponding dimension's value is in the given list. All fields are implicitly ANDed together.
input ServiceFieldStatsFilterIn {
  #Selects rows whose clientName dimension is in the given list. A null value in the list means a row with null for that dimension.
  clientName: [String]
  #Selects rows whose clientReferenceId dimension is in the given list. A null value in the list means a row with null for that dimension.
  clientReferenceId: [String]
  #Selects rows whose clientVersion dimension is in the given list. A null value in the list means a row with null for that dimension.
  clientVersion: [String]
  #Selects rows whose field dimension is in the given list. A null value in the list means a row with null for that dimension.
  field: [String]
  #Selects rows whose queryId dimension is in the given list. A null value in the list means a row with null for that dimension.
  queryId: [ID]
  #Selects rows whose queryName dimension is in the given list. A null value in the list means a row with null for that dimension.
  queryName: [String]
  #Selects rows whose querySignature dimension is in the given list. A null value in the list means a row with null for that dimension.
  querySignature: [String]
  #Selects rows whose schemaHash dimension is in the given list. A null value in the list means a row with null for that dimension.
  schemaHash: [String]
  #Selects rows whose schemaTag dimension is in the given list. A null value in the list means a row with null for that dimension.
  schemaTag: [String]
  #Selects rows whose serviceVersion dimension is in the given list. A null value in the list means a row with null for that dimension.
  serviceVersion: [String]
}

input ServiceFieldStatsOrderBySpec {
  column: ServiceFieldStatsColumn!
  direction: Ordering!
}

#Filter for data in ServiceQueryStats. Fields with dimension names represent equality checks. All fields are implicitly ANDed together.
input ServiceQueryStatsFilter {
  and: [ServiceQueryStatsFilter!]
  #Selects rows whose clientName dimension equals the given value. If the given value is null, this parameter is ignored; to query for rows whose value is null, use {in: {clientName: [null]}}.
  clientName: String
  #Selects rows whose clientReferenceId dimension equals the given value. If the given value is null, this parameter is ignored; to query for rows whose value is null, use {in: {clientReferenceId: [null]}}.
  clientReferenceId: ID
  #Selects rows whose clientVersion dimension equals the given value. If the given value is null, this parameter is ignored; to query for rows whose value is null, use {in: {clientVersion: [null]}}.
  clientVersion: String
  in: ServiceQueryStatsFilterIn
  not: ServiceQueryStatsFilter
  or: [ServiceQueryStatsFilter!]
  #Selects rows whose queryId dimension equals the given value. If the given value is null, this parameter is ignored; to query for rows whose value is null, use {in: {queryId: [null]}}.
  queryId: ID
  #Selects rows whose queryName dimension equals the given value. If the given value is null, this parameter is ignored; to query for rows whose value is null, use {in: {queryName: [null]}}.
  queryName: String
  #Selects rows whose querySignature dimension equals the given value. If the given value is null, this parameter is ignored; to query for rows whose value is null, use {in: {querySignature: [null]}}.
  querySignature: String
  #Selects rows whose schemaHash dimension equals the given value. If the given value is null, this parameter is ignored; to query for rows whose value is null, use {in: {schemaHash: [null]}}.
  schemaHash: String
  #Selects rows whose schemaTag dimension equals the given value. If the given value is null, this parameter is ignored; to query for rows whose value is null, use {in: {schemaTag: [null]}}.
  schemaTag: String
  #Selects rows whose serviceVersion dimension equals the given value. If the given value is null, this parameter is ignored; to query for rows whose value is null, use {in: {serviceVersion: [null]}}.
  serviceVersion: String
}

#Filter for data in ServiceQueryStats. Fields match if the corresponding dimension's value is in the given list. All fields are implicitly ANDed together.
input ServiceQueryStatsFilterIn {
  #Selects rows whose clientName dimension is in the given list. A null value in the list means a row with null for that dimension.
  clientName: [String]
  #Selects rows whose clientReferenceId dimension is in the given list. A null value in the list means a row with null for that dimension.
  clientReferenceId: [ID]
  #Selects rows whose clientVersion dimension is in the given list. A null value in the list means a row with null for that dimension.
  clientVersion: [String]
  #Selects rows whose queryId dimension is in the given list. A null value in the list means a row with null for that dimension.
  queryId: [ID]
  #Selects rows whose queryName dimension is in the given list. A null value in the list means a row with null for that dimension.
  queryName: [String]
  #Selects rows whose querySignature dimension is in the given list. A null value in the list means a row with null for that dimension.
  querySignature: [String]
  #Selects rows whose schemaHash dimension is in the given list. A null value in the list means a row with null for that dimension.
  schemaHash: [String]
  #Selects rows whose schemaTag dimension is in the given list. A null value in the list means a row with null for that dimension.
  schemaTag: [String]
  #Selects rows whose serviceVersion dimension is in the given list. A null value in the list means a row with null for that dimension.
  serviceVersion: [String]
}

input ServiceQueryStatsOrderBySpec {
  column: ServiceQueryStatsColumn!
  direction: Ordering!
}

#Filter for data in ServiceTracePathErrorsRefs. Fields with dimension names represent equality checks. All fields are implicitly ANDed together.
input ServiceTracePathErrorsRefsFilter {
  and: [ServiceTracePathErrorsRefsFilter!]
  #Selects rows whose clientName dimension equals the given value. If the given value is null, this parameter is ignored; to query for rows whose value is null, use {in: {clientName: [null]}}.
  clientName: String
  #Selects rows whose clientReferenceId dimension equals the given value. If the given value is null, this parameter is ignored; to query for rows whose value is null, use {in: {clientReferenceId: [null]}}.
  clientReferenceId: ID
  #Selects rows whose clientVersion dimension equals the given value. If the given value is null, this parameter is ignored; to query for rows whose value is null, use {in: {clientVersion: [null]}}.
  clientVersion: String
  #Selects rows whose durationBucket dimension equals the given value. If the given value is null, this parameter is ignored; to query for rows whose value is null, use {in: {durationBucket: [null]}}.
  durationBucket: Long
  #Selects rows whose errorMessage dimension equals the given value. If the given value is null, this parameter is ignored; to query for rows whose value is null, use {in: {errorMessage: [null]}}.
  errorMessage: String
  #Selects rows whose gcsBucket dimension equals the given value. If the given value is null, this parameter is ignored; to query for rows whose value is null, use {in: {gcsBucket: [null]}}.
  gcsBucket: String
  in: ServiceTracePathErrorsRefsFilterIn
  not: ServiceTracePathErrorsRefsFilter
  or: [ServiceTracePathErrorsRefsFilter!]
  #Selects rows whose path dimension equals the given value. If the given value is null, this parameter is ignored; to query for rows whose value is null, use {in: {path: [null]}}.
  path: String
  #Selects rows whose queryId dimension equals the given value. If the given value is null, this parameter is ignored; to query for rows whose value is null, use {in: {queryId: [null]}}.
  queryId: ID
  #Selects rows whose queryName dimension equals the given value. If the given value is null, this parameter is ignored; to query for rows whose value is null, use {in: {queryName: [null]}}.
  queryName: String
  #Selects rows whose querySignature dimension equals the given value. If the given value is null, this parameter is ignored; to query for rows whose value is null, use {in: {querySignature: [null]}}.
  querySignature: String
  #Selects rows whose schemaHash dimension equals the given value. If the given value is null, this parameter is ignored; to query for rows whose value is null, use {in: {schemaHash: [null]}}.
  schemaHash: String
  #Selects rows whose schemaTag dimension equals the given value. If the given value is null, this parameter is ignored; to query for rows whose value is null, use {in: {schemaTag: [null]}}.
  schemaTag: String
  #Selects rows whose serviceVersion dimension equals the given value. If the given value is null, this parameter is ignored; to query for rows whose value is null, use {in: {serviceVersion: [null]}}.
  serviceVersion: String
  #Selects rows whose traceHttpStatusCode dimension equals the given value. If the given value is null, this parameter is ignored; to query for rows whose value is null, use {in: {traceHttpStatusCode: [null]}}.
  traceHttpStatusCode: Long
  #Selects rows whose traceId dimension equals the given value. If the given value is null, this parameter is ignored; to query for rows whose value is null, use {in: {traceId: [null]}}.
  traceId: ID
}

#Filter for data in ServiceTracePathErrorsRefs. Fields match if the corresponding dimension's value is in the given list. All fields are implicitly ANDed together.
input ServiceTracePathErrorsRefsFilterIn {
  #Selects rows whose clientName dimension is in the given list. A null value in the list means a row with null for that dimension.
  clientName: [String]
  #Selects rows whose clientReferenceId dimension is in the given list. A null value in the list means a row with null for that dimension.
  clientReferenceId: [ID]
  #Selects rows whose clientVersion dimension is in the given list. A null value in the list means a row with null for that dimension.
  clientVersion: [String]
  #Selects rows whose durationBucket dimension is in the given list. A null value in the list means a row with null for that dimension.
  durationBucket: [Long]
  #Selects rows whose errorMessage dimension is in the given list. A null value in the list means a row with null for that dimension.
  errorMessage: [String]
  #Selects rows whose gcsBucket dimension is in the given list. A null value in the list means a row with null for that dimension.
  gcsBucket: [String]
  #Selects rows whose path dimension is in the given list. A null value in the list means a row with null for that dimension.
  path: [String]
  #Selects rows whose queryId dimension is in the given list. A null value in the list means a row with null for that dimension.
  queryId: [ID]
  #Selects rows whose queryName dimension is in the given list. A null value in the list means a row with null for that dimension.
  queryName: [String]
  #Selects rows whose querySignature dimension is in the given list. A null value in the list means a row with null for that dimension.
  querySignature: [String]
  #Selects rows whose schemaHash dimension is in the given list. A null value in the list means a row with null for that dimension.
  schemaHash: [String]
  #Selects rows whose schemaTag dimension is in the given list. A null value in the list means a row with null for that dimension.
  schemaTag: [String]
  #Selects rows whose serviceVersion dimension is in the given list. A null value in the list means a row with null for that dimension.
  serviceVersion: [String]
  #Selects rows whose traceHttpStatusCode dimension is in the given list. A null value in the list means a row with null for that dimension.
  traceHttpStatusCode: [Long]
  #Selects rows whose traceId dimension is in the given list. A null value in the list means a row with null for that dimension.
  traceId: [ID]
}

input ServiceTracePathErrorsRefsOrderBySpec {
  column: ServiceTracePathErrorsRefsColumn!
  direction: Ordering!
}

#Filter for data in ServiceTraceRefs. Fields with dimension names represent equality checks. All fields are implicitly ANDed together.
input ServiceTraceRefsFilter {
  and: [ServiceTraceRefsFilter!]
  #Selects rows whose clientName dimension equals the given value. If the given value is null, this parameter is ignored; to query for rows whose value is null, use {in: {clientName: [null]}}.
  clientName: String
  #Selects rows whose clientReferenceId dimension equals the given value. If the given value is null, this parameter is ignored; to query for rows whose value is null, use {in: {clientReferenceId: [null]}}.
  clientReferenceId: ID
  #Selects rows whose clientVersion dimension equals the given value. If the given value is null, this parameter is ignored; to query for rows whose value is null, use {in: {clientVersion: [null]}}.
  clientVersion: String
  #Selects rows whose durationBucket dimension equals the given value. If the given value is null, this parameter is ignored; to query for rows whose value is null, use {in: {durationBucket: [null]}}.
  durationBucket: Long
  #Selects rows whose gcsBucket dimension equals the given value. If the given value is null, this parameter is ignored; to query for rows whose value is null, use {in: {gcsBucket: [null]}}.
  gcsBucket: String
  in: ServiceTraceRefsFilterIn
  not: ServiceTraceRefsFilter
  or: [ServiceTraceRefsFilter!]
  #Selects rows whose queryId dimension equals the given value. If the given value is null, this parameter is ignored; to query for rows whose value is null, use {in: {queryId: [null]}}.
  queryId: ID
  #Selects rows whose queryName dimension equals the given value. If the given value is null, this parameter is ignored; to query for rows whose value is null, use {in: {queryName: [null]}}.
  queryName: String
  #Selects rows whose querySignature dimension equals the given value. If the given value is null, this parameter is ignored; to query for rows whose value is null, use {in: {querySignature: [null]}}.
  querySignature: String
  #Selects rows whose schemaHash dimension equals the given value. If the given value is null, this parameter is ignored; to query for rows whose value is null, use {in: {schemaHash: [null]}}.
  schemaHash: String
  #Selects rows whose schemaTag dimension equals the given value. If the given value is null, this parameter is ignored; to query for rows whose value is null, use {in: {schemaTag: [null]}}.
  schemaTag: String
  #Selects rows whose serviceVersion dimension equals the given value. If the given value is null, this parameter is ignored; to query for rows whose value is null, use {in: {serviceVersion: [null]}}.
  serviceVersion: String
  #Selects rows whose traceId dimension equals the given value. If the given value is null, this parameter is ignored; to query for rows whose value is null, use {in: {traceId: [null]}}.
  traceId: ID
}

#Filter for data in ServiceTraceRefs. Fields match if the corresponding dimension's value is in the given list. All fields are implicitly ANDed together.
input ServiceTraceRefsFilterIn {
  #Selects rows whose clientName dimension is in the given list. A null value in the list means a row with null for that dimension.
  clientName: [String]
  #Selects rows whose clientReferenceId dimension is in the given list. A null value in the list means a row with null for that dimension.
  clientReferenceId: [ID]
  #Selects rows whose clientVersion dimension is in the given list. A null value in the list means a row with null for that dimension.
  clientVersion: [String]
  #Selects rows whose durationBucket dimension is in the given list. A null value in the list means a row with null for that dimension.
  durationBucket: [Long]
  #Selects rows whose gcsBucket dimension is in the given list. A null value in the list means a row with null for that dimension.
  gcsBucket: [String]
  #Selects rows whose queryId dimension is in the given list. A null value in the list means a row with null for that dimension.
  queryId: [ID]
  #Selects rows whose queryName dimension is in the given list. A null value in the list means a row with null for that dimension.
  queryName: [String]
  #Selects rows whose querySignature dimension is in the given list. A null value in the list means a row with null for that dimension.
  querySignature: [String]
  #Selects rows whose schemaHash dimension is in the given list. A null value in the list means a row with null for that dimension.
  schemaHash: [String]
  #Selects rows whose schemaTag dimension is in the given list. A null value in the list means a row with null for that dimension.
  schemaTag: [String]
  #Selects rows whose serviceVersion dimension is in the given list. A null value in the list means a row with null for that dimension.
  serviceVersion: [String]
  #Selects rows whose traceId dimension is in the given list. A null value in the list means a row with null for that dimension.
  traceId: [ID]
}

input ServiceTraceRefsOrderBySpec {
  column: ServiceTraceRefsColumn!
  direction: Ordering!
}

#Slack notification channel parameters
input SlackChannelInput {
  name: String
  url: String!
}

input SlackNotificationField {
  key: String!
  value: String!
}

#Slack notification message
input SlackNotificationInput {
  color: String
  fallback: String!
  fields: [SlackNotificationField!]
  iconUrl: String
  text: String
  timestamp: Timestamp
  title: String
  titleLink: String
  username: String
}

input StringToStringInput {
  key: String!
  value: String!
}

#Filter for data in TracePathErrorsRefs. Fields with dimension names represent equality checks. All fields are implicitly ANDed together.
input TracePathErrorsRefsFilter {
  and: [TracePathErrorsRefsFilter!]
  #Selects rows whose clientName dimension equals the given value. If the given value is null, this parameter is ignored; to query for rows whose value is null, use {in: {clientName: [null]}}.
  clientName: String
  #Selects rows whose clientReferenceId dimension equals the given value. If the given value is null, this parameter is ignored; to query for rows whose value is null, use {in: {clientReferenceId: [null]}}.
  clientReferenceId: ID
  #Selects rows whose clientVersion dimension equals the given value. If the given value is null, this parameter is ignored; to query for rows whose value is null, use {in: {clientVersion: [null]}}.
  clientVersion: String
  #Selects rows whose durationBucket dimension equals the given value. If the given value is null, this parameter is ignored; to query for rows whose value is null, use {in: {durationBucket: [null]}}.
  durationBucket: Long
  #Selects rows whose errorMessage dimension equals the given value. If the given value is null, this parameter is ignored; to query for rows whose value is null, use {in: {errorMessage: [null]}}.
  errorMessage: String
  #Selects rows whose gcsBucket dimension equals the given value. If the given value is null, this parameter is ignored; to query for rows whose value is null, use {in: {gcsBucket: [null]}}.
  gcsBucket: String
  in: TracePathErrorsRefsFilterIn
  not: TracePathErrorsRefsFilter
  or: [TracePathErrorsRefsFilter!]
  #Selects rows whose path dimension equals the given value. If the given value is null, this parameter is ignored; to query for rows whose value is null, use {in: {path: [null]}}.
  path: String
  #Selects rows whose queryId dimension equals the given value. If the given value is null, this parameter is ignored; to query for rows whose value is null, use {in: {queryId: [null]}}.
  queryId: ID
  #Selects rows whose queryName dimension equals the given value. If the given value is null, this parameter is ignored; to query for rows whose value is null, use {in: {queryName: [null]}}.
  queryName: String
  #Selects rows whose querySignature dimension equals the given value. If the given value is null, this parameter is ignored; to query for rows whose value is null, use {in: {querySignature: [null]}}.
  querySignature: String
  #Selects rows whose schemaHash dimension equals the given value. If the given value is null, this parameter is ignored; to query for rows whose value is null, use {in: {schemaHash: [null]}}.
  schemaHash: String
  #Selects rows whose schemaTag dimension equals the given value. If the given value is null, this parameter is ignored; to query for rows whose value is null, use {in: {schemaTag: [null]}}.
  schemaTag: String
  #Selects rows whose serviceId dimension equals the given value. If the given value is null, this parameter is ignored; to query for rows whose value is null, use {in: {serviceId: [null]}}.
  serviceId: ID
  #Selects rows whose serviceVersion dimension equals the given value. If the given value is null, this parameter is ignored; to query for rows whose value is null, use {in: {serviceVersion: [null]}}.
  serviceVersion: String
  #Selects rows whose traceHttpStatusCode dimension equals the given value. If the given value is null, this parameter is ignored; to query for rows whose value is null, use {in: {traceHttpStatusCode: [null]}}.
  traceHttpStatusCode: Long
  #Selects rows whose traceId dimension equals the given value. If the given value is null, this parameter is ignored; to query for rows whose value is null, use {in: {traceId: [null]}}.
  traceId: ID
}

#Filter for data in TracePathErrorsRefs. Fields match if the corresponding dimension's value is in the given list. All fields are implicitly ANDed together.
input TracePathErrorsRefsFilterIn {
  #Selects rows whose clientName dimension is in the given list. A null value in the list means a row with null for that dimension.
  clientName: [String]
  #Selects rows whose clientReferenceId dimension is in the given list. A null value in the list means a row with null for that dimension.
  clientReferenceId: [ID]
  #Selects rows whose clientVersion dimension is in the given list. A null value in the list means a row with null for that dimension.
  clientVersion: [String]
  #Selects rows whose durationBucket dimension is in the given list. A null value in the list means a row with null for that dimension.
  durationBucket: [Long]
  #Selects rows whose errorMessage dimension is in the given list. A null value in the list means a row with null for that dimension.
  errorMessage: [String]
  #Selects rows whose gcsBucket dimension is in the given list. A null value in the list means a row with null for that dimension.
  gcsBucket: [String]
  #Selects rows whose path dimension is in the given list. A null value in the list means a row with null for that dimension.
  path: [String]
  #Selects rows whose queryId dimension is in the given list. A null value in the list means a row with null for that dimension.
  queryId: [ID]
  #Selects rows whose queryName dimension is in the given list. A null value in the list means a row with null for that dimension.
  queryName: [String]
  #Selects rows whose querySignature dimension is in the given list. A null value in the list means a row with null for that dimension.
  querySignature: [String]
  #Selects rows whose schemaHash dimension is in the given list. A null value in the list means a row with null for that dimension.
  schemaHash: [String]
  #Selects rows whose schemaTag dimension is in the given list. A null value in the list means a row with null for that dimension.
  schemaTag: [String]
  #Selects rows whose serviceId dimension is in the given list. A null value in the list means a row with null for that dimension.
  serviceId: [ID]
  #Selects rows whose serviceVersion dimension is in the given list. A null value in the list means a row with null for that dimension.
  serviceVersion: [String]
  #Selects rows whose traceHttpStatusCode dimension is in the given list. A null value in the list means a row with null for that dimension.
  traceHttpStatusCode: [Long]
  #Selects rows whose traceId dimension is in the given list. A null value in the list means a row with null for that dimension.
  traceId: [ID]
}

input TracePathErrorsRefsOrderBySpec {
  column: TracePathErrorsRefsColumn!
  direction: Ordering!
}

#Filter for data in TraceRefs. Fields with dimension names represent equality checks. All fields are implicitly ANDed together.
input TraceRefsFilter {
  and: [TraceRefsFilter!]
  #Selects rows whose clientName dimension equals the given value. If the given value is null, this parameter is ignored; to query for rows whose value is null, use {in: {clientName: [null]}}.
  clientName: String
  #Selects rows whose clientReferenceId dimension equals the given value. If the given value is null, this parameter is ignored; to query for rows whose value is null, use {in: {clientReferenceId: [null]}}.
  clientReferenceId: ID
  #Selects rows whose clientVersion dimension equals the given value. If the given value is null, this parameter is ignored; to query for rows whose value is null, use {in: {clientVersion: [null]}}.
  clientVersion: String
  #Selects rows whose durationBucket dimension equals the given value. If the given value is null, this parameter is ignored; to query for rows whose value is null, use {in: {durationBucket: [null]}}.
  durationBucket: Long
  #Selects rows whose gcsBucket dimension equals the given value. If the given value is null, this parameter is ignored; to query for rows whose value is null, use {in: {gcsBucket: [null]}}.
  gcsBucket: String
  in: TraceRefsFilterIn
  not: TraceRefsFilter
  or: [TraceRefsFilter!]
  #Selects rows whose queryId dimension equals the given value. If the given value is null, this parameter is ignored; to query for rows whose value is null, use {in: {queryId: [null]}}.
  queryId: ID
  #Selects rows whose queryName dimension equals the given value. If the given value is null, this parameter is ignored; to query for rows whose value is null, use {in: {queryName: [null]}}.
  queryName: String
  #Selects rows whose querySignature dimension equals the given value. If the given value is null, this parameter is ignored; to query for rows whose value is null, use {in: {querySignature: [null]}}.
  querySignature: String
  #Selects rows whose schemaHash dimension equals the given value. If the given value is null, this parameter is ignored; to query for rows whose value is null, use {in: {schemaHash: [null]}}.
  schemaHash: String
  #Selects rows whose schemaTag dimension equals the given value. If the given value is null, this parameter is ignored; to query for rows whose value is null, use {in: {schemaTag: [null]}}.
  schemaTag: String
  #Selects rows whose serviceId dimension equals the given value. If the given value is null, this parameter is ignored; to query for rows whose value is null, use {in: {serviceId: [null]}}.
  serviceId: ID
  #Selects rows whose serviceVersion dimension equals the given value. If the given value is null, this parameter is ignored; to query for rows whose value is null, use {in: {serviceVersion: [null]}}.
  serviceVersion: String
  #Selects rows whose traceId dimension equals the given value. If the given value is null, this parameter is ignored; to query for rows whose value is null, use {in: {traceId: [null]}}.
  traceId: ID
}

#Filter for data in TraceRefs. Fields match if the corresponding dimension's value is in the given list. All fields are implicitly ANDed together.
input TraceRefsFilterIn {
  #Selects rows whose clientName dimension is in the given list. A null value in the list means a row with null for that dimension.
  clientName: [String]
  #Selects rows whose clientReferenceId dimension is in the given list. A null value in the list means a row with null for that dimension.
  clientReferenceId: [ID]
  #Selects rows whose clientVersion dimension is in the given list. A null value in the list means a row with null for that dimension.
  clientVersion: [String]
  #Selects rows whose durationBucket dimension is in the given list. A null value in the list means a row with null for that dimension.
  durationBucket: [Long]
  #Selects rows whose gcsBucket dimension is in the given list. A null value in the list means a row with null for that dimension.
  gcsBucket: [String]
  #Selects rows whose queryId dimension is in the given list. A null value in the list means a row with null for that dimension.
  queryId: [ID]
  #Selects rows whose queryName dimension is in the given list. A null value in the list means a row with null for that dimension.
  queryName: [String]
  #Selects rows whose querySignature dimension is in the given list. A null value in the list means a row with null for that dimension.
  querySignature: [String]
  #Selects rows whose schemaHash dimension is in the given list. A null value in the list means a row with null for that dimension.
  schemaHash: [String]
  #Selects rows whose schemaTag dimension is in the given list. A null value in the list means a row with null for that dimension.
  schemaTag: [String]
  #Selects rows whose serviceId dimension is in the given list. A null value in the list means a row with null for that dimension.
  serviceId: [ID]
  #Selects rows whose serviceVersion dimension is in the given list. A null value in the list means a row with null for that dimension.
  serviceVersion: [String]
  #Selects rows whose traceId dimension is in the given list. A null value in the list means a row with null for that dimension.
  traceId: [ID]
}

input TraceRefsOrderBySpec {
  column: TraceRefsColumn!
  direction: Ordering!
}
