"An Enum containing the full set of possible values for the Acceptable Trackers directive."
enum AcceptableTrackersDirectiveValue {
  CONTROLLERS
  PROCESSORS
  ESSENTIALS
  CHILDSAFE
}
"One of the three standard privacy directives. This directive describes the type of tracking that is allowed."
type AcceptableTrackersPrivacyDirective {
  "The value of this Acceptable Trackers directive."
  value: AcceptableTrackersDirectiveValue
}
"An Enum containing the full set of possible values for the Ad Configuration directive."
enum AdConfigurationDirectiveValue {
  FULL
  NPA
  ADLUCE
  ADLUCE_SOCRATES
  COLLAPSED
}
"One of the three standard privacy directives. This directive describes the kind of advertising configuration to use\nin the compliant applicatication."
type AdConfigurationPrivacyDirective {
  "The value of this Ad Configuration directive."
  value: AdConfigurationDirectiveValue
}
type AdTargetingParam {
  key: String!
  value: String!
}
type AddByline {
  original: String
}
type AddCrop {
  name: String
  renditions: [AddCropRendition]
}
type AddCropRendition {
  name: String
  url: String
  height: Int
  width: Int
}
type AddMedia {
  crops: [AddCrop]
}
type AddNode {
  url: String!
  headline: String
  summary: String
  section: AddSection
  subsection: AddSection
  byline: AddByline
  media: AddMedia
  firstPublished: DateTime
  lastModified: DateTime
  lastMajorModification: DateTime
}
type AddResult {
  node: AddNode
}
type AddSection {
  content: String
  name: String
  url: String
}
enum AddendumType {
  CORRECTION
  EDITORS_NOTE
  POSTSCRIPT
}
type Advert_Beta {
  path: String
  position: String
}
type AggregatedList {
  updated: String
  updated_ts: Int
  assets(first: Int, last: Int, before: String, after: String): AssetsConnection
}
enum Align {
  DEFAULT
  LEFT
  CENTER
  RIGHT
}
"Union over all fetchable program blocks."
union AnyProgramBlock_Beta =
    Block_Beta
  | MultiListBlock_Beta
  | PersonalizedBlock_Beta
"A union of CreativeWork and ExternalWork types. Use this for any generic query\nthat could potentially return an external asset"
union AnyWork =
    ExternalWork
  | Article
  | Audio
  | Capsule
  | CityGuide
  | EmbeddedInteractive
  | HelixNewsletter
  | Image
  | Interactive
  | LegacyCollection
  | Page
  | PaidPost
  | ParentingArticle
  | Playlist
  | Slideshow
  | Video
  | Guide
  | Podcast
  | Person
  | Recipe
  | WatchingRecommendation
type Article implements Published & CreativeWork & HasPromotionalProperties & Linkable & Node & HasHybridProperties {
  wordCount: Int!
  translations: [ArticleTranslation]!
  printInformation: PrintInformation
  legacy: ArticleLegacyData
  extendedAuthorOrArticleInformation: String!
    @deprecated(
      reason: "This field has been moved to ArticleLegacyData as 'htmlExtendedAuthorOrArticleInformation'"
    )
  dateline: ArticleDateline
  body: DocumentBlock
  authorDetails: TextOnlyDocumentBlock
  eventInformation: TextOnlyDocumentBlock
  contributors: TextOnlyDocumentBlock
  relatedDetails: TextOnlyDocumentBlock
  archiveProperties: ArticleArchiveProperties
  reviewSummary: String!
  "A list of promotional variants representing the multiple promotional\nproperties associated with the Article."
  promotions: [PromotionalVariant!]!
  "A list of related items being reviewed. \n Any returned types that do not match an expected GQL type on this field will be filtered out,\n with null being returned instead.\n                     The results are limited to the first 20 elements returned."
  reviewItems: [ArticleReviewItem]!
  "The associated episode properties for this article"
  episodeProperties: ArticleEpisodeProperties
  headline: CreativeWorkHeadline
  "Derived field determined by ad-tech rules based on the asset's section and\nsubsection"
  dfpTaxonomyException: String
  sourceApplication: String!
  standout: Boolean!
  source: Organization
  commentStatus: CommentStatus!
    @deprecated(reason: "Use commentProperties.status instead")
  personalizationProperties: PersonalizationProperties
  "An alternate summary in the form of a bulleted list, tailored for the\nhomepage."
  promotionalBullets: [String!]!
  newsStatus: NewsStatusType!
  firstPublished: DateTime
  url: String!
  typeOfMaterials: [String!]!
  addendums: [CreativeWorkAddendum]!
  lastModified: DateTime
  "Derived field defining ad parameters to send along with DFP request"
  adTargetingParams(clientAdParams: ClientAdParams!): [AdTargetingParam]
  sourcePublisher: String!
  uri: String!
  "An array of LegacyCollections associated with a particular work.\n\nCan be filtered by either name, type, or both. Name filtering allows for partial prefix\nmatching (i.e. an input of 'match-box-' will return both 'match-box-20' and 'match-box-30') \n Any returned types that do not match an expected GQL type on this field will be filtered out,\n with null being returned instead.\n                    "
  collections(name: String, type: CollectionType): [LegacyCollection]!
  "Person/Organizations with specific roles in creating the asset.\n\nUnlike 'bylines', this field represents the most current data available (i.e.\nNOT a snapshot)"
  credits: [Credit]!
  "An additional piece of metadata for cards that the news desk uses to capture\nsentence renditions."
  oneLine: String!
  kicker: String!
  "A summary specially tailored for the homepage."
  promotionalSummary: String!
  slug: String!
  desk: String!
  section: Section
  "The unique identifier of the event."
  eventId: String
  shortUrl: String!
  "A banner displayed across the top an individual article/video/interactive or\npackage to allow the news desk to give extra emphasis to high-priority\ncoverage."
  banner: String!
  "A headline specially tailored for the homepage."
  promotionalHeadline: String!
  firstReportedAtURL: String!
  originalDesk: String!
  id: ID!
  commentProperties: CreativeWorkCommentProperties!
  "A list of related creative works.  \n Any returned types that do not match an expected GQL type on this field will be filtered out,\n with null being returned instead.\n                     The results are limited to the first 20 elements returned."
  related: [HasPromotionalProperties]!
  language: Language
  "The multimedia that should be used to promote the story."
  promotionalMedia: PromotionalPropertiesMedia
  hybridBody: HybridDocumentBlock
  "MediaEmphasis can be influenced by cardType depending on the page layout.\n\nThis is business logic currently applied only by Samizdat, but could live on the Pipeline in the future.\n\nIf layout is not provided, the value is the mediaEmphasis from\npromotionalProperties.mediaEmphasis.\n\nIf layout is provided, and the layout value is\n  SMALL: Always force a MediaEmphasis of 'NONE' for TEXT cardTypes or\n         'MAXIMUM' for all others.\n  Anything else: Return the promotionalProperties.mediaEmphasis value"
  promotionalMediaEmphasis(layout: ProgramLayoutSize): MediaEmphasis!
  "Derived field determined to be the first collection in the collections list\nof type Column"
  column: LegacyCollection
  tone: Tone!
  followChannels: [ChannelMetadata]
  type: String!
  "An excerpt specially tailored for the homepage."
  promotionalExcerpt: String!
  displayProperties: CreativeWorkDisplayProperties
  card: CardUnion
  timesTags: [TimesTag]!
  cardType: CardType!
  subsection: Section
  advertisingProperties: CreativeWorkAdvertisingProperties
  "A snapshot of creator data at the time this CreativeWork is last published.\n\nSince it is a snapshot, it will NOT reflect any changes to the underlying\ndata after the CreativeWork is published."
  bylines: [Byline]!
  summary: String!
  sourceId: String!
  previouslyPublishedUrls: [String!]!
  "The full TZ name from the tzdata database, e.g. 'America/New_York', as set by\nthe editor in Scoop, for the timezone most relevant for the content"
  contentTimezoneName: String
  lastMajorModification: DateTime
  "Timezone offset string based on the publicationProperties.firstPublished and\ncreativeWork.contentTimezoneName fields formatted as: '+00:00, -00:00'."
  firstPublishedTimezoneOffset: String
  sprinkledBody: DocumentBlock @deprecated(reason: "Use sprinkled instead.")
  sprinkled: SprinkledContent
  compatibility: CompatibilityFeatures
  compatibilityFeatures: CompatibilityFeatures
    @deprecated(
      reason: "Use compatibility instead.  This field was only added to support alias issues with Relay Classic."
    )
  "This field or object is personalized by optional user cookies - including any anonymous user cookies."
  newsletterSuggestion: Newsletter
  "Arbitrary assets associated with an Article via pharmacy.nyt.net."
  associatedArticleAssets: [AssociatedArticleAssetBlock]
}
"Contains archival metadata for content produced 1851-2006"
type ArticleArchiveProperties {
  "The URL to the TimesMachine version of the article if available."
  timesMachineUrl: String!
  "Thumbnails of the page scan for the article if available."
  thumbnails: [ArticleArchivePropertiesThumbnail]!
  "File source information."
  sources: [ArticleArchivePropertiesSourceFile]!
  "The original slug for the article (Atex info)."
  slug: String!
  "The SGML id of the article if available"
  sgmlId: String!
  "Section appeared in the URL, NYTD section."
  section: String!
  "The reskeys fo rthe archived content"
  reskeys: ArticleArchivePropertiesReskeys
  "Additional Proquest metadata if the article is sourced from Proquest."
  proquest: ArticleArchivePropertiesProquestProperties
  "Print information for the archive article."
  printInformation: ArticleArchivePropertiesPrintInformation
  "The URL to the PDF version of the article if available."
  pdfUrl: String!
  "The first paragraph of the body if available."
  lede: String!
  "The original desk"
  desk: String!
  "Original dateline info"
  dateline: String!
  "Authorship metadata used to extend author info"
  contributor: String!
  "Authorship metadata used to generated byline data"
  author: String!
  "summary of the article"
  abstract: String!
}
"Metadata related to original print publication"
type ArticleArchivePropertiesPrintInformation {
  "section of the paper the article appeared in (e.g. 'A')"
  section: String!
  "Caption and/or credit info for photos, graphics, and illustrations"
  imageText: [String!]!
  "Column of the paper the article appeared in (e.g. '1')"
  column: String!
}
"Metadata for archive articles that were sourced from Proquest data"
type ArticleArchivePropertiesProquestProperties {
  "The confidence on a 100 point scale that the proquest data was correctly\nmatched by the algorithmic merging process."
  merit: Int!
  "the type of match to proquest metadata"
  matchType: String!
  "The file from which indexing metadata was acquired"
  file: String!
}
"Legacy keys to access content via query.nytimes.com and select.nytimes.com\n\nSee https://docs.google.com/document/d/1UpSPQVa1DhbRp2OteJCwXHb1iMqTXxmugXAplf5z5lI/edit?usp=sharing"
type ArticleArchivePropertiesReskeys {
  "Key accessible only to paying customers"
  paid: String!
  "Key used to provide access to content outside our paywall"
  free: String!
}
"Input source file"
type ArticleArchivePropertiesSourceFile {
  "The location of the input file that sourced this data"
  location: String!
  "the archive format that sourced this data"
  format: String!
}
"Metadata for thumbnails of the page scan for the archive article"
type ArticleArchivePropertiesThumbnail {
  width: Int!
  url: String!
  height: Int!
}
enum ArticleAssetRegion {
  TOP_BANNER
  BELOW_MAIN_CONTENT
  MID_MAIN_CONTENT
}
type ArticleDateline {
  renderedDateline: String!
  location: Location
}
"Metadata for articles that represents an episode of a series.\nE.g.: The Weekly TV series episode, ..."
type ArticleEpisodeProperties {
  "Episode label. E.g.: Episode 1, Preview, ..."
  episodeLabel: String!
  "Call-to-action for links. E.g.: Watch it on the below platforms"
  linksLeadIn: String!
  "The associated links for this episode"
  links: [ArticleEpisodePropertiesLink!]!
}
"External link where the episode can be watched."
type ArticleEpisodePropertiesLink {
  "Name of the platform the link points to. E.g.: Hulu, FX, ..."
  platformName: String!
  "Image for platform logo"
  image: Image
  "Actual link (URL) for external platform"
  linkUrl: String!
  "Call-to-action for link. E.g.: Watch it on FX, Stream it on Hulu, ..."
  callToAction: String!
}
type ArticleLegacyData {
  oakConversionErrors: [String!]!
  htmlBody: String!
  headers: [CreativeWork]!
  htmlExtendedAuthorOrArticleInformation: String!
  htmlInfoBox: String!
  nitfSequenceNumber: String!
  "legacy html data for older review extended content"
  reviewInformation: String!
}
type ArticleReviewItem {
  overrideLabel: String!
  isCriticsPick: Boolean!
  subject: ReviewSubject
  subjectAuthor: String!
}
type ArticleTranslation {
  "Derived field representing either translation.url if present or url"
  url: String!
  translation: Article
  translatedLinkText: String!
  linkText: String!
  language: Language
}
"Module representing an Advanced Card"
type AskAdvancedCardModule_Beta implements AskModuleInterface_Beta {
  "Module meta data indicating which subtype of advanced card should be rendered"
  cardType: String
  "Caption of the media asset"
  assetCaption: String
  "Credit of the media asset"
  assetCredit: String
  "Media asset of the module"
  asset: AskAsset_Beta
  "Kicker of the advanced card"
  kicker: String
  "Headline of the advanced card"
  headline: String
  "Sub headline of the advanced card"
  subHeadline: String
  "Copy of the advanced card"
  bodyText: String
  "URL the advanced card should link to"
  url: String
  "Text of the URL"
  urlText: String
  "Title of a second optional link the advanced card can link to"
  relatedTitle: String
  "A second optional URL the advanced card can link to"
  relatedUrl: String
  "Module meta data indicating which render display should be used"
  displayTemplate: String
  "Name of the module"
  name: String
  "String of CSS classes"
  classes: String
  "Unique identifier pointing to the prompt asset the module is associated with"
  promptId: String
  "Unique identifier of the module"
  identifier: String!
  "Unique slug of the asset"
  slug: AskSlug_Beta
  "Array of child modules"
  childrenModules: [String]
  "Array of unique identifier pointing to tags the asset is associated with"
  tagIds: [String]
}
"Union representing the modules that can make up the body of an answer\ndocument"
union AskAnswerDocumentContent_Beta =
    AskAnswerModule_Beta
  | AskRelatedGroupModule_Beta
  | AskGroupModule_Beta
  | AskTextGroupModule_Beta
  | AskCardGroupModule_Beta
  | AskMediaModule_Beta
  | AskAdvancedCardModule_Beta
  | AskTextModule_Beta
"Represents an Answer asset containing data to render an Ask Answer page"
type AskAnswerDocument_Beta implements AskDocument_Beta {
  "Contains the Hub data the Answer asset is associated with"
  hub: AskHubModule_Beta
  "Contains the Prompt data the Answer asset is associated with"
  prompt: AskPromptModule_Beta
  "Array of modules representing the content of the Answer asset"
  body: [AskAnswerDocumentContent_Beta]!
  "The slug name for the asset"
  nodeSlug: AskSlug_Beta
  identifier: String!
  "The list of tags for this asset"
  tags: [AskTag_Beta]
  "The desk for the asset"
  deskSlug: AskSlug_Beta
  "The list of contributing editors for this asset"
  editors: [AskEditor_Beta]
}
"Represents data to render an answer to a prompt"
type AskAnswerModule_Beta implements AskModuleInterface_Beta {
  "Custom CSS ID"
  customId: String
  "Question displayed to the user that is being answered"
  question: String
  "User meta data for answer: display name as received from community api"
  userDisplayName: String
  "User meta data for answer: display location as received from community api"
  userLocation: String
  "The takeway / short form of the answer expressed as an html string"
  takeaway: String
  "The original question that is being answered, not displayed to the user"
  originalQuestion: String
  "Unique identifier pointing to the hub the answer asset is associated with"
  hubId: String
  "Identifier pointing to the original comment as received via the community api"
  commentId: String
  "Unique identifier pointing to the author / editor responsible for authoring the answer asset"
  editorId: String
  "Whether or not the answer should be hidden on the frontend"
  isHidden: Boolean!
  "Creation date of the answer"
  createdDate: DateTime
  "Last modified date of the answer"
  lastModified: DateTime
  "Name of the module"
  name: String
  "String of CSS classes"
  classes: String
  "Unique identifier pointing to the prompt asset the module is associated with"
  promptId: String
  "Unique identifier of the module"
  identifier: String!
  "Unique slug of the asset"
  slug: AskSlug_Beta
  "Array of child modules"
  childrenModules: [String]
  "Array of unique identifier pointing to tags the asset is associated with"
  tagIds: [String]
}
"Media object for Hub Modules that render asset(s)"
union AskAsset_Beta = Image | Video
"Module implementing a generic div container grouping card and advanced card\nmodules"
type AskCardGroupModule_Beta implements AskModuleInterface_Beta {
  "Module meta data indicating if title should be hidden"
  hideTitle: Boolean
  "Name of the module"
  name: String
  "String of CSS classes"
  classes: String
  "Unique identifier pointing to the prompt asset the module is associated with"
  promptId: String
  "Unique identifier of the module"
  identifier: String!
  "Unique slug of the asset"
  slug: AskSlug_Beta
  "Array of child modules"
  childrenModules: [String]
  "Array of unique identifier pointing to tags the asset is associated with"
  tagIds: [String]
}
"Represents a Hub or Answer asset containing data to render an Ask page."
interface AskDocument_Beta {
  identifier: String!
  "The desk for the asset"
  deskSlug: AskSlug_Beta
  "The slug name for the asset"
  nodeSlug: AskSlug_Beta
  "The list of contributing editors for this asset"
  editors: [AskEditor_Beta]
  "The list of tags for this asset"
  tags: [AskTag_Beta]
}
"Represents the author or editor information"
type AskEditor_Beta {
  "Unique identifier of the module"
  identifier: String!
  "Name of the editor / author"
  name: String
  "Media asset of the editor / author"
  asset: AskAsset_Beta
  "String containing html copy to render, the biographic information of the editor / author"
  bio: String
}
"Module implementing a generic div container grouping child modules"
type AskGroupModule_Beta implements AskModuleInterface_Beta {
  "Name of the module"
  name: String
  "String of CSS classes"
  classes: String
  "Unique identifier pointing to the prompt asset the module is associated with"
  promptId: String
  "Unique identifier of the module"
  identifier: String!
  "Unique slug of the asset"
  slug: AskSlug_Beta
  "Array of child modules"
  childrenModules: [String]
  "Array of unique identifier pointing to tags the asset is associated with"
  tagIds: [String]
}
"Union representing the modules that can make up the body of a hub document."
union AskHubDocumentContent_Beta =
    AskHubModule_Beta
  | AskPromptModule_Beta
  | AskRelatedGroupModule_Beta
  | AskPromptGroupModule_Beta
  | AskGroupModule_Beta
  | AskTextGroupModule_Beta
  | AskCardGroupModule_Beta
  | AskMediaModule_Beta
  | AskAdvancedCardModule_Beta
  | AskTextModule_Beta
"Represents an Hub asset containing data to render an Ask Hub page"
type AskHubDocument_Beta implements AskDocument_Beta {
  "Array of modules representing the content of the Hub asset"
  body: [AskHubDocumentContent_Beta]!
  "The slug name for the asset"
  nodeSlug: AskSlug_Beta
  identifier: String!
  "The list of tags for this asset"
  tags: [AskTag_Beta]
  "The desk for the asset"
  deskSlug: AskSlug_Beta
  "The list of contributing editors for this asset"
  editors: [AskEditor_Beta]
}
"Represents a Hub module"
type AskHubModule_Beta implements AskModuleInterface_Beta {
  "DEPRECATED: The closed state copy of a Hub module expressed as an html string"
  intro: String @deprecated(reason: "Use closedStateHeadline instead")
  "Array of unique identifiers pointing to prompt assets associated with the hub"
  promptIds: [String]
  "Custom CSS ID"
  customId: String
  "The closed state copy of a Hub module expressed as an html string"
  closedStateHeadline: String
  "The tab callout copy displayed in the navigation"
  tabCallout: String
  "Whether or not the hub will appear embedded within another asset"
  isEmbedded: Boolean! @deprecated(reason: "Use redirectUrl instead")
  "A url the hub and its associated answer pages should redirect to instead of rendering to the client"
  redirectUrl: String
  "Name of the module"
  name: String
  "String of CSS classes"
  classes: String
  "Unique identifier pointing to the prompt asset the module is associated with"
  promptId: String
  "Unique identifier of the module"
  identifier: String!
  "Unique slug of the asset"
  slug: AskSlug_Beta
  "Array of child modules"
  childrenModules: [String]
  "Array of unique identifier pointing to tags the asset is associated with"
  tagIds: [String]
}
"Represents a media module"
type AskMediaModule_Beta implements AskModuleInterface_Beta {
  "Module meta data indicating if title should be hidden"
  hideTitle: Boolean
  "Module meta data indicating which layout the media asset should be rendered with"
  layout: String
  "Caption of the media asset"
  assetCaption: String
  "Credit of the media asset"
  assetCredit: String
  "Media asset of the module"
  asset: AskAsset_Beta
  "Module meta data indicating if video controls for video assets should be rendered"
  videoControls: Boolean
  "Module meta data indicating if sounds for video assets should be muted"
  muteSound: Boolean
  "String containing html copy to render"
  htmlBody: String
  "Name of the module"
  name: String
  "String of CSS classes"
  classes: String
  "Unique identifier pointing to the prompt asset the module is associated with"
  promptId: String
  "Unique identifier of the module"
  identifier: String!
  "Unique slug of the asset"
  slug: AskSlug_Beta
  "Array of child modules"
  childrenModules: [String]
  "Array of unique identifier pointing to tags the asset is associated with"
  tagIds: [String]
}
"An interface for Hub Module properties other metadata"
interface AskModuleInterface_Beta {
  "Unique identifier of the module"
  identifier: String!
  "Unique identifier pointing to the prompt asset the module is associated with"
  promptId: String
  "Name of the module"
  name: String
  "Array of child modules"
  childrenModules: [String]
  "Array of unique identifier pointing to tags the asset is associated with"
  tagIds: [String]
  "Unique slug of the asset"
  slug: AskSlug_Beta
  "String of CSS classes"
  classes: String
}
"Module implementing a generic div container grouping child prompt modules"
type AskPromptGroupModule_Beta implements AskModuleInterface_Beta {
  "Name of the module"
  name: String
  "String of CSS classes"
  classes: String
  "Unique identifier pointing to the prompt asset the module is associated with"
  promptId: String
  "Unique identifier of the module"
  identifier: String!
  "Unique slug of the asset"
  slug: AskSlug_Beta
  "Array of child modules"
  childrenModules: [String]
  "Array of unique identifier pointing to tags the asset is associated with"
  tagIds: [String]
}
"Represents data to render a question prompt to users."
type AskPromptModule_Beta implements AskModuleInterface_Beta {
  "Unique identifier pointing to the editor / author asset associated with the prompt"
  editorId: String
  "Module meta data indicating which scoop crop for the image asset should be used"
  assetCrop: String
  "Credit of the media asset"
  assetCredit: String
  "Media asset of the module"
  asset: AskAsset_Beta
  "Module meta data indicating which background color for the assets hero section should be used in hex code"
  backgroundColor: String
  "Module meta data indicating which color for the assets primary text should be used in hex code"
  textColor1: String @deprecated(reason: "Use promptTextColor instead")
  "Module meta data indicating which color for the assets secondary text should be used in hex code"
  textColor2: String @deprecated(reason: "Use buttonBandColor instead")
  "Hex value for prompt introduction and closed state text in hero"
  promptTextColor: String
  "Hex value for the button and band background color"
  buttonBandColor: String
  "Hex value for the button and band text color"
  buttonBandTextColor: String
  "Hex value for link text color"
  linkColor: String
  "Hex value for highlighted takeaway background color"
  hightlightColor: String
  "Custom CSS ID"
  customId: String
  "Start time of question period"
  liveDateFrom: DateTime
  "End time of question period"
  liveDateTo: DateTime
  "The main body of the question expressed as text."
  prompt: String
  "The message shown to users after submitting a question"
  promptConfirm: String
  "Indicates which audience group should be allowed to submit questions (subscribers only or regis)"
  promptAudience: String
  "Unique identifier pointing to the hub asset the prompt is associated with"
  hubId: String
  "Array of answer documents associated with the prompt module"
  answers: [AskAnswerDocument_Beta]!
  "The open state copy of a prompt expressed as an html string"
  openStateIntro: String
  "Name of the module"
  name: String
  "String of CSS classes"
  classes: String
  "Unique identifier pointing to the prompt asset the module is associated with"
  promptId: String
  "Unique identifier of the module"
  identifier: String!
  "Unique slug of the asset"
  slug: AskSlug_Beta
  "Array of child modules"
  childrenModules: [String]
  "Array of unique identifier pointing to tags the asset is associated with"
  tagIds: [String]
}
"Module implementing a generic div container grouping child modules\nrepresenting related content"
type AskRelatedGroupModule_Beta implements AskModuleInterface_Beta {
  "Name of the module"
  name: String
  "String of CSS classes"
  classes: String
  "Unique identifier pointing to the prompt asset the module is associated with"
  promptId: String
  "Unique identifier of the module"
  identifier: String!
  "Unique slug of the asset"
  slug: AskSlug_Beta
  "Array of child modules"
  childrenModules: [String]
  "Array of unique identifier pointing to tags the asset is associated with"
  tagIds: [String]
}
"Represents a unique slug of an asset"
type AskSlug_Beta {
  "Slug name for the Ask asset"
  name: String
}
type AskTag_Beta {
  "Unique identifier for tag"
  identifier: String!
  "The tag's display name"
  name: String
  "The tag's slug value"
  slug: AskSlug_Beta
}
"Module implementing a generic div container grouping text modules"
type AskTextGroupModule_Beta implements AskModuleInterface_Beta {
  "Module meta data indicating if title should be hidden"
  hideTitle: Boolean
  "Name of the module"
  name: String
  "String of CSS classes"
  classes: String
  "Unique identifier pointing to the prompt asset the module is associated with"
  promptId: String
  "Unique identifier of the module"
  identifier: String!
  "Unique slug of the asset"
  slug: AskSlug_Beta
  "Array of child modules"
  childrenModules: [String]
  "Array of unique identifier pointing to tags the asset is associated with"
  tagIds: [String]
}
"Module representing a rich text (html) element"
type AskTextModule_Beta implements AskModuleInterface_Beta {
  "Module meta data indicating if title should be hidden"
  hideTitle: Boolean
  "String containing html copy to render"
  htmlBody: String
  "Name of the module"
  name: String
  "String of CSS classes"
  classes: String
  "Unique identifier pointing to the prompt asset the module is associated with"
  promptId: String
  "Unique identifier of the module"
  identifier: String!
  "Unique slug of the asset"
  slug: AskSlug_Beta
  "Array of child modules"
  childrenModules: [String]
  "Array of unique identifier pointing to tags the asset is associated with"
  tagIds: [String]
}
type AssetsConnection implements RelayConnection {
  edges: [AssetsEdge]
  pageInfo: PageInfo!
  "Not part of the Relay Connection spec.  This is a custom and optional extension"
  totalCount: Int
}
type AssetsEdge implements RelayEdge {
  node: HasPromotionalProperties
  cursor: String!
}
type AssociatedArticleAssetBlock {
  "The part of the article with which an asset is associated."
  region: ArticleAssetRegion
  "An arbitrary asset associated with an Article via pharmacy.nyt.net"
  asset: AssociatedAsset
}
union AssociatedAsset = EmbeddedInteractive | Capsule
type Audio implements Published & CreativeWork & HasPromotionalProperties & Linkable & Node {
  vendorName: String!
  vendorAssetId: String!
  translations: [AudioTranslation]!
  subscribeUrls: [AudioSubscribeUrl]!
  podcastSeries: AudioPodcastSeries
  length: Int!
  fileUrl: String!
  fileName: String!
  credit: String!
  "Reference to the podcast collection"
  podcastCollection: Podcast
  transcript: AudioTranscript
  headline: CreativeWorkHeadline
  "Derived field determined by ad-tech rules based on the asset's section and\nsubsection"
  dfpTaxonomyException: String
  sourceApplication: String!
  standout: Boolean!
  source: Organization
  commentStatus: CommentStatus!
    @deprecated(reason: "Use commentProperties.status instead")
  personalizationProperties: PersonalizationProperties
  "An alternate summary in the form of a bulleted list, tailored for the\nhomepage."
  promotionalBullets: [String!]!
  newsStatus: NewsStatusType!
  firstPublished: DateTime
  url: String!
  typeOfMaterials: [String!]!
  addendums: [CreativeWorkAddendum]!
  lastModified: DateTime
  "Derived field defining ad parameters to send along with DFP request"
  adTargetingParams(clientAdParams: ClientAdParams!): [AdTargetingParam]
  sourcePublisher: String!
  uri: String!
  "An array of LegacyCollections associated with a particular work.\n\nCan be filtered by either name, type, or both. Name filtering allows for partial prefix\nmatching (i.e. an input of 'match-box-' will return both 'match-box-20' and 'match-box-30') \n Any returned types that do not match an expected GQL type on this field will be filtered out,\n with null being returned instead.\n                    "
  collections(name: String, type: CollectionType): [LegacyCollection]!
  "Person/Organizations with specific roles in creating the asset.\n\nUnlike 'bylines', this field represents the most current data available (i.e.\nNOT a snapshot)"
  credits: [Credit]!
  "An additional piece of metadata for cards that the news desk uses to capture\nsentence renditions."
  oneLine: String!
  kicker: String!
  "A summary specially tailored for the homepage."
  promotionalSummary: String!
  slug: String!
  desk: String!
  section: Section
  "The unique identifier of the event."
  eventId: String
  shortUrl: String!
  "A banner displayed across the top an individual article/video/interactive or\npackage to allow the news desk to give extra emphasis to high-priority\ncoverage."
  banner: String!
  "A headline specially tailored for the homepage."
  promotionalHeadline: String!
  firstReportedAtURL: String!
  originalDesk: String!
  id: ID!
  commentProperties: CreativeWorkCommentProperties!
  "A list of related creative works.  \n Any returned types that do not match an expected GQL type on this field will be filtered out,\n with null being returned instead.\n                     The results are limited to the first 20 elements returned."
  related: [HasPromotionalProperties]!
  language: Language
  "The multimedia that should be used to promote the story."
  promotionalMedia: PromotionalPropertiesMedia
  "MediaEmphasis can be influenced by cardType depending on the page layout.\n\nThis is business logic currently applied only by Samizdat, but could live on the Pipeline in the future.\n\nIf layout is not provided, the value is the mediaEmphasis from\npromotionalProperties.mediaEmphasis.\n\nIf layout is provided, and the layout value is\n  SMALL: Always force a MediaEmphasis of 'NONE' for TEXT cardTypes or\n         'MAXIMUM' for all others.\n  Anything else: Return the promotionalProperties.mediaEmphasis value"
  promotionalMediaEmphasis(layout: ProgramLayoutSize): MediaEmphasis!
  "Derived field determined to be the first collection in the collections list\nof type Column"
  column: LegacyCollection
  tone: Tone!
  followChannels: [ChannelMetadata]
  type: String!
  "An excerpt specially tailored for the homepage."
  promotionalExcerpt: String!
  displayProperties: CreativeWorkDisplayProperties
  card: CardUnion
  timesTags: [TimesTag]!
  cardType: CardType!
  subsection: Section
  advertisingProperties: CreativeWorkAdvertisingProperties
  "A snapshot of creator data at the time this CreativeWork is last published.\n\nSince it is a snapshot, it will NOT reflect any changes to the underlying\ndata after the CreativeWork is published."
  bylines: [Byline]!
  summary: String!
  sourceId: String!
  previouslyPublishedUrls: [String!]!
  "The full TZ name from the tzdata database, e.g. 'America/New_York', as set by\nthe editor in Scoop, for the timezone most relevant for the content"
  contentTimezoneName: String
  lastMajorModification: DateTime
  "Timezone offset string based on the publicationProperties.firstPublished and\ncreativeWork.contentTimezoneName fields formatted as: '+00:00, -00:00'."
  firstPublishedTimezoneOffset: String
}
type AudioBlock {
  media: Audio
}
type AudioCard implements CardInterface {
  "The asset underlying the card if it is an audio.  Otherwise, this is the\npromotionalMedia of the asset (if that media is an audio)."
  audio: Audio!
  newsStatus: NewsStatusType!
  url: String!
  lastModified: DateTime
  promotionalSummary: String!
  section: Section
  shortUrl: String!
  promotionalHeadline: String!
  promotionalMedia: PromotionalPropertiesMedia
  promotionalMediaEmphasis: MediaEmphasis!
  "Derived field determined to be the first collection in the collections list of type Column"
  column: LegacyCollection
  "The asset underlying this Card"
  asset: HasPromotionalProperties!
  cardType: String!
  subsection: Section
  lastMajorModification: DateTime
}
type AudioPodcastSeries {
  title: String!
  summary: String!
  subtitle: String!
  show: Boolean!
  schedule: String!
  name: String!
  itunesUrl: String!
  image: Image
  "The collection associated with this series.\n\nIt contains stories that are related to this PodcastSeries."
  collection: LegacyCollection
}
type AudioSubscribeUrl {
  url: String!
  platform: Platform!
}
type AudioTimecode {
  start: Duration!
  end: Duration!
}
type AudioTranscript {
  transcriptFragment: [AudioTranscriptFragment]!
}
type AudioTranscriptFragment {
  speaker: String!
  text: String!
  timecode: AudioTimecode!
}
type AudioTranslation {
  "Derived field representing either translation.url if present or url"
  url: String!
  translation: Audio
  translatedLinkText: String!
  linkText: String!
  language: Language
}
type AuthorCard implements CardInterface {
  creators(limit: Int): [BylineCreator!]!
  newsStatus: NewsStatusType!
  url: String!
  lastModified: DateTime
  promotionalSummary: String!
  section: Section
  shortUrl: String!
  promotionalHeadline: String!
  promotionalMedia: PromotionalPropertiesMedia
  promotionalMediaEmphasis: MediaEmphasis!
  "Derived field determined to be the first collection in the collections list of type Column"
  column: LegacyCollection
  "The asset underlying this Card"
  asset: HasPromotionalProperties!
  cardType: String!
  subsection: Section
  lastMajorModification: DateTime
}
"best seller book data"
type BestSellerBook implements Node {
  id: ID!
  "book title"
  title: String!
  "book description"
  description: String!
  "url of book image"
  imageUrl: String
  "width of book image"
  imageWidth: Int
  "height of book image"
  imageHeight: Int
  "name of book publisher"
  publisher: String!
  "book author name"
  author: String!
  "book contributor"
  contributor: String!
  "additional note for contributor"
  contributorNote: NonEmptyString
  "book rank this week"
  rank: Int!
  "book rank last week, or null if not ranked last week"
  rankLastWeek: Int
  "number of weeks on the best seller list"
  weeksOnList: Int!
  "book price in USD"
  priceUsd: Float
  "book age range"
  ageGroup: NonEmptyString
  "url for article chapter link"
  articleChapterUrl: NonEmptyString
  "url for book review link"
  bookReviewUrl: NonEmptyString
  "url for first chapter link"
  firstChapterUrl: NonEmptyString
  "url for Sunday Review link"
  sundayReviewUrl: NonEmptyString
  "whether the book's sales are barely distinguishable from those of the book\nranked above it"
  salesSimilarToHigherRanked: Boolean!
  "whether some retailers have reported receiving bulk orders for the book"
  bulkOrdersReported: Boolean!
  "primary isbn of the book"
  primaryIsbn: BestSellerBookIsbn
  "all book isbns, including primary"
  isbns: [BestSellerBookIsbn!]!
  "buy links"
  buyLinks: [BookBuyLink!]!
}
"10- and 13-digit book isbn"
type BestSellerBookIsbn {
  "10-digit book isbn"
  isbn10: NonEmptyString
  "13-digit book isbn"
  isbn13: NonEmptyString
}
"best seller books and metadata for one book list on one publish date"
type BestSellerBookList implements Node {
  "node id represented by combination of list name and publish date"
  id: ID!
  "short url-friendly name for book list. e.g., 'combined-print-and-e-book-fiction'"
  listName: String!
  "type of best seller list: WEEKLY or MONTHLY"
  listType: BestSellerBookListType!
  "display name for book list. e.g., 'Combined Print & E-Book Fiction'"
  displayName: String!
  "array of corrections associated to this list"
  corrections: [BestSellerCorrection!]!
  "date in ISO-8601 format that the sales totals for the list were calculated"
  bestSellersDate: DateTime
  "date in ISO-8601 format that the list was published"
  publishedDate: DateTime!
  "date that the previous list was published in ISO-8601 format, or null if there is none"
  previousPublishedDate: DateTime
  "date that the next list was published in ISO-8601 format, or null if there is none"
  nextPublishedDate: DateTime
  "connection of book edges"
  books(
    first: Int
    last: Int
    before: String
    after: String
  ): BestSellerBooksConnection
}
"list type for best seller book lists indicating how frequently the list is updated"
enum BestSellerBookListType {
  WEEKLY
  MONTHLY
}
type BestSellerBookListsConnection implements RelayConnection {
  edges: [BestSellerBookListsEdge]
  pageInfo: PageInfo!
  "Not part of the Relay Connection spec.  This is a custom and optional extension"
  totalCount: Int
}
type BestSellerBookListsEdge implements RelayEdge {
  node: BestSellerBookList
  cursor: String!
}
type BestSellerBooksConnection implements RelayConnection {
  edges: [BestSellerBooksEdge]
  pageInfo: PageInfo!
  "Not part of the Relay Connection spec.  This is a custom and optional extension"
  totalCount: Int
}
type BestSellerBooksEdge implements RelayEdge {
  node: BestSellerBook
  cursor: String!
}
type BestSellerCorrection {
  text: String
  correctionDate: DateTime
}
"best seller navigation metadata for one publish date"
type BestSellerNavigation {
  "short url-friendly name of list. e.g., 'trade-fiction-paperback'"
  listName: String!
  "display name of list. e.g., 'Paperback Trade Fiction'"
  displayName: String!
  "grouping for a list. e.g., mass-market-paperback and trade-fiction-paperback\nare both in PAPERBACK group"
  group: String!
  "short name for the list. e.g., 'Nonfiction'"
  shortName: String!
}
"best seller book lists and metadata for one publish date"
type BestSellerOverview {
  "date in ISO-8601 format that the sales totals for the list were calculated"
  bestSellersDate: DateTime
  "date in ISO-8601 format that the list was published"
  publishedDate: DateTime!
  "date that the previous list was published in ISO-8601 format, or null if there is none"
  previousPublishedDate: DateTime
  "date that the next list was published in ISO-8601 format, or null if there is none"
  nextPublishedDate: DateTime
  "connection of book list edges, filterable by pagination params and by list name"
  bookLists(
    first: Int
    last: Int
    before: String
    after: String
    listName: String
  ): BestSellerBookListsConnection
}
type BestSellers {
  "best seller book lists and books"
  overview: BestSellerOverview
  "best seller navigation metadata"
  navigation: [BestSellerNavigation!]
  "best seller book and list data for a single list"
  list(listName: String!): BestSellerBookList
}
"An interface for block display properties and other metadata"
interface BlockInterface_beta {
  "The internal id of the block"
  dataId: String!
  "Whether or not to offer a show more UI element"
  showMore: Boolean!
    @deprecated(reason: "Frontend blocks no longer support show more")
  "Whether or not to show the section a block is associated with in the UI"
  showSection: Boolean
  "Whether or not to show the title of the block in the UI"
  showTitle: Boolean
  "The style of block"
  style: BlockStyle_Beta
    @deprecated(reason: "No longer used for featured / standard styles")
  "The template name used to render the block"
  template: String
  "The title of the block"
  title: String
  "If not null, the block will display a link to this url"
  link: String
  "Minimum assets threshold in a block"
  initialLoad: Int
  "The tone of the block"
  tone: BlockTone_Beta
}
enum BlockStyle_Beta {
  featured
  standard
}
enum BlockTone_Beta {
  hard
  soft
}
union BlockUnion =
    ParagraphBlock
  | Heading1Block
  | Heading2Block
  | Heading3Block
  | BylineBlock
  | BlockquoteBlock
  | RuleBlock
  | ImageBlock
  | VideoBlock
  | TimestampBlock
  | DetailBlock
  | InteractiveBlock
  | UnstructuredBlock
  | TwitterEmbedBlock
  | YouTubeEmbedBlock
  | HeaderBasicBlock
  | SummaryBlock
  | LabelBlock
  | SoundcloudEmbedBlock
  | SpotifyEmbedBlock
  | Dropzone
  | SlideshowBlock
  | HeaderLegacyBlock
  | ListBlock
  | AudioBlock
  | HeaderFullBleedHorizontalBlock
  | LegacyTableBlock
  | HeaderFullBleedProTopperBlock
  | HeaderFullBleedVerticalBlock
  | HeaderFullBleedTopBlock
  | InstagramEmbedBlock
  | HeaderLiveBriefingBlock
  | RelatedLinksBlock
  | ClaimReviewBlock
  | DiptychBlock
  | HeaderMultimediaBlock
  | EmailSignupBlock
  | PullquoteBlock
  | InlineQuoteBlock
  | CapsuleBlock
  | LocationRecommendationBlock
  | QualtricsEmbedBlock
interface BlockWithFallback {
  "This union is intended to be a small subset of BlockUnion and defined such\nthat if a new type is added to BlockUnion that is unknown to the client, it\ncan use a fragment that spreads on BlockWithFallback to get a suitable\nreplacement."
  fallback: FallbackBlockUnion
}
"A block that contains display information as well as a source for a list of\nassets to show.  This block can contain audience targeting lists (e.g. by\ngeographic location)"
type Block_Beta implements BlockInterface_beta & Node {
  "The URI of the list to be used for resolving connections"
  dataSource: String
  "The connection of asset to load first; its maximum size is controlled via the\nblocks' configuration in the program.\n\nClients will usually not provide any pagination parameters so they can get\nthe entire list in one shot. Indicates that this field uses audience targeting cookies during resolution"
  firstLoad(
    first: Int
    last: Int
    before: String
    after: String
  ): AssetsConnection
  "The connection of assets to show on user action (e.g. clicking a 'more'\nbutton in the UI). Indicates that this field uses audience targeting cookies during resolution"
  moreAssets(
    first: Int
    last: Int
    before: String
    after: String
  ): AssetsConnection
  "Whether or not to show the title of the block in the UI"
  showTitle: Boolean
  "The style of block"
  style: BlockStyle_Beta
    @deprecated(reason: "No longer used for featured / standard styles")
  "Whether or not to offer a show more UI element"
  showMore: Boolean!
    @deprecated(reason: "Frontend blocks no longer support show more")
  "Whether or not to show the section a block is associated with in the UI"
  showSection: Boolean
  id: ID!
  "The internal id of the block"
  dataId: String!
  "If not null, the block will display a link to this url"
  link: String
  "The template name used to render the block"
  template: String
  "The tone of the block"
  tone: BlockTone_Beta
  "The title of the block"
  title: String
  "Minimum assets threshold in a block"
  initialLoad: Int
}
type BlockquoteBlock {
  content: [BlockquoteBlockContentUnion]!
}
union BlockquoteBlockContentUnion = ParagraphBlock
type BodegaResult {
  node: HasPromotionalProperties
}
type BoldFormat {
  type: String
}
type Book {
  uri: String!
  "urls where a user can purchase a book"
  buyLinks: [BookBuyLink!]
}
"a url and the name of the company where a user can purchase a book"
type BookBuyLink {
  "the name of the company where a user can purchase a book"
  sellerName: String
  "the url where a user can purchase a book"
  url: String
}
type BulletedCard implements CardInterface {
  promotionalBullets: [String!]!
  newsStatus: NewsStatusType!
  url: String!
  lastModified: DateTime
  promotionalSummary: String!
  section: Section
  shortUrl: String!
  promotionalHeadline: String!
  promotionalMedia: PromotionalPropertiesMedia
  promotionalMediaEmphasis: MediaEmphasis!
  "Derived field determined to be the first collection in the collections list of type Column"
  column: LegacyCollection
  "The asset underlying this Card"
  asset: HasPromotionalProperties!
  cardType: String!
  subsection: Section
  lastMajorModification: DateTime
}
"represents whether or not the cookied user is following the bulletin-eligible channel"
type BulletinFollowStatus {
  "uri for the channel, taken from the pool of channels eligible for the bulletin block"
  uri: String!
  "whether or not the user is following the channel"
  following: Boolean!
}
type BundleSubscription {
  bundle: String
  inGrace: Boolean
  promotion: String
  source: String
}
type Byline {
  renderedRepresentation: String
  prefix: String!
  creators: [BylineCreator!]!
}
"Represents a Byline node"
type BylineBlock {
  "Aligment of content within block"
  textAlign: Align!
  "List of bylines to display in this block"
  bylines: [Byline]!
  "Hide creator headshots for a BylineBlock"
  hideHeadshots: Boolean!
  "An optional role written for the byline block"
  role: [InlineUnion]!
}
union BylineCreator = Person | Organization
"A self-contained document type that can be reused across multiple assets"
type Capsule implements Published & CreativeWork & HasPromotionalProperties {
  "The capsule's document body"
  body: DocumentBlock
  headline: CreativeWorkHeadline
  "Derived field determined by ad-tech rules based on the asset's section and\nsubsection"
  dfpTaxonomyException: String
  sourceApplication: String!
  standout: Boolean!
  source: Organization
  commentStatus: CommentStatus!
    @deprecated(reason: "Use commentProperties.status instead")
  personalizationProperties: PersonalizationProperties
  "An alternate summary in the form of a bulleted list, tailored for the\nhomepage."
  promotionalBullets: [String!]!
  newsStatus: NewsStatusType!
  firstPublished: DateTime
  url: String!
  typeOfMaterials: [String!]!
  addendums: [CreativeWorkAddendum]!
  lastModified: DateTime
  "Derived field defining ad parameters to send along with DFP request"
  adTargetingParams(clientAdParams: ClientAdParams!): [AdTargetingParam]
  sourcePublisher: String!
  uri: String!
  "An array of LegacyCollections associated with a particular work.\n\nCan be filtered by either name, type, or both. Name filtering allows for partial prefix\nmatching (i.e. an input of 'match-box-' will return both 'match-box-20' and 'match-box-30') \n Any returned types that do not match an expected GQL type on this field will be filtered out,\n with null being returned instead.\n                    "
  collections(name: String, type: CollectionType): [LegacyCollection]!
  "Person/Organizations with specific roles in creating the asset.\n\nUnlike 'bylines', this field represents the most current data available (i.e.\nNOT a snapshot)"
  credits: [Credit]!
  "An additional piece of metadata for cards that the news desk uses to capture\nsentence renditions."
  oneLine: String!
  kicker: String!
  "A summary specially tailored for the homepage."
  promotionalSummary: String!
  slug: String!
  desk: String!
  section: Section
  "The unique identifier of the event."
  eventId: String
  shortUrl: String!
  "A banner displayed across the top an individual article/video/interactive or\npackage to allow the news desk to give extra emphasis to high-priority\ncoverage."
  banner: String!
  "A headline specially tailored for the homepage."
  promotionalHeadline: String!
  firstReportedAtURL: String!
  originalDesk: String!
  commentProperties: CreativeWorkCommentProperties!
  "A list of related creative works.  \n Any returned types that do not match an expected GQL type on this field will be filtered out,\n with null being returned instead.\n                     The results are limited to the first 20 elements returned."
  related: [HasPromotionalProperties]!
  language: Language
  "The multimedia that should be used to promote the story."
  promotionalMedia: PromotionalPropertiesMedia
  "MediaEmphasis can be influenced by cardType depending on the page layout.\n\nThis is business logic currently applied only by Samizdat, but could live on the Pipeline in the future.\n\nIf layout is not provided, the value is the mediaEmphasis from\npromotionalProperties.mediaEmphasis.\n\nIf layout is provided, and the layout value is\n  SMALL: Always force a MediaEmphasis of 'NONE' for TEXT cardTypes or\n         'MAXIMUM' for all others.\n  Anything else: Return the promotionalProperties.mediaEmphasis value"
  promotionalMediaEmphasis(layout: ProgramLayoutSize): MediaEmphasis!
  "Derived field determined to be the first collection in the collections list\nof type Column"
  column: LegacyCollection
  tone: Tone!
  followChannels: [ChannelMetadata]
  type: String!
  "An excerpt specially tailored for the homepage."
  promotionalExcerpt: String!
  displayProperties: CreativeWorkDisplayProperties
  card: CardUnion
  timesTags: [TimesTag]!
  cardType: CardType!
  subsection: Section
  advertisingProperties: CreativeWorkAdvertisingProperties
  "A snapshot of creator data at the time this CreativeWork is last published.\n\nSince it is a snapshot, it will NOT reflect any changes to the underlying\ndata after the CreativeWork is published."
  bylines: [Byline]!
  summary: String!
  sourceId: String!
  previouslyPublishedUrls: [String!]!
  "The full TZ name from the tzdata database, e.g. 'America/New_York', as set by\nthe editor in Scoop, for the timezone most relevant for the content"
  contentTimezoneName: String
  lastMajorModification: DateTime
  "Timezone offset string based on the publicationProperties.firstPublished and\ncreativeWork.contentTimezoneName fields formatted as: '+00:00, -00:00'."
  firstPublishedTimezoneOffset: String
}
type CapsuleBlock {
  "The block's associated capsule"
  content: Capsule
}
interface CardInterface {
  promotionalHeadline: String!
  promotionalSummary: String!
  promotionalMedia: PromotionalPropertiesMedia
  promotionalMediaEmphasis: MediaEmphasis!
  newsStatus: NewsStatusType!
  cardType: String!
  url: String!
  shortUrl: String!
  lastModified: DateTime
  lastMajorModification: DateTime
  section: Section
  subsection: Section
  "Derived field determined to be the first collection in the collections list of type Column"
  column: LegacyCollection
  "The asset underlying this Card"
  asset: HasPromotionalProperties!
}
enum CardType {
  STANDARD
  BULLET
  URGENT
  VISUAL
  TEXT
  EXCERPT
  AUTHOR
  VIDEO
  SLIDESHOW
  AUDIO
  INTERACTIVE
}
"StandardCard will result if either the card type is 'standard' or does not\nmatch any of the other card types expected in this union."
union CardUnion =
    AudioCard
  | AuthorCard
  | BulletedCard
  | ExcerptCard
  | SlideshowCard
  | TextCard
  | UrgentCard
  | VideoCard
  | VisualCard
  | InteractiveCard
  | StandardCard
enum Category {
  BROADWAY
  OFFBROADWAY
  OFFOFFBROADWAY
}
"a list of things that a user can follow"
type Channel implements Node {
  metadata: ChannelMetadata
  followAssetsConnection(
    first: Int
    last: Int
    before: String
    after: String
  ): FollowAssetsConnection
  id: ID!
}
"metadata associated with a follow channel"
type ChannelMetadata {
  name: String!
  uri: String!
  image: Image
  description: String
  shortDescription: String
}
"a Relay connection that enables access to a paginated list of\nChannelMetadatas"
type ChannelMetadatasConnection implements RelayConnection {
  "the edges representing the ChannelMetadatas for the current page"
  edges: [ChannelMetadatasEdge]
  pageInfo: PageInfo!
  "Not part of the Relay Connection spec.  This is a custom and optional extension"
  totalCount: Int
}
"a Relay edge containing a ChannelMetadata"
type ChannelMetadatasEdge implements RelayEdge {
  "the ChannelMetadata found at this position in the page"
  node: ChannelMetadata
  cursor: String!
}
"a grouping of channels that should be displayed together"
type ChannelsCategory {
  name: String!
  image: Image
  channels: [ChannelMetadata]!
  "list of contexts in which this channel category should be displayed"
  contexts: [ChannelsCategoryContext]!
}
"contexts where channel categories can be displayed"
enum ChannelsCategoryContext {
  "indicates that the category should be shown in onboarding for the follow\nfeature"
  ONBOARDING
  "indicates that the category should be shown in the homepage promotional module for follow"
  HOMEPAGE_PROMO
}
"A CityGuide is a new content format which will inform readers about a city and provide recommended locations"
type CityGuide implements Published & CreativeWork & HasPromotionalProperties {
  "The CityGuide's document body"
  body: DocumentBlock
  headline: CreativeWorkHeadline
  "Derived field determined by ad-tech rules based on the asset's section and\nsubsection"
  dfpTaxonomyException: String
  sourceApplication: String!
  standout: Boolean!
  source: Organization
  commentStatus: CommentStatus!
    @deprecated(reason: "Use commentProperties.status instead")
  personalizationProperties: PersonalizationProperties
  "An alternate summary in the form of a bulleted list, tailored for the\nhomepage."
  promotionalBullets: [String!]!
  newsStatus: NewsStatusType!
  firstPublished: DateTime
  url: String!
  typeOfMaterials: [String!]!
  addendums: [CreativeWorkAddendum]!
  lastModified: DateTime
  "Derived field defining ad parameters to send along with DFP request"
  adTargetingParams(clientAdParams: ClientAdParams!): [AdTargetingParam]
  sourcePublisher: String!
  uri: String!
  "An array of LegacyCollections associated with a particular work.\n\nCan be filtered by either name, type, or both. Name filtering allows for partial prefix\nmatching (i.e. an input of 'match-box-' will return both 'match-box-20' and 'match-box-30') \n Any returned types that do not match an expected GQL type on this field will be filtered out,\n with null being returned instead.\n                    "
  collections(name: String, type: CollectionType): [LegacyCollection]!
  "Person/Organizations with specific roles in creating the asset.\n\nUnlike 'bylines', this field represents the most current data available (i.e.\nNOT a snapshot)"
  credits: [Credit]!
  "An additional piece of metadata for cards that the news desk uses to capture\nsentence renditions."
  oneLine: String!
  kicker: String!
  "A summary specially tailored for the homepage."
  promotionalSummary: String!
  slug: String!
  desk: String!
  section: Section
  "The unique identifier of the event."
  eventId: String
  shortUrl: String!
  "A banner displayed across the top an individual article/video/interactive or\npackage to allow the news desk to give extra emphasis to high-priority\ncoverage."
  banner: String!
  "A headline specially tailored for the homepage."
  promotionalHeadline: String!
  firstReportedAtURL: String!
  originalDesk: String!
  commentProperties: CreativeWorkCommentProperties!
  "A list of related creative works.  \n Any returned types that do not match an expected GQL type on this field will be filtered out,\n with null being returned instead.\n                     The results are limited to the first 20 elements returned."
  related: [HasPromotionalProperties]!
  language: Language
  "The multimedia that should be used to promote the story."
  promotionalMedia: PromotionalPropertiesMedia
  "MediaEmphasis can be influenced by cardType depending on the page layout.\n\nThis is business logic currently applied only by Samizdat, but could live on the Pipeline in the future.\n\nIf layout is not provided, the value is the mediaEmphasis from\npromotionalProperties.mediaEmphasis.\n\nIf layout is provided, and the layout value is\n  SMALL: Always force a MediaEmphasis of 'NONE' for TEXT cardTypes or\n         'MAXIMUM' for all others.\n  Anything else: Return the promotionalProperties.mediaEmphasis value"
  promotionalMediaEmphasis(layout: ProgramLayoutSize): MediaEmphasis!
  "Derived field determined to be the first collection in the collections list\nof type Column"
  column: LegacyCollection
  tone: Tone!
  followChannels: [ChannelMetadata]
  type: String!
  "An excerpt specially tailored for the homepage."
  promotionalExcerpt: String!
  displayProperties: CreativeWorkDisplayProperties
  card: CardUnion
  timesTags: [TimesTag]!
  cardType: CardType!
  subsection: Section
  advertisingProperties: CreativeWorkAdvertisingProperties
  "A snapshot of creator data at the time this CreativeWork is last published.\n\nSince it is a snapshot, it will NOT reflect any changes to the underlying\ndata after the CreativeWork is published."
  bylines: [Byline]!
  summary: String!
  sourceId: String!
  previouslyPublishedUrls: [String!]!
  "The full TZ name from the tzdata database, e.g. 'America/New_York', as set by\nthe editor in Scoop, for the timezone most relevant for the content"
  contentTimezoneName: String
  lastMajorModification: DateTime
  "Timezone offset string based on the publicationProperties.firstPublished and\ncreativeWork.contentTimezoneName fields formatted as: '+00:00, -00:00'."
  firstPublishedTimezoneOffset: String
}
"Represents an implmentation of the ClaimReview schema, as defined here:\nschema.org/ClaimReview"
type ClaimReviewBlock {
  "Brief description of the claim in question"
  claim: String!
  "Source of claim e.g. House Speaker Paul Ryan"
  source: String!
  "URL where the claim appeared"
  claimUrl: String!
  "Date when the claim was made or entered public discourse"
  claimDate: DateTime
  "URL on which this claim review will appear"
  claimReviewUrl: String!
  "Date this claim review was published"
  firstPublished: DateTime
  "Numerical rating of the claim, e.g from 1-5"
  rating: Int!
  "Alternate text to display for rating, e.g. 'He said, she said.'"
  alternateRating: String!
  "Full text of the claim review"
  content: [InlineUnion]!
  "Render just the schema of the ClaimReview, not the visual output"
  hideClaim: Boolean!
}
input ClientAdParams {
  "Use edn to pass in Edition (ex. cn, es)"
  edn: String
  "Use plat to pass in Platform type (ex.  email, mweb)"
  plat: String
  "Use prop to pass in Property (ex. amp, cncity)"
  prop: String
  "Use ver to pass in Version (ex. vi, mvi)"
  ver: String
}
"An entity that exposes lists of assets, both manually and automatically curated"
interface Collection {
  "Highlights and stream concatenated into one logical list, first param is\ndefaulted to 10"
  assets(first: Int, last: Int, before: String, after: String): AssetsConnection
  "Ranked assets in the collection"
  highlights(
    first: Int
    last: Int
    before: String
    after: String
  ): AssetsConnection
  "a list of assets determined by some inherent criteria"
  stream(
    first: Int
    last: Int
    before: String
    after: String
    query: SearchQuery
    exclusionMode: StreamExclusionMode = HIGHLIGHTS_AND_EMBEDDED
  ): AssetsConnection
}
enum CollectionType {
  SECTION
  BYLINE
  COLUMN
  ISSUE
  NEWS_EVENT
  SEMANTIC
  SERIES
  SPOTLIGHT
  SYNDICATED
  TOP_STORIES
  LIST
  WATCHING
  TOPIC
}
enum CommentStatus {
  NO_COMMENTS
  ACCEPT_AND_DISPLAY_COMMENTS
  DISPLAY_COMMENTS_ONLY
}
"commentary (quote) that a creator can make regarding external or internal assets"
type Commentary {
  text: String!
  "the person who made the commentary"
  creator: Person
  asset: CommentaryAsset
}
"all asset types that a commentary can be about"
union CommentaryAsset =
    ExternalFollowAsset
  | Article
  | Audio
  | Capsule
  | CityGuide
  | EmbeddedInteractive
  | Image
  | Interactive
  | LegacyCollection
  | Package
  | PaidPost
  | ParentingArticle
  | Playlist
  | Guide
  | Promo
  | Recipe
  | Slideshow
  | Video
  | WatchingRecommendation
  | Podcast
enum CommentsDisplayOption {
  DEFAULT
  NYT_PICKS
  READER_PICKS
  REPORTER_REPLIES
}
enum Compatibility {
  NYT5
  INLINE
  IFRAME
}
type CompatibilityFeatures {
  isTheaterReview: Boolean!
  isMovieReview: Boolean!
  isDiningReview: Boolean!
  isBookReview: Boolean!
  isArtReview: Boolean!
  hasMinimalTemplate: Boolean!
  isDarkTheme: Boolean!
  hasCustomCssJs: Boolean!
  hasEmbeddedSlideshow: Boolean!
  hasEmbeddedAudio: Boolean!
  hasFullBleedHeader: Boolean!
  hasHorizontalFullBleedHeader: Boolean!
  hasVerticalFullBleedHeader: Boolean!
  hasProTopperFullBleedHeader: Boolean!
  hasTopBlockFullBleedHeader: Boolean!
  hasOakConversionError: Boolean!
  isOak: Boolean!
  hasVideo: Boolean!
  hasInlineEmbeddedInteractives: Boolean!
}
enum ConditionType {
  NONE
  TG_IF
  COND
  TG_UNLESS
}
type ContactDetails {
  socialMedia: [ContactDetailsSocialMedia]!
  phoneNumbers: [ContactDetailsPhoneNumber]!
  addresses: [ContactDetailsAddress]!
  "A website url for the contact"
  website: String!
}
type ContactDetailsAddress {
  type: ContactType!
  neighborhood: String!
  crossStreet: String!
  county: String!
  address: ContactDetailsPostalAddress
}
type ContactDetailsPhoneNumber {
  type: PhoneType!
  number: String!
}
type ContactDetailsPostalAddress {
  "The street number and street information for the contact's address"
  streetAddress: String!
  "The region or state information of the contact's address"
  region: String!
  "A postal, or zip, code for the contact's address"
  postalCode: String!
  "A P.O. box number associated with the contact's address"
  postOfficeBoxNumber: String!
  "The locality or city of the contact's address"
  locality: String!
  "The country of the contact's address"
  country: String!
}
type ContactDetailsSocialMedia {
  type: String!
  account: String!
}
enum ContactType {
  WORK
  HOME
  OTHER
}
input CreateNewsletterSubscriptionInput {
  "RelayMutation"
  clientMutationId: String!
  userCaptchaToken: String!
  "A series of codes the user is signing up for, including the newsletter code\nand potentially a marketing code. Only one (newsletterCode or\nnewsletterCodes) is acceptable."
  newsletterCodes: [String!]
  "DEPRECATED: Use newsletterCodes instead. The code of the newsletter being\nsigned up for. Only one (newsletterCode or newsletterCodes) is acceptable."
  newsletterCode: String
  userEmail: String!
  "this field is no longer being used by helix"
  marketing: Boolean
  "Source of traffic to be passed via paid ads"
  referrer: String
  "The unique key for a particular signup form, generally describing the\nplatform, signup method, and version of the form. e.g., NYT5_Signup_Module_v2"
  signupFormVersion: String
}
type CreateNewsletterSubscriptionResult implements RelayMutation {
  userErrors: String
  clientMutationId: String!
}
interface CreativeWork {
  typeOfMaterials: [String!]!
  tone: Tone!
  timesTags: [TimesTag]!
  summary: String!
  subsection: Section
  standout: Boolean!
  source: Organization
  slug: String!
  section: Section
  "A list of related creative works.  \n Any returned types that do not match an expected GQL type on this field will be filtered out,\n with null being returned instead.\n                     The results are limited to the first 20 elements returned."
  related: [HasPromotionalProperties]!
  personalizationProperties: PersonalizationProperties
  originalDesk: String!
  language: Language
  kicker: String!
  headline: CreativeWorkHeadline
  firstReportedAtURL: String!
  displayProperties: CreativeWorkDisplayProperties
  desk: String!
  "Person/Organizations with specific roles in creating the asset.\n\nUnlike 'bylines', this field represents the most current data available (i.e.\nNOT a snapshot)"
  credits: [Credit]!
  commentStatus: CommentStatus!
    @deprecated(reason: "Use commentProperties.status instead")
  "An array of LegacyCollections associated with a particular work.\n\nCan be filtered by either name, type, or both. Name filtering allows for partial prefix\nmatching (i.e. an input of 'match-box-' will return both 'match-box-20' and 'match-box-30') \n Any returned types that do not match an expected GQL type on this field will be filtered out,\n with null being returned instead.\n                    "
  collections(name: String, type: CollectionType): [LegacyCollection]!
  "A snapshot of creator data at the time this CreativeWork is last published.\n\nSince it is a snapshot, it will NOT reflect any changes to the underlying\ndata after the CreativeWork is published."
  bylines: [Byline]!
  advertisingProperties: CreativeWorkAdvertisingProperties
  addendums: [CreativeWorkAddendum]!
  "Derived field determined to be the first collection in the collections list\nof type Column"
  column: LegacyCollection
  "Derived field determined by ad-tech rules based on the asset's section and\nsubsection"
  dfpTaxonomyException: String
  "Derived field defining ad parameters to send along with DFP request"
  adTargetingParams(clientAdParams: ClientAdParams!): [AdTargetingParam]
  commentProperties: CreativeWorkCommentProperties!
  "The full TZ name from the tzdata database, e.g. 'America/New_York', as set by\nthe editor in Scoop, for the timezone most relevant for the content"
  contentTimezoneName: String
  "Timezone offset string based on the publicationProperties.firstPublished and\ncreativeWork.contentTimezoneName fields formatted as: '+00:00, -00:00'."
  firstPublishedTimezoneOffset: String
  followChannels: [ChannelMetadata]
}
type CreativeWorkAddendum {
  type: AddendumType!
  publicationDate: DateTime
  printInformation: CreativeWorkAddendumPrintInformation
  legacyHtmlBody: String!
  fixedInArticle: Boolean!
  createdDate: DateTime
  body: TextOnlyDocumentBlock
}
type CreativeWorkAddendumPrintInformation {
  section: String!
  page: String!
}
type CreativeWorkAdvertisingProperties {
  sponsored: Boolean!
  sensitivity: Sensitivity!
}
type CreativeWorkCommentProperties {
  closedTimestamp: DateTime
  prompt: String!
  primaryDisplay: CommentsDisplayOption!
  status: CommentStatus!
  "Number of approved user comments for this asset."
  approvedCommentsCount: Int
}
type CreativeWorkDisplayProperties {
  webTemplate: String!
  theme: String!
  template: String!
  showTimestamp: Boolean!
  showPublicationDate: Boolean!
  showComments: Boolean!
  serveAsNyt4: Boolean!
  minimumWidth: Int!
  maximumWidth: Int!
  fullBleedLeftAlignImage: Boolean!
  fullBleedGradientEnabled: Boolean!
  fullBleedDisplayStyle: String!
  fullBleedBackgroundColor: String!
  displayStyle: String!
  displayOverrides: [String!]!
  displayForPromotionOnly: Boolean!
}
type CreativeWorkHeadline {
  subHeadline: String!
  seo: String!
  default: String!
}
type Credit {
  role: String!
  creator: CreditCreator
}
union CreditCreator = Person | Organization
scalar DateTime
enum DayOfWeek {
  MONDAY
  TUESDAY
  WEDNESDAY
  THURSDAY
  FRIDAY
  SATURDAY
  SUNDAY
}
type Demographics {
  bundleSubscriptions: [BundleSubscription]
  companySize: String
  countryCode: String
  emailSubscriptions: [String]
  gender: String
  incomeRange: String
  jobTitle: String
  postalCode: String
  wat: String
}
enum DesktopHeaderFullBleedTextPosition {
  DESKTOP_BOTTOM_LEFT
  DESKTOP_BOTTOM_CENTER
}
type DetailBlock {
  textAlign: Align!
  content: [InlineUnion]!
}
type Dining {
  "search dining reviews. first must be a multiple of 10; default is 10.\nbackwards pagination is disabled."
  search(
    first: Int
    last: Int
    before: String
    after: String
    facets: DiningFacets
  ): ReviewsAssetsConnection
  "neighborhoods available in diningFacets,"
  neighborhoods: [Neighborhood]
  "cuisines available for diningFacets"
  cuisines: [NonEmptyString!]
}
"review search criteria for dining"
input DiningFacets {
  "price category"
  price: RestaurantPriceCategory
  "dining review rating"
  rating: DiningRating
  "neighborhood of restaurant, e.g., Flatiron, Meatpacking District"
  neighborhood: String
  "e.g., African, Coffee Shops, Deli"
  cuisine: String
  "search term"
  text: String
  isCriticsPick: Boolean
  "desc (default) or asc only. Sorts by review date"
  sortOrder: ReviewsSortOrder = DESC
}
enum DiningRating {
  NOT_RATED
  POOR
  FAIR
  SATISFACTORY
  GOOD
  VERY_GOOD
  EXCELLENT
  EXTRAORDINARY
}
"Represents an Diptych node — two images, with their respective captions and\ncredit data, appearing side by side."
type DiptychBlock {
  "Size content should render at"
  size: Size!
  "Reference to Image media"
  imageOne: Image
  "Reference to Image media"
  imageTwo: Image
}
"A Dispatch within a DispatchList. A Dispatch will contain 1 or more items to be displayed."
type Dispatch implements Node & Published {
  "Whether the dispatch should always appear at the top when included in a list."
  sticky: Boolean!
  "Used to display date/time info in the UI"
  timestamp: DateTime!
  "Describes a dispatch in certain scenarios like Live, Breaking, or a custom value"
  label: String!
  "Used to group dispatches together by topic, displayed as text e.g. The Mueller Report"
  topic: String!
  "Rich text summary of the item's content"
  summary: DocumentBlock!
  "A list of items related to the dispatch, often only 1"
  items: [DispatchItem!]!
  "A list of bylines set on all cards within the dispatch"
  bylines: [Byline]!
  sourceApplication: String!
  firstPublished: DateTime
  url: String!
  lastModified: DateTime
  sourcePublisher: String!
  uri: String!
  "The unique identifier of the event."
  eventId: String
  shortUrl: String!
  id: ID!
  type: String!
  sourceId: String!
  previouslyPublishedUrls: [String!]!
  lastMajorModification: DateTime
}
"The edge to be returned in a dispatches connection"
type DispatchEdge implements RelayEdge {
  "The individual dispatch in the current page of the connection"
  node: Dispatch
  cursor: String!
}
"An item within a Dispatch that contains formatted content"
type DispatchItem {
  "Oak data structure for rich content"
  body: DocumentBlock!
  "A hex value representing a color"
  backgroundColor: String!
  "Describes the UI intent of the item's body"
  type: DispatchItemType!
}
enum DispatchItemType {
  BASIC
  VISUAL
  QUOTE
}
"A list of Dispatches with configuration options for displaying a promotional UI"
type DispatchList implements Node & Published & HasHybridProperties {
  "List name"
  name: String!
  "An optional message displayed above a list of dispatches"
  banner: DocumentBlock!
  "Whether to display a promotional module that navigates to dispatches"
  showPromo: Boolean!
  "Properties that configure the optional promotional module for a list of dispatches"
  promotionalModule: DispatchListPromotionalModule
  "An optional survey displayed among a list of dispatches"
  survey: DispatchListSurveyModule
  sourceApplication: String!
  firstPublished: DateTime
  url: String!
  lastModified: DateTime
  sourcePublisher: String!
  uri: String!
  "The unique identifier of the event."
  eventId: String
  shortUrl: String!
  id: ID!
  type: String!
  sourceId: String!
  previouslyPublishedUrls: [String!]!
  lastMajorModification: DateTime
  "Connection of published dispatches, typically in reverse-chronological order"
  dispatches(
    first: Int
    last: Int
    before: String
    after: String
  ): DispatchesConnection
  "Pre-rendered RTP UI optimized for presentation within the iOS, Android newsreader apps"
  hybridBody: HybridDocumentBlock
}
"Configures the promotional module for a list of dispatches"
type DispatchListPromotionalModule {
  "UI hint for how to display the promotional module. This value is also used to track promotional module impressions by type."
  type: DispatchListPromotionalModuleType!
  "Number of dispatch summaries to show in the promotional module"
  maxItems: Int!
  "Optional text used to introduce the promotional content (e.g. Good Morning)"
  greeting: String!
  "Call to Action text displayed as a link or button"
  actionText: String!
  "If present, can be used as the rich content for a promotional module"
  content: DocumentBlock!
  "The promotional module can be displayed as a short list of current topics associated with recent dispatches."
  topics: [DispatchListTopic!]!
}
enum DispatchListPromotionalModuleType {
  DEFAULT
  CONTENT
  SUMMARY_1
  SUMMARY_2
}
"Configures the survey module for a list of dispatches"
type DispatchListSurveyModule {
  "The optional survey id that's going to appear in the feed"
  qualtricsId: String!
  "Whether to display a survey module in the feed"
  enabled: Boolean!
}
"Topic is used to group recent dispatches together."
type DispatchListTopic {
  "The name of the topic."
  name: String!
  "The number of active dispatches associated with the topic."
  count: Int!
}
"A connection for accessing the dispatches associated with an identifier `DispatchList`"
type DispatchesConnection implements RelayConnection {
  "The list of edges in the current page of the connection"
  edges: [DispatchEdge]!
  pageInfo: PageInfo!
  "Not part of the Relay Connection spec.  This is a custom and optional extension"
  totalCount: Int
}
enum DisplayStyleType {
  CONDENSED
  EXPANDED
  VISUAL_FOLLOW_UP
}
type DocumentBlock {
  content: [BlockUnion]!
}
type DropcapFormat {
  type: String
}
"Represents a position where sprinkled content or ads can be placed"
type Dropzone {
  "Index of dropzone (starting with 0)"
  index: Int!
  "Should this dropzone be considered 'bad'?"
  bad: Boolean!
  "Should this dropzone be used for Ads on Mobile?"
  adsMobile: Boolean!
  "Should this dropzone be used for Ads on Desktop?"
  adsDesktop: Boolean!
  "For the 'holdout' group (used to experiment with new mobile configurations),\nshould this dropzone be used for Ads on Mobile?"
  adsMobileHoldout: Boolean!
  "For the 'holdout' group (used to experiment with new desktop configurations),\nshould this dropzone be used for Ads on Desktop?"
  adsDesktopHoldout: Boolean!
  "Used to indicate Ads location for custom configuration passed to Sprinkler"
  adsCustom: Boolean!
  "Should this dropzone be used for Ads on Hybrid? This is separate from Mobile (VI)"
  adsHybrid: Boolean!
}
scalar Duration
type EmailSignupBlock {
  "Heading of the email that you can sign up for"
  heading: [InlineUnion!]!
  "Summary text for email signup describing why a user should sign up"
  summary: [InlineUnion!]!
  "String code of  Helix Product to which this email belongs"
  productCode: String
  "Default values for the Helix product of this EmailSignupBlock"
  productDefaults: EmailSignupBlockDefaults
}
"Default values for a Helix Product associated with a given productCode"
type EmailSignupBlockDefaults {
  "Default title for the Helix Product"
  title: String
  "Default summary for the Helix Product"
  caption: String
}
type EmbeddedInteractive implements InteractiveWork & Published & CreativeWork & HasPromotionalProperties & Linkable & Node & HasHybridProperties {
  "Embedded interactive UI for Home on iOS/Android. Although this comes from the hybrid service, this interactive\nis currently not expected to render offline on the client, unlike interactives rendered in articles."
  hybridBody: HybridDocumentBlock
  translations: [EmbeddedInteractive]!
  size: Size!
  "A version of the freeform html that is AMP compatible"
  ampHtml: String
  "CSS combined with the base CSS of the AMP app, not to exceed 50k combined"
  ampCss: String
  "Script tags representing the AMP features used by the AMP rendition"
  ampJs: String
  "Whether or not this interactive has the AMP rendition enabled"
  ampEnabled: Boolean!
  headline: CreativeWorkHeadline
  "Derived field determined by ad-tech rules based on the asset's section and\nsubsection"
  dfpTaxonomyException: String
  sourceApplication: String!
  standout: Boolean!
  source: Organization
  commentStatus: CommentStatus!
    @deprecated(reason: "Use commentProperties.status instead")
  personalizationProperties: PersonalizationProperties
  css: String!
  "An alternate summary in the form of a bulleted list, tailored for the\nhomepage."
  promotionalBullets: [String!]!
  newsStatus: NewsStatusType!
  firstPublished: DateTime
  url: String!
  typeOfMaterials: [String!]!
  addendums: [CreativeWorkAddendum]!
  lastModified: DateTime
  appName: String!
  "Derived field defining ad parameters to send along with DFP request"
  adTargetingParams(clientAdParams: ClientAdParams!): [AdTargetingParam]
  sourcePublisher: String!
  uri: String!
  "An array of LegacyCollections associated with a particular work.\n\nCan be filtered by either name, type, or both. Name filtering allows for partial prefix\nmatching (i.e. an input of 'match-box-' will return both 'match-box-20' and 'match-box-30') \n Any returned types that do not match an expected GQL type on this field will be filtered out,\n with null being returned instead.\n                    "
  collections(name: String, type: CollectionType): [LegacyCollection]!
  "Person/Organizations with specific roles in creating the asset.\n\nUnlike 'bylines', this field represents the most current data available (i.e.\nNOT a snapshot)"
  credits: [Credit]!
  "An additional piece of metadata for cards that the news desk uses to capture\nsentence renditions."
  oneLine: String!
  credit: String!
  kicker: String!
  "A summary specially tailored for the homepage."
  promotionalSummary: String!
  slug: String!
  dataSource: String!
  desk: String!
  section: Section
  "The unique identifier of the event."
  eventId: String
  shortUrl: String!
  "A banner displayed across the top an individual article/video/interactive or\npackage to allow the news desk to give extra emphasis to high-priority\ncoverage."
  banner: String!
  "A headline specially tailored for the homepage."
  promotionalHeadline: String!
  firstReportedAtURL: String!
  originalDesk: String!
  id: ID!
  compatibility: Compatibility!
  commentProperties: CreativeWorkCommentProperties!
  leadin: String!
  "A list of related creative works.  \n Any returned types that do not match an expected GQL type on this field will be filtered out,\n with null being returned instead.\n                     The results are limited to the first 20 elements returned."
  related: [HasPromotionalProperties]!
  language: Language
  note: String!
  updatedText: String!
  "The multimedia that should be used to promote the story."
  promotionalMedia: PromotionalPropertiesMedia
  "MediaEmphasis can be influenced by cardType depending on the page layout.\n\nThis is business logic currently applied only by Samizdat, but could live on the Pipeline in the future.\n\nIf layout is not provided, the value is the mediaEmphasis from\npromotionalProperties.mediaEmphasis.\n\nIf layout is provided, and the layout value is\n  SMALL: Always force a MediaEmphasis of 'NONE' for TEXT cardTypes or\n         'MAXIMUM' for all others.\n  Anything else: Return the promotionalProperties.mediaEmphasis value"
  promotionalMediaEmphasis(layout: ProgramLayoutSize): MediaEmphasis!
  "Derived field determined to be the first collection in the collections list\nof type Column"
  column: LegacyCollection
  js: String!
  tone: Tone!
  followChannels: [ChannelMetadata]
  type: String!
  "An excerpt specially tailored for the homepage."
  promotionalExcerpt: String!
  html: String!
  displayProperties: CreativeWorkDisplayProperties
  card: CardUnion
  timesTags: [TimesTag]!
  cardType: CardType!
  subsection: Section
  advertisingProperties: CreativeWorkAdvertisingProperties
  "A snapshot of creator data at the time this CreativeWork is last published.\n\nSince it is a snapshot, it will NOT reflect any changes to the underlying\ndata after the CreativeWork is published."
  bylines: [Byline]!
  summary: String!
  sourceId: String!
  previouslyPublishedUrls: [String!]!
  "The full TZ name from the tzdata database, e.g. 'America/New_York', as set by\nthe editor in Scoop, for the timezone most relevant for the content"
  contentTimezoneName: String
  lastMajorModification: DateTime
  "Timezone offset string based on the publicationProperties.firstPublished and\ncreativeWork.contentTimezoneName fields formatted as: '+00:00, -00:00'."
  firstPublishedTimezoneOffset: String
}
enum Entitlement {
  HD
  MM
  MSD
  MTD
  TPR
  VAR
}
type ExcerptCard implements CardInterface {
  promotionalExcerpt: String!
  newsStatus: NewsStatusType!
  url: String!
  lastModified: DateTime
  promotionalSummary: String!
  section: Section
  shortUrl: String!
  promotionalHeadline: String!
  promotionalMedia: PromotionalPropertiesMedia
  promotionalMediaEmphasis: MediaEmphasis!
  "Derived field determined to be the first collection in the collections list of type Column"
  column: LegacyCollection
  "The asset underlying this Card"
  asset: HasPromotionalProperties!
  cardType: String!
  subsection: Section
  lastMajorModification: DateTime
}
"Represents a work that had been published to the pipeline, but has been\nunpublished due to content expiration"
type ExpiredWork implements Node {
  id: ID!
  uri: String!
}
"non-NYT assets"
type ExternalFollowAsset {
  url: String!
  source: String
  headline: String
}
type ExternalWork implements Node {
  id: ID!
  url: String!
}
union FallbackBlockUnion = HeaderLegacyBlock | TextOnlyDocumentBlock
"all asset types that can appear in either a FollowAssetsConnection or a\nFollowFeedAssetsConnection"
union FollowAsset =
    ExternalFollowAsset
  | Article
  | Audio
  | Capsule
  | CityGuide
  | EmbeddedInteractive
  | Image
  | Interactive
  | LegacyCollection
  | Package
  | PaidPost
  | ParentingArticle
  | Playlist
  | Guide
  | Promo
  | Recipe
  | Slideshow
  | Video
  | WatchingRecommendation
  | Commentary
  | Podcast
type FollowAssetsConnection implements RelayConnection {
  edges: [FollowAssetsEdge]
  pageInfo: PageInfo!
  "Not part of the Relay Connection spec.  This is a custom and optional extension"
  totalCount: Int
}
type FollowAssetsEdge implements RelayEdge {
  node: FollowAsset
  cursor: String!
}
type FollowFeedAssetsConnection implements RelayConnection {
  edges: [FollowFeedAssetsEdge]
  "a list of assets inferred for the user by per-api based on user history"
  inferredAssets: [InferredRecommendationAsset]
  "metadata for the channels that appear in the connection"
  channels: [ChannelMetadata!]
  "a list of inferred channels for the user"
  inferredChannels: [ChannelMetadata!]
  "a list of all channels eligible for the bulletin block"
  bulletinBlockChannels: [ChannelMetadata!]
  "a list of assets to display in a user's bulletin block"
  bulletinBlockAssets: [InferredRecommendationAsset]
  "a list of assets to display in a user's periodic block"
  periodicAssets: [InferredRecommendationAsset]
  pageInfo: PageInfo!
  "Not part of the Relay Connection spec.  This is a custom and optional extension"
  totalCount: Int
}
type FollowFeedAssetsEdge implements RelayEdge {
  channelUri: String
  node: FollowAsset
  cursor: String!
}
"represents whether or not the cookied user is following the channel"
type FollowStatus {
  "uri for the channel"
  uri: String!
  "whether or not the user is following the channel"
  following: Boolean!
}
union FormatUnion =
    BoldFormat
  | ItalicFormat
  | LinkFormat
  | SubscriptFormat
  | SuperscriptFormat
  | DropcapFormat
  | StrikethroughFormat
type Geo {
  "2-Letter country code.\n\nWARNING: This requires Country Code to be set in the request headers. Once\nSAM-2347 (https://jira.nyt.net/browse/SAM-2347) is implemented, this field\nwill be accurate for anyone not setting the country code in headers."
  country: String
}
type GeoCoordinates {
  "The latitude in degrees."
  longitude: Float
  "The longitude in degrees."
  latitude: Float
}
"Result when the provided gift code has already been redeemed"
type GiftCodeAlreadyRedeemed implements GiftErrorResult {
  "Detailed error message, if available, for the error"
  error: String
}
"Result when the gift code has expired"
type GiftCodeExpired implements GiftErrorResult {
  "Detailed error message, if available, for the error"
  error: String
}
"Result when the gift code is a non-empty string, but does not match any known gift codes or is not in the right format"
type GiftCodeInvalid implements GiftErrorResult {
  "Detailed error message, if available, for the error"
  error: String
}
"Result when the gift Code (free trial code) has been redeemed more than the maximum allowed times."
type GiftCodeMaxOut implements GiftErrorResult {
  "Detailed error message, if available, for the error"
  error: String
}
"Indicated that the gift code was successfully redeemed.  The code of the gift redeemed is the only data returned.\nSubsequent calls to giftInfo or redeemGiftCode with this code should result in a GiftCodeAlreadyRedeemed response."
type GiftCodeRedeemed {
  code: NonEmptyString!
}
"Gift giver asked to refund their gift"
type GiftCodeRefunded implements GiftErrorResult {
  "Detailed error message, if available, for the error"
  error: String
}
"Gift giver's card declined"
type GiftCreditCardDeclined implements GiftErrorResult {
  "Detailed error message, if available, for the error"
  error: String
}
"Gift giver's card is not yet charged"
type GiftCreditCardPending implements GiftErrorResult {
  "Detailed error message, if available, for the error"
  error: String
}
"Provide a common interface for each possible error result during the gift redemption workflow\nfor more easy querying."
interface GiftErrorResult {
  "Detailed error message, if available, for the error"
  error: String
}
"Details related to a specific gift code"
type GiftInfo {
  "The sender of the gift code"
  senderName: String!
  "The number of days that the gift code is valid"
  validForInDays: Int!
  "The Plato bundle type such X, A"
  bundleType: String!
  upsell: GiftUpsell
}
"List of expected results when querying for a specific gift code"
union GiftInfoResult =
    GiftInfo
  | SessionExpired
  | GiftCodeAlreadyRedeemed
  | GiftCodeInvalid
  | GiftCodeExpired
  | GiftCodeMaxOut
  | GiftInvalidEduDomain
  | GiftUserSubscribed
  | GiftCreditCardDeclined
  | GiftCodeRefunded
  | GiftCreditCardPending
"Result when a user does not have an allowed school domain."
type GiftInvalidEduDomain implements GiftErrorResult {
  "Detailed error message, if available, for the error"
  error: String
}
"Union of expected results when redeeming a gift code for a  specific user"
union GiftRedemptionResult =
    GiftCodeRedeemed
  | SessionExpired
  | SessionNotFound
  | GiftCodeAlreadyRedeemed
  | GiftCodeInvalid
  | GiftCodeExpired
  | GiftCodeMaxOut
  | GiftInvalidEduDomain
  | GiftUserSubscribed
  | GiftCreditCardDeclined
  | GiftCodeRefunded
  | GiftCreditCardPending
  | GiftUserFreeTrial
"An upsell in the offer code that we can offer the user so they become paying subscribers after the gift"
type GiftUpsell {
  "The full friendly name of the upsell subscription"
  subscriptionName: String!
  "The upsell promo time amount"
  timeAmount: Int!
  "The unit of time for the timeAmount such as 'days' or 'months'"
  timeUnit: String!
  "The plato marketing header for an upsell"
  upsellOfferHeader: String!
  "A formatted price of the upsell promo"
  price: String!
  "ID of the offer chain in Plato"
  offerChainId: String!
}
"User is already in a free trial"
type GiftUserFreeTrial implements GiftErrorResult {
  "End date of a free trial subscription"
  trialEndDate: DateTime
  "Detailed error message, if available, for the error"
  error: String
}
"User is already a subscriber"
type GiftUserSubscribed implements GiftErrorResult {
  "Detailed error message, if available, for the error"
  error: String
}
type Guide implements Published & CreativeWork & HasPromotionalProperties & Linkable & Node {
  headline: CreativeWorkHeadline
  "Derived field determined by ad-tech rules based on the asset's section and\nsubsection"
  dfpTaxonomyException: String
  sourceApplication: String!
  standout: Boolean!
  source: Organization
  commentStatus: CommentStatus!
    @deprecated(reason: "Use commentProperties.status instead")
  personalizationProperties: PersonalizationProperties
  "An alternate summary in the form of a bulleted list, tailored for the\nhomepage."
  promotionalBullets: [String!]!
  newsStatus: NewsStatusType!
  firstPublished: DateTime
  url: String!
  typeOfMaterials: [String!]!
  addendums: [CreativeWorkAddendum]!
  lastModified: DateTime
  "Derived field defining ad parameters to send along with DFP request"
  adTargetingParams(clientAdParams: ClientAdParams!): [AdTargetingParam]
  sourcePublisher: String!
  uri: String!
  "An array of LegacyCollections associated with a particular work.\n\nCan be filtered by either name, type, or both. Name filtering allows for partial prefix\nmatching (i.e. an input of 'match-box-' will return both 'match-box-20' and 'match-box-30') \n Any returned types that do not match an expected GQL type on this field will be filtered out,\n with null being returned instead.\n                    "
  collections(name: String, type: CollectionType): [LegacyCollection]!
  "Person/Organizations with specific roles in creating the asset.\n\nUnlike 'bylines', this field represents the most current data available (i.e.\nNOT a snapshot)"
  credits: [Credit]!
  "An additional piece of metadata for cards that the news desk uses to capture\nsentence renditions."
  oneLine: String!
  kicker: String!
  "A summary specially tailored for the homepage."
  promotionalSummary: String!
  slug: String!
  desk: String!
  section: Section
  "The unique identifier of the event."
  eventId: String
  shortUrl: String!
  "A banner displayed across the top an individual article/video/interactive or\npackage to allow the news desk to give extra emphasis to high-priority\ncoverage."
  banner: String!
  "A headline specially tailored for the homepage."
  promotionalHeadline: String!
  firstReportedAtURL: String!
  originalDesk: String!
  id: ID!
  commentProperties: CreativeWorkCommentProperties!
  "A list of related creative works.  \n Any returned types that do not match an expected GQL type on this field will be filtered out,\n with null being returned instead.\n                     The results are limited to the first 20 elements returned."
  related: [HasPromotionalProperties]!
  language: Language
  "The multimedia that should be used to promote the story."
  promotionalMedia: PromotionalPropertiesMedia
  "MediaEmphasis can be influenced by cardType depending on the page layout.\n\nThis is business logic currently applied only by Samizdat, but could live on the Pipeline in the future.\n\nIf layout is not provided, the value is the mediaEmphasis from\npromotionalProperties.mediaEmphasis.\n\nIf layout is provided, and the layout value is\n  SMALL: Always force a MediaEmphasis of 'NONE' for TEXT cardTypes or\n         'MAXIMUM' for all others.\n  Anything else: Return the promotionalProperties.mediaEmphasis value"
  promotionalMediaEmphasis(layout: ProgramLayoutSize): MediaEmphasis!
  "Derived field determined to be the first collection in the collections list\nof type Column"
  column: LegacyCollection
  tone: Tone!
  followChannels: [ChannelMetadata]
  type: String!
  "An excerpt specially tailored for the homepage."
  promotionalExcerpt: String!
  displayProperties: CreativeWorkDisplayProperties
  card: CardUnion
  timesTags: [TimesTag]!
  cardType: CardType!
  subsection: Section
  advertisingProperties: CreativeWorkAdvertisingProperties
  "A snapshot of creator data at the time this CreativeWork is last published.\n\nSince it is a snapshot, it will NOT reflect any changes to the underlying\ndata after the CreativeWork is published."
  bylines: [Byline]!
  summary: String!
  sourceId: String!
  previouslyPublishedUrls: [String!]!
  "The full TZ name from the tzdata database, e.g. 'America/New_York', as set by\nthe editor in Scoop, for the timezone most relevant for the content"
  contentTimezoneName: String
  lastMajorModification: DateTime
  "Timezone offset string based on the publicationProperties.firstPublished and\ncreativeWork.contentTimezoneName fields formatted as: '+00:00, -00:00'."
  firstPublishedTimezoneOffset: String
}
interface HasHybridProperties {
  hybridBody: HybridDocumentBlock
}
interface HasPromotionalProperties {
  "A summary specially tailored for the homepage."
  promotionalSummary: String!
  "An additional piece of metadata for cards that the news desk uses to capture\nsentence renditions."
  oneLine: String!
  newsStatus: NewsStatusType!
  "MediaEmphasis can be influenced by cardType depending on the page layout.\n\nThis is business logic currently applied only by Samizdat, but could live on the Pipeline in the future.\n\nIf layout is not provided, the value is the mediaEmphasis from\npromotionalProperties.mediaEmphasis.\n\nIf layout is provided, and the layout value is\n  SMALL: Always force a MediaEmphasis of 'NONE' for TEXT cardTypes or\n         'MAXIMUM' for all others.\n  Anything else: Return the promotionalProperties.mediaEmphasis value"
  promotionalMediaEmphasis(layout: ProgramLayoutSize): MediaEmphasis!
  "The multimedia that should be used to promote the story."
  promotionalMedia: PromotionalPropertiesMedia
  "A headline specially tailored for the homepage."
  promotionalHeadline: String!
  "An excerpt specially tailored for the homepage."
  promotionalExcerpt: String!
  cardType: CardType!
  "An alternate summary in the form of a bulleted list, tailored for the\nhomepage."
  promotionalBullets: [String!]!
  card: CardUnion
  "A banner displayed across the top an individual article/video/interactive or\npackage to allow the news desk to give extra emphasis to high-priority\ncoverage."
  banner: String!
}
type HeaderBasicBlock {
  "Use timestampBlock if you are using RelayClassic and require a fragment\nspread on both HeaderBasicBlock.timestamp and TimestampBlock.timestamp (Relay\nClassic drops aliases causing invalid queries in this case)"
  timestamp: TimestampBlock
  timestampBlock: TimestampBlock
    @deprecated(
      reason: "Use timestamp instead.  This field was only added to support alias issues with Relay Classic."
    )
  summary: SummaryBlock
  ledeMedia: HeaderBasicBlockLedeMedia
  label: LabelBlock
  headline: HeaderBasicBlockHeadline
  byline: BylineBlock
}
union HeaderBasicBlockHeadline = Heading1Block | Heading2Block | Heading3Block
union HeaderBasicBlockLedeMedia =
    ImageBlock
  | VideoBlock
  | SlideshowBlock
  | InteractiveBlock
interface HeaderFullBleed {
  timestamp: TimestampBlock
  timestampBlock: TimestampBlock
    @deprecated(
      reason: "Use timestamp instead.  This field was only added to support alias issues with Relay Classic."
    )
  summary: SummaryBlock
  ledeMedia: HeaderFullBleedLedeMedia
  label: LabelBlock
  headlineColor: HeadlineColor!
  headline: HeaderFullBleedHeadline
  displayOverride: MastheadStyle!
  byline: BylineBlock
  textPosition: HeaderFullBleedTextPosition
}
union HeaderFullBleedHeadline = Heading1Block | Heading2Block | Heading3Block
type HeaderFullBleedHorizontalBlock implements HeaderFullBleed & BlockWithFallback {
  gradientEnabled: Boolean!
  displayOverride: MastheadStyle!
  headline: HeaderFullBleedHeadline
  timestampBlock: TimestampBlock
    @deprecated(
      reason: "Use timestamp instead.  This field was only added to support alias issues with Relay Classic."
    )
  textPosition: HeaderFullBleedTextPosition
  timestamp: TimestampBlock
  "This union is intended to be a small subset of BlockUnion and defined such\nthat if a new type is added to BlockUnion that is unknown to the client, it\ncan use a fragment that spreads on BlockWithFallback to get a suitable\nreplacement."
  fallback: FallbackBlockUnion
  headlineColor: HeadlineColor!
  label: LabelBlock
  byline: BylineBlock
  ledeMedia: HeaderFullBleedLedeMedia
  summary: SummaryBlock
}
union HeaderFullBleedLedeMedia = ImageBlock | VideoBlock | InteractiveBlock
type HeaderFullBleedProTopperBlock implements HeaderFullBleed & BlockWithFallback {
  displayOverride: MastheadStyle!
  headline: HeaderFullBleedHeadline
  timestampBlock: TimestampBlock
    @deprecated(
      reason: "Use timestamp instead.  This field was only added to support alias issues with Relay Classic."
    )
  textPosition: HeaderFullBleedTextPosition
  timestamp: TimestampBlock
  "This union is intended to be a small subset of BlockUnion and defined such\nthat if a new type is added to BlockUnion that is unknown to the client, it\ncan use a fragment that spreads on BlockWithFallback to get a suitable\nreplacement."
  fallback: FallbackBlockUnion
  headlineColor: HeadlineColor!
  label: LabelBlock
  byline: BylineBlock
  ledeMedia: HeaderFullBleedLedeMedia
  summary: SummaryBlock
}
"The placement of the headline/metadata overlay within the lede media.\nSeparate values for mobile and desktop, as each can be defined by an editor.\nThe list of enum values (for each) is expected to grow as the need for more\nconfigurations arises."
type HeaderFullBleedTextPosition {
  mobile: MobileHeaderFullBleedTextPosition!
  desktop: DesktopHeaderFullBleedTextPosition!
}
type HeaderFullBleedTopBlock implements HeaderFullBleed & BlockWithFallback {
  displayOverride: MastheadStyle!
  headline: HeaderFullBleedHeadline
  timestampBlock: TimestampBlock
    @deprecated(
      reason: "Use timestamp instead.  This field was only added to support alias issues with Relay Classic."
    )
  textPosition: HeaderFullBleedTextPosition
  timestamp: TimestampBlock
  "This union is intended to be a small subset of BlockUnion and defined such\nthat if a new type is added to BlockUnion that is unknown to the client, it\ncan use a fragment that spreads on BlockWithFallback to get a suitable\nreplacement."
  fallback: FallbackBlockUnion
  headlineColor: HeadlineColor!
  label: LabelBlock
  byline: BylineBlock
  ledeMedia: HeaderFullBleedLedeMedia
  summary: SummaryBlock
}
type HeaderFullBleedVerticalBlock implements HeaderFullBleed & BlockWithFallback {
  "Hex representation of the background color of the cover.\n\nFor example: '#c80028'."
  backgroundColor: String!
  "How the Vertical Full Bleed cover is supposed to be aligned."
  alignment: HeaderFullBleedVerticalBlockAlignment!
  displayOverride: MastheadStyle!
  headline: HeaderFullBleedHeadline
  timestampBlock: TimestampBlock
    @deprecated(
      reason: "Use timestamp instead.  This field was only added to support alias issues with Relay Classic."
    )
  textPosition: HeaderFullBleedTextPosition
  timestamp: TimestampBlock
  "This union is intended to be a small subset of BlockUnion and defined such\nthat if a new type is added to BlockUnion that is unknown to the client, it\ncan use a fragment that spreads on BlockWithFallback to get a suitable\nreplacement."
  fallback: FallbackBlockUnion
  headlineColor: HeadlineColor!
  label: LabelBlock
  byline: BylineBlock
  ledeMedia: HeaderFullBleedLedeMedia
  summary: SummaryBlock
}
enum HeaderFullBleedVerticalBlockAlignment {
  RIGHT
  LEFT
}
type HeaderLegacyBlock {
  "Use timestampBlock if you are using RelayClassic and require a fragment\nspread on both HeaderBasicBlock.timestamp and TimestampBlock.timestamp (Relay\nClassic drops aliases causing invalid queries in this case)"
  timestamp: TimestampBlock
  timestampBlock: TimestampBlock
    @deprecated(
      reason: "Use timestamp instead.  This field was only added to support alias issues with Relay Classic."
    )
  subhead: Heading2Block
  ledeMedia: HeaderLegacyBlockLedeMedia
  label: LabelBlock
  headline: Heading1Block
  byline: BylineBlock
}
union HeaderLegacyBlockLedeMedia =
    ImageBlock
  | VideoBlock
  | SlideshowBlock
  | InteractiveBlock
type HeaderLiveBriefingBlock implements BlockWithFallback {
  timestamp: TimestampBlock
  summary: SummaryBlock
  latestUpdate: HeaderLiveBriefingLatestUpdateBlock
  label: LabelBlock
  headline: Heading1Block
  byline: BylineBlock
  "This union is intended to be a small subset of BlockUnion and defined such\nthat if a new type is added to BlockUnion that is unknown to the client, it\ncan use a fragment that spreads on BlockWithFallback to get a suitable\nreplacement."
  fallback: FallbackBlockUnion
}
type HeaderLiveBriefingLatestUpdateBlock {
  label: String!
  content: [InlineUnion]!
}
"A header block representing full article covers with associated multimedia\nassets.\n\nThe header has 2 possible layouts:\n\n- when the audio asset is associated with a podcastSeries, but doesn't have\n  a promotional image, it renders the 'standard' layout using a special crop\n  of the podcastSeries image as the background\n- when there is a promotional image, it renders the vertical layout with the\n  image on the right and the text on the left. The background color of the left\n  container is defined by the backgroundColor attribute."
type HeaderMultimediaBlock implements BlockWithFallback {
  "Headline to display in the header"
  headline: HeaderMultimediaBlockHeadline
  "Summary to display in the header"
  summary: SummaryBlock
  "Timestamp to display in the header"
  timestamp: TimestampBlock
  "The color of the text used in the headline."
  headlineColor: HeadlineColor!
  "Hex representation of the background color of the cover, e.g. #c80028"
  backgroundColor: String!
  "Media associated with the header."
  media: HeaderMultimediaBlockMedia
  "This union is intended to be a small subset of BlockUnion and defined such\nthat if a new type is added to BlockUnion that is unknown to the client, it\ncan use a fragment that spreads on BlockWithFallback to get a suitable\nreplacement."
  fallback: FallbackBlockUnion
}
union HeaderMultimediaBlockHeadline =
    Heading1Block
  | Heading2Block
  | Heading3Block
union HeaderMultimediaBlockMedia = AudioBlock | VideoBlock
type Heading1Block {
  textAlign: Align!
  content: [InlineUnion]!
}
type Heading2Block {
  textAlign: Align!
  content: [InlineUnion]!
}
type Heading3Block {
  textAlign: Align!
  content: [InlineUnion]!
}
enum HeadlineColor {
  BLACK
  WHITE
}
type HelixNewsletter implements Node & Published & CreativeWork {
  previewText: String
  subject: String
  product: HelixNewsletterProduct
  scheduleDateTime: DateTime
  body: DocumentBlock
  headline: CreativeWorkHeadline
  "Derived field determined by ad-tech rules based on the asset's section and\nsubsection"
  dfpTaxonomyException: String
  sourceApplication: String!
  standout: Boolean!
  source: Organization
  commentStatus: CommentStatus!
    @deprecated(reason: "Use commentProperties.status instead")
  personalizationProperties: PersonalizationProperties
  firstPublished: DateTime
  url: String!
  typeOfMaterials: [String!]!
  addendums: [CreativeWorkAddendum]!
  lastModified: DateTime
  "Derived field defining ad parameters to send along with DFP request"
  adTargetingParams(clientAdParams: ClientAdParams!): [AdTargetingParam]
  sourcePublisher: String!
  uri: String!
  "An array of LegacyCollections associated with a particular work.\n\nCan be filtered by either name, type, or both. Name filtering allows for partial prefix\nmatching (i.e. an input of 'match-box-' will return both 'match-box-20' and 'match-box-30') \n Any returned types that do not match an expected GQL type on this field will be filtered out,\n with null being returned instead.\n                    "
  collections(name: String, type: CollectionType): [LegacyCollection]!
  "Person/Organizations with specific roles in creating the asset.\n\nUnlike 'bylines', this field represents the most current data available (i.e.\nNOT a snapshot)"
  credits: [Credit]!
  kicker: String!
  slug: String!
  desk: String!
  section: Section
  "The unique identifier of the event."
  eventId: String
  shortUrl: String!
  firstReportedAtURL: String!
  originalDesk: String!
  id: ID!
  commentProperties: CreativeWorkCommentProperties!
  "A list of related creative works.  \n Any returned types that do not match an expected GQL type on this field will be filtered out,\n with null being returned instead.\n                     The results are limited to the first 20 elements returned."
  related: [HasPromotionalProperties]!
  language: Language
  "Derived field determined to be the first collection in the collections list\nof type Column"
  column: LegacyCollection
  tone: Tone!
  followChannels: [ChannelMetadata]
  type: String!
  displayProperties: CreativeWorkDisplayProperties
  timesTags: [TimesTag]!
  subsection: Section
  advertisingProperties: CreativeWorkAdvertisingProperties
  "A snapshot of creator data at the time this CreativeWork is last published.\n\nSince it is a snapshot, it will NOT reflect any changes to the underlying\ndata after the CreativeWork is published."
  bylines: [Byline]!
  summary: String!
  sourceId: String!
  previouslyPublishedUrls: [String!]!
  "The full TZ name from the tzdata database, e.g. 'America/New_York', as set by\nthe editor in Scoop, for the timezone most relevant for the content"
  contentTimezoneName: String
  lastMajorModification: DateTime
  "Timezone offset string based on the publicationProperties.firstPublished and\ncreativeWork.contentTimezoneName fields formatted as: '+00:00, -00:00'."
  firstPublishedTimezoneOffset: String
}
type HelixNewsletterProduct implements Node & Published {
  name: String!
  sourceApplication: String!
  firstPublished: DateTime
  url: String!
  lastModified: DateTime
  sourcePublisher: String!
  uri: String!
  "The unique identifier of the event."
  eventId: String
  shortUrl: String!
  id: ID!
  type: String!
  sourceId: String!
  previouslyPublishedUrls: [String!]!
  lastMajorModification: DateTime
}
type HybridDocumentBlock {
  main: HybridMainBlock!
  subResources: [HybridSubResource]!
  images: [HybridImage]!
}
type HybridImage {
  crops: [HybridImageCrop]!
}
type HybridImageCrop {
  target: String!
  minViewportWidth: Int!
}
type HybridMainBlock {
  contents: String!
}
type HybridSubResource {
  target: String
}
type Image implements Published & CreativeWork & HasPromotionalProperties & Linkable & Node {
  translations: [ImageTranslation]!
  original: ImageOriginal
  merlinId: Int!
  legacyHtmlCaption: String!
  imageType: String!
  crops(cropNames: [ImageCropName!], renditionNames: [String!]): [ImageCrop]!
  credit: String!
  caption: TextOnlyDocumentBlock
  approvedForSyndication: Boolean!
  "An override of the image caption for the homepage/homescreen in Oak format."
  captionOverride: TextOnlyDocumentBlock
  "Hide captions on the homepage/homescreen."
  hideCaption: Boolean!
  "A list of promotional variants representing the multiple promotional\nproperties associated with the Image."
  promotions: [PromotionalVariant!]!
  headline: CreativeWorkHeadline
  "Derived field determined by ad-tech rules based on the asset's section and\nsubsection"
  dfpTaxonomyException: String
  sourceApplication: String!
  standout: Boolean!
  source: Organization
  commentStatus: CommentStatus!
    @deprecated(reason: "Use commentProperties.status instead")
  personalizationProperties: PersonalizationProperties
  "An alternate summary in the form of a bulleted list, tailored for the\nhomepage."
  promotionalBullets: [String!]!
  newsStatus: NewsStatusType!
  firstPublished: DateTime
  url: String!
  typeOfMaterials: [String!]!
  addendums: [CreativeWorkAddendum]!
  lastModified: DateTime
  "Derived field defining ad parameters to send along with DFP request"
  adTargetingParams(clientAdParams: ClientAdParams!): [AdTargetingParam]
  sourcePublisher: String!
  uri: String!
  "An array of LegacyCollections associated with a particular work.\n\nCan be filtered by either name, type, or both. Name filtering allows for partial prefix\nmatching (i.e. an input of 'match-box-' will return both 'match-box-20' and 'match-box-30') \n Any returned types that do not match an expected GQL type on this field will be filtered out,\n with null being returned instead.\n                    "
  collections(name: String, type: CollectionType): [LegacyCollection]!
  "Person/Organizations with specific roles in creating the asset.\n\nUnlike 'bylines', this field represents the most current data available (i.e.\nNOT a snapshot)"
  credits: [Credit]!
  "An additional piece of metadata for cards that the news desk uses to capture\nsentence renditions."
  oneLine: String!
  kicker: String!
  "A summary specially tailored for the homepage."
  promotionalSummary: String!
  slug: String!
  desk: String!
  section: Section
  "The unique identifier of the event."
  eventId: String
  shortUrl: String!
  "A banner displayed across the top an individual article/video/interactive or\npackage to allow the news desk to give extra emphasis to high-priority\ncoverage."
  banner: String!
  "A headline specially tailored for the homepage."
  promotionalHeadline: String!
  firstReportedAtURL: String!
  originalDesk: String!
  id: ID!
  commentProperties: CreativeWorkCommentProperties!
  "A list of related creative works.  \n Any returned types that do not match an expected GQL type on this field will be filtered out,\n with null being returned instead.\n                     The results are limited to the first 20 elements returned."
  related: [HasPromotionalProperties]!
  language: Language
  "The multimedia that should be used to promote the story."
  promotionalMedia: PromotionalPropertiesMedia
  "MediaEmphasis can be influenced by cardType depending on the page layout.\n\nThis is business logic currently applied only by Samizdat, but could live on the Pipeline in the future.\n\nIf layout is not provided, the value is the mediaEmphasis from\npromotionalProperties.mediaEmphasis.\n\nIf layout is provided, and the layout value is\n  SMALL: Always force a MediaEmphasis of 'NONE' for TEXT cardTypes or\n         'MAXIMUM' for all others.\n  Anything else: Return the promotionalProperties.mediaEmphasis value"
  promotionalMediaEmphasis(layout: ProgramLayoutSize): MediaEmphasis!
  "Derived field determined to be the first collection in the collections list\nof type Column"
  column: LegacyCollection
  tone: Tone!
  followChannels: [ChannelMetadata]
  type: String!
  "An excerpt specially tailored for the homepage."
  promotionalExcerpt: String!
  displayProperties: CreativeWorkDisplayProperties
  card: CardUnion
  timesTags: [TimesTag]!
  cardType: CardType!
  subsection: Section
  advertisingProperties: CreativeWorkAdvertisingProperties
  "A snapshot of creator data at the time this CreativeWork is last published.\n\nSince it is a snapshot, it will NOT reflect any changes to the underlying\ndata after the CreativeWork is published."
  bylines: [Byline]!
  summary: String!
  sourceId: String!
  previouslyPublishedUrls: [String!]!
  "The full TZ name from the tzdata database, e.g. 'America/New_York', as set by\nthe editor in Scoop, for the timezone most relevant for the content"
  contentTimezoneName: String
  lastMajorModification: DateTime
  "Timezone offset string based on the publicationProperties.firstPublished and\ncreativeWork.contentTimezoneName fields formatted as: '+00:00, -00:00'."
  firstPublishedTimezoneOffset: String
}
type ImageBleed {
  percentTop: Float!
  percentRight: Float!
  percentLeft: Float!
  percentBottom: Float!
}
type ImageBlock {
  size: Size!
  "\n Any returned types that do not match an expected GQL type on this field will be filtered out,\n with null being returned instead.\n                    "
  media: Image
}
type ImageBox {
  y2: Int!
  y1: Int!
  x2: Int!
  x1: Int!
}
type ImageCrop {
  renditions: [ImageRendition]!
  name: ImageCropName!
  box: ImageBox
  bleed: ImageBleed
}
enum ImageCropName {
  NOT_SET
  MASTER
  SMALL_SQUARE
  MEDIUM_SQUARE
  HORIZONTAL
  WIDESCREEN
  FLEXIBLE
  FACEBOOK
  WATCH
  THREE_BY_TWO
  TWO_BY_THREE
  SIXTEEN_BY_NINE
  FIFTEEN_BY_SEVEN
  FULL_BLEED_SAFE_AREA
  MOBILE_MASTER
}
enum ImageFormat {
  NOT_SET
  JPG
  PNG
  GIF
}
type ImageOriginal {
  width: Int!
  height: Int!
}
type ImageRendition {
  width: Int!
  url: String!
  name: String!
  height: Int!
  format: ImageFormat!
}
type ImageTranslation {
  "Derived field representing either translation.url if present or url"
  url: String!
  translation: Image
  translatedLinkText: String!
  linkText: String!
  language: Language
}
type InferredRecommendationAsset {
  channelUri: String
  node: FollowAsset
  "A list of key/value pairs that should be used for reporting purposes"
  trackingParams: [TrackingParam]
}
type Ingredient {
  "Part name"
  partName: String!
  "Ingredient name"
  name: String!
  "Ingredient display title"
  displayTitle: String!
  "Quantity of ingredient"
  quantity: Float
  "End of range"
  rangeEnd: Float
  "Ingredient quanitity unit"
  unit: String!
  "Comment"
  comment: String!
  "Related Recipes"
  relatedRecipes: [Recipe]!
}
"Inline Quotes, to differentiate between Block Quotes and Pull Quotes."
type InlineQuoteBlock {
  "Contains the quoted text"
  content: [InlineQuoteBlockContentUnion]!
}
"Uses a ParagraphBlock as the quoted content have bold or italic formats applied to it"
union InlineQuoteBlockContentUnion = ParagraphBlock
union InlineUnion = TextInline | LineBreakInline
type InstagramEmbedBlock implements BlockWithFallback {
  instagramUrl: String!
  "This union is intended to be a small subset of BlockUnion and defined such\nthat if a new type is added to BlockUnion that is unknown to the client, it\ncan use a fragment that spreads on BlockWithFallback to get a suitable\nreplacement."
  fallback: FallbackBlockUnion
}
type Interactive implements InteractiveWork & Published & CreativeWork & HasPromotionalProperties & Linkable & Node {
  underHeadlineRelatedAsset: CreativeWork
  translations: [InteractiveTranslation]!
  textFormat: InteractiveTextFormats
  printInformation: PrintInformation
  "A list of promotional variants representing the multiple promotional\nproperties associated with the Interactive."
  promotions: [PromotionalVariant!]!
  "A version of the freeform html that is AMP compatible"
  ampHtml: String
  "CSS combined with the base CSS of the AMP app, not to exceed 50k combined"
  ampCss: String
  "Script tags representing the AMP features used by the AMP rendition"
  ampJs: String
  "Whether or not this interactive has the AMP rendition enabled"
  ampEnabled: Boolean!
  headline: CreativeWorkHeadline
  "Derived field determined by ad-tech rules based on the asset's section and\nsubsection"
  dfpTaxonomyException: String
  sourceApplication: String!
  standout: Boolean!
  source: Organization
  commentStatus: CommentStatus!
    @deprecated(reason: "Use commentProperties.status instead")
  personalizationProperties: PersonalizationProperties
  css: String!
  "An alternate summary in the form of a bulleted list, tailored for the\nhomepage."
  promotionalBullets: [String!]!
  newsStatus: NewsStatusType!
  firstPublished: DateTime
  url: String!
  typeOfMaterials: [String!]!
  addendums: [CreativeWorkAddendum]!
  lastModified: DateTime
  appName: String!
  "Derived field defining ad parameters to send along with DFP request"
  adTargetingParams(clientAdParams: ClientAdParams!): [AdTargetingParam]
  sourcePublisher: String!
  uri: String!
  "An array of LegacyCollections associated with a particular work.\n\nCan be filtered by either name, type, or both. Name filtering allows for partial prefix\nmatching (i.e. an input of 'match-box-' will return both 'match-box-20' and 'match-box-30') \n Any returned types that do not match an expected GQL type on this field will be filtered out,\n with null being returned instead.\n                    "
  collections(name: String, type: CollectionType): [LegacyCollection]!
  "Person/Organizations with specific roles in creating the asset.\n\nUnlike 'bylines', this field represents the most current data available (i.e.\nNOT a snapshot)"
  credits: [Credit]!
  "An additional piece of metadata for cards that the news desk uses to capture\nsentence renditions."
  oneLine: String!
  credit: String!
  kicker: String!
  "A summary specially tailored for the homepage."
  promotionalSummary: String!
  slug: String!
  dataSource: String!
  desk: String!
  section: Section
  "The unique identifier of the event."
  eventId: String
  shortUrl: String!
  "A banner displayed across the top an individual article/video/interactive or\npackage to allow the news desk to give extra emphasis to high-priority\ncoverage."
  banner: String!
  "A headline specially tailored for the homepage."
  promotionalHeadline: String!
  firstReportedAtURL: String!
  originalDesk: String!
  id: ID!
  compatibility: Compatibility!
  commentProperties: CreativeWorkCommentProperties!
  leadin: String!
  "A list of related creative works.  \n Any returned types that do not match an expected GQL type on this field will be filtered out,\n with null being returned instead.\n                     The results are limited to the first 20 elements returned."
  related: [HasPromotionalProperties]!
  language: Language
  note: String!
  updatedText: String!
  "The multimedia that should be used to promote the story."
  promotionalMedia: PromotionalPropertiesMedia
  "MediaEmphasis can be influenced by cardType depending on the page layout.\n\nThis is business logic currently applied only by Samizdat, but could live on the Pipeline in the future.\n\nIf layout is not provided, the value is the mediaEmphasis from\npromotionalProperties.mediaEmphasis.\n\nIf layout is provided, and the layout value is\n  SMALL: Always force a MediaEmphasis of 'NONE' for TEXT cardTypes or\n         'MAXIMUM' for all others.\n  Anything else: Return the promotionalProperties.mediaEmphasis value"
  promotionalMediaEmphasis(layout: ProgramLayoutSize): MediaEmphasis!
  "Derived field determined to be the first collection in the collections list\nof type Column"
  column: LegacyCollection
  js: String!
  tone: Tone!
  followChannels: [ChannelMetadata]
  type: String!
  "An excerpt specially tailored for the homepage."
  promotionalExcerpt: String!
  html: String!
  displayProperties: CreativeWorkDisplayProperties
  card: CardUnion
  timesTags: [TimesTag]!
  cardType: CardType!
  subsection: Section
  advertisingProperties: CreativeWorkAdvertisingProperties
  "A snapshot of creator data at the time this CreativeWork is last published.\n\nSince it is a snapshot, it will NOT reflect any changes to the underlying\ndata after the CreativeWork is published."
  bylines: [Byline]!
  summary: String!
  sourceId: String!
  previouslyPublishedUrls: [String!]!
  "The full TZ name from the tzdata database, e.g. 'America/New_York', as set by\nthe editor in Scoop, for the timezone most relevant for the content"
  contentTimezoneName: String
  lastMajorModification: DateTime
  "Timezone offset string based on the publicationProperties.firstPublished and\ncreativeWork.contentTimezoneName fields formatted as: '+00:00, -00:00'."
  firstPublishedTimezoneOffset: String
}
type InteractiveBlock {
  size: Size!
  media: InteractiveWork
}
type InteractiveCard implements CardInterface {
  "The asset underlying the card if it is an interactiveWork. Otherwise, this\nis the promotionalMedia of the asset (if that media is an interactiveWork)."
  interactive: InteractiveWork!
  newsStatus: NewsStatusType!
  url: String!
  lastModified: DateTime
  promotionalSummary: String!
  section: Section
  shortUrl: String!
  promotionalHeadline: String!
  promotionalMedia: PromotionalPropertiesMedia
  promotionalMediaEmphasis: MediaEmphasis!
  "Derived field determined to be the first collection in the collections list of type Column"
  column: LegacyCollection
  "The asset underlying this Card"
  asset: HasPromotionalProperties!
  cardType: String!
  subsection: Section
  lastMajorModification: DateTime
}
type InteractiveTextFormats {
  plainText: String! @deprecated(reason: "Use feedMarkup instead")
  oakText: DocumentBlock
  feedMarkup: String!
}
type InteractiveTranslation {
  "Derived field representing either translation.url if present or url"
  url: String!
  translation: Interactive
  translatedLinkText: String!
  linkText: String!
  language: Language
}
interface InteractiveWork {
  dataSource: String!
  note: String!
  leadin: String!
  js: String!
  html: String!
  css: String!
  credit: String!
  compatibility: Compatibility!
  appName: String!
  updatedText: String!
}
type ItalicFormat {
  type: String
}
type Keyword implements Published & TimesTag & Linkable & Node {
  keywordType: String
  displayName: String!
  sourceApplication: String!
  userAdded: Boolean!
  firstPublished: DateTime
  url: String!
  lastModified: DateTime
  description: String!
  linkedData: [TimesTagLinkedData]!
  sourcePublisher: String!
  uri: String!
  slug: String!
  "The unique identifier of the event."
  eventId: String
  shortUrl: String!
  taggingRules: [TimesTagTaggingRule]!
  id: ID!
  "\n Any returned types that do not match an expected GQL type on this field will be filtered out,\n with null being returned instead.\n                    "
  promotionalMedia: TimesTagPromotionalMedia
  vernacular: String!
  type: String!
  isAdvertisingBrandSensitive: Boolean!
  sourceId: String!
  previouslyPublishedUrls: [String!]!
  lastMajorModification: DateTime
}
type LabelBlock {
  textAlign: Align!
  content: [InlineUnion]!
}
type Language {
  name: String!
  code: String!
}
type LegacyCollection implements Published & HasPromotionalProperties & CreativeWork & Linkable & Node & Collection {
  collectionType: CollectionType!
  tagline: String!
  socialMedia: [ContactDetailsSocialMedia]!
  query: String!
  name: String!
  mobileHeader: String!
  longDescription: String!
  header: String!
  groupings: [LegacyCollectionGrouping]!
  "Topic metadata (defined when type = TOPIC)"
  topic: LegacyCollectionTopic
  "Enables toggle that allows editors to suppress Collection stories (so called\n'packages') within story pages"
  showCollectionStories: Boolean!
  active: Boolean!
  showPicture: Boolean!
  subtype: String!
  "The following fields are part of the Collection interface, declared\nexplicitly here to provide a different description.\n\nRanked assets in the collection, represented in Bodega as all assets in\ncollection.groupings('rank').containers('highlights')"
  highlights(
    first: Int
    last: Int
    before: String
    after: String
  ): AssetsConnection
  "Assets returned for the collection in the collections-api"
  stream(
    first: Int
    last: Int
    before: String
    after: String
    query: SearchQuery
    exclusionMode: StreamExclusionMode = HIGHLIGHTS_AND_EMBEDDED
  ): AssetsConnection
  headline: CreativeWorkHeadline
  "Derived field determined by ad-tech rules based on the asset's section and\nsubsection"
  dfpTaxonomyException: String
  sourceApplication: String!
  standout: Boolean!
  source: Organization
  "Highlights and stream concatenated into one logical list, first param is\ndefaulted to 10"
  assets(first: Int, last: Int, before: String, after: String): AssetsConnection
  commentStatus: CommentStatus!
    @deprecated(reason: "Use commentProperties.status instead")
  personalizationProperties: PersonalizationProperties
  "An alternate summary in the form of a bulleted list, tailored for the\nhomepage."
  promotionalBullets: [String!]!
  newsStatus: NewsStatusType!
  firstPublished: DateTime
  url: String!
  typeOfMaterials: [String!]!
  addendums: [CreativeWorkAddendum]!
  lastModified: DateTime
  "Derived field defining ad parameters to send along with DFP request"
  adTargetingParams(clientAdParams: ClientAdParams!): [AdTargetingParam]
  sourcePublisher: String!
  uri: String!
  "An array of LegacyCollections associated with a particular work.\n\nCan be filtered by either name, type, or both. Name filtering allows for partial prefix\nmatching (i.e. an input of 'match-box-' will return both 'match-box-20' and 'match-box-30') \n Any returned types that do not match an expected GQL type on this field will be filtered out,\n with null being returned instead.\n                    "
  collections(name: String, type: CollectionType): [LegacyCollection]!
  "Person/Organizations with specific roles in creating the asset.\n\nUnlike 'bylines', this field represents the most current data available (i.e.\nNOT a snapshot)"
  credits: [Credit]!
  "An additional piece of metadata for cards that the news desk uses to capture\nsentence renditions."
  oneLine: String!
  kicker: String!
  "A summary specially tailored for the homepage."
  promotionalSummary: String!
  slug: String!
  desk: String!
  section: Section
  "The unique identifier of the event."
  eventId: String
  shortUrl: String!
  "A banner displayed across the top an individual article/video/interactive or\npackage to allow the news desk to give extra emphasis to high-priority\ncoverage."
  banner: String!
  "A headline specially tailored for the homepage."
  promotionalHeadline: String!
  firstReportedAtURL: String!
  originalDesk: String!
  id: ID!
  commentProperties: CreativeWorkCommentProperties!
  "A list of related creative works.  \n Any returned types that do not match an expected GQL type on this field will be filtered out,\n with null being returned instead.\n                     The results are limited to the first 20 elements returned."
  related: [HasPromotionalProperties]!
  language: Language
  "The multimedia that should be used to promote the story."
  promotionalMedia: PromotionalPropertiesMedia
  "MediaEmphasis can be influenced by cardType depending on the page layout.\n\nThis is business logic currently applied only by Samizdat, but could live on the Pipeline in the future.\n\nIf layout is not provided, the value is the mediaEmphasis from\npromotionalProperties.mediaEmphasis.\n\nIf layout is provided, and the layout value is\n  SMALL: Always force a MediaEmphasis of 'NONE' for TEXT cardTypes or\n         'MAXIMUM' for all others.\n  Anything else: Return the promotionalProperties.mediaEmphasis value"
  promotionalMediaEmphasis(layout: ProgramLayoutSize): MediaEmphasis!
  "Derived field determined to be the first collection in the collections list\nof type Column"
  column: LegacyCollection
  tone: Tone!
  followChannels: [ChannelMetadata]
  type: String!
  "An excerpt specially tailored for the homepage."
  promotionalExcerpt: String!
  displayProperties: CreativeWorkDisplayProperties
  card: CardUnion
  timesTags: [TimesTag]!
  cardType: CardType!
  subsection: Section
  advertisingProperties: CreativeWorkAdvertisingProperties
  "A snapshot of creator data at the time this CreativeWork is last published.\n\nSince it is a snapshot, it will NOT reflect any changes to the underlying\ndata after the CreativeWork is published."
  bylines: [Byline]!
  summary: String!
  sourceId: String!
  previouslyPublishedUrls: [String!]!
  "The full TZ name from the tzdata database, e.g. 'America/New_York', as set by\nthe editor in Scoop, for the timezone most relevant for the content"
  contentTimezoneName: String
  lastMajorModification: DateTime
  "Timezone offset string based on the publicationProperties.firstPublished and\ncreativeWork.contentTimezoneName fields formatted as: '+00:00, -00:00'."
  firstPublishedTimezoneOffset: String
}
type LegacyCollectionContainer {
  type: String!
  template: String!
  status: String!
  relations: [LegacyCollectionRelation]!
  name: String!
  magnitude: Int!
  label: String!
}
type LegacyCollectionGrouping {
  name: String!
  containers: [LegacyCollectionContainer]!
}
type LegacyCollectionRelation {
  size: Int
  overrides: String!
  hideSummary: Boolean!
  hidePromoMedia: Boolean!
  asset: HasPromotionalProperties
}
type LegacyCollectionTopic {
  "Information about the company represented by a topic"
  company: TopicCompany
  "What category such as if it is an organization or person"
  category: TopicCategory
}
union LegacyResult = AddResult | BodegaResult
type LegacySearchHitsConnection implements RelayConnection {
  "RelayConnection"
  pageInfo: PageInfo!
  totalCount: Int
  metadata: SearchMetadata
  "LegacySearchHitsConnection"
  edges: [LegacySearchHitsEdge]
}
type LegacySearchHitsEdge implements RelayEdge {
  "RelayEdge"
  cursor: String!
  "LegacySearchHitsEdge"
  node: LegacyResult
  "Highlights"
  highlight: SearchHighlight
}
type LegacySearchResult {
  hits(
    first: Int
    last: Int
    before: String
    after: String
  ): LegacySearchHitsConnection
}
type LegacyTableBlock {
  html: String!
}
type LineBreakInline {
  type: String
}
type LinkFormat {
  url: String!
  title: String!
}
"An interface for getting just the id and url of any type that them"
interface Linkable {
  id: ID!
  url: String!
}
type List implements Published & Linkable & Node {
  stream: String!
  name: String!
  highlights: [CreativeWork]!
  sourceApplication: String!
  firstPublished: DateTime
  url: String!
  lastModified: DateTime
  sourcePublisher: String!
  uri: String!
  "The unique identifier of the event."
  eventId: String
  shortUrl: String!
  id: ID!
  type: String!
  sourceId: String!
  previouslyPublishedUrls: [String!]!
  lastMajorModification: DateTime
}
type ListBlock {
  style: Style!
  content: [ListItemBlock]!
}
type ListItemBlock {
  content: [ListItemBlockContent]!
}
union ListItemBlockContent = ParagraphBlock | ListBlock
type Lists {
  trending: AggregatedList
    @deprecated(reason: "Use mostPopularAssets with TRENDING criteria instead")
  timesWire(
    first: Int
    last: Int
    before: String
    after: String
    criteria: TimesWireFetchCriteria
  ): AssetsConnection
  "Deprecated - Use mostPopularAssets instead\n\nAs of now, this is not a paginated list.  The return of an AssetConnection is\nto ensure no breaking changes if pagination is implemented.\n\nDefaults to MostPopularType of VIEWED"
  mostPopular(criteria: MostPopularCriteria): AssetsConnection
    @deprecated(reason: "Use mostPopularAssets instead")
  "As of now, this is not a paginated list.  The return of a custom MostPopularAssetConnection is\nto ensure no breaking changes if pagination is implemented.\n\nDefaults to MostPopularType of VIEWED"
  mostPopularAssets(criteria: MostPopularCriteria): MostPopularAssetsConnection
  "A personalized list of content given a personalization list uri This field or object is personalized by optional user cookies - including any anonymous user cookies."
  personalizedList(
    first: Int
    last: Int
    before: String
    after: String
    "The NYT uri of the personalized list, e.g.\nnyt://per/personalized-list/home-living.\n\nCheck with personalization for available uris"
    listUri: PersonalizedListUri!
    "Additional context to be provided for personalizing the list"
    personalizedListContext: PersonalizedListContext
  ): PersonalizedItemsConnection
}
type Location implements Published & TimesTag & Linkable & Node {
  previousNames: [PreviousName]!
  geoDetails: LocationGeoDetails
  contactPoint: ContactDetails
  displayName: String!
  sourceApplication: String!
  userAdded: Boolean!
  firstPublished: DateTime
  url: String!
  lastModified: DateTime
  description: String!
  linkedData: [TimesTagLinkedData]!
  sourcePublisher: String!
  uri: String!
  slug: String!
  "The unique identifier of the event."
  eventId: String
  shortUrl: String!
  taggingRules: [TimesTagTaggingRule]!
  id: ID!
  "\n Any returned types that do not match an expected GQL type on this field will be filtered out,\n with null being returned instead.\n                    "
  promotionalMedia: TimesTagPromotionalMedia
  vernacular: String!
  type: String!
  isAdvertisingBrandSensitive: Boolean!
  sourceId: String!
  previouslyPublishedUrls: [String!]!
  lastMajorModification: DateTime
}
type LocationGeoCoordinates {
  longitude: Float!
  latitude: Float!
}
type LocationGeoDetails {
  timezone: String!
  population: Int
  geoPolygon: [LocationGeoCoordinates]!
  geoNameId: Int!
  geoCoordinates: LocationGeoCoordinates
  featureClass: String!
  elevation: Float
  countryCode: String!
  admin4Code: String!
  admin3Code: String!
  admin2Code: String!
  admin1Code: String!
}
"Categories representing the price of a location"
enum LocationPriceCategory {
  UNKNOWN
  INEXPENSIVE
  MODERATE
  EXPENSIVE
  VERY_EXPENSIVE
}
"LocationRecommendationBlock is an Oak block created for CityGuides to provide recommendations of locations"
type LocationRecommendationBlock {
  "Location being recommended"
  location: Location!
  "Title of the recommendation"
  title: String!
  "Reference to Image media"
  image: Image
  "Short description of the place being recommended"
  shortDescription: [InlineUnion]!
  "Text content of the recommendation"
  content: [ParagraphBlock]!
  "Price category of the place being recommended"
  price: LocationPriceCategory!
  "Content relating to the recommendation"
  relatedContent: [HasPromotionalProperties]!
}
enum MastheadStyle {
  STANDARD
  TRANSPARENT_MASTHEAD_BLACK_ICONS
  TRANSPARENT_MASTHEAD_WHITE_ICONS
}
enum MediaEmphasis {
  NONE
  MEDIUM
  MAXIMUM
}
type Misspell implements Published & TimesTag & Linkable & Node {
  misspellType: String
  displayName: String!
  sourceApplication: String!
  userAdded: Boolean!
  firstPublished: DateTime
  url: String!
  lastModified: DateTime
  description: String!
  linkedData: [TimesTagLinkedData]!
  sourcePublisher: String!
  uri: String!
  slug: String!
  "The unique identifier of the event."
  eventId: String
  shortUrl: String!
  taggingRules: [TimesTagTaggingRule]!
  id: ID!
  "\n Any returned types that do not match an expected GQL type on this field will be filtered out,\n with null being returned instead.\n                    "
  promotionalMedia: TimesTagPromotionalMedia
  vernacular: String!
  type: String!
  isAdvertisingBrandSensitive: Boolean!
  sourceId: String!
  previouslyPublishedUrls: [String!]!
  lastMajorModification: DateTime
}
enum MobileHeaderFullBleedTextPosition {
  MOBILE_BELOW_LEDE
  MOBILE_BOTTOM_LEFT
}
type MostPopularAssetsConnection implements RelayConnection {
  edges: [MostPopularAssetsEdge]
  pageInfo: PageInfo!
  "Not part of the Relay Connection spec.  This is a custom and optional extension"
  totalCount: Int
}
type MostPopularAssetsEdge implements RelayEdge {
  node: HasPromotionalProperties
  label: String!
  cursor: String!
}
input MostPopularCriteria {
  popularType: MostPopularType
}
enum MostPopularType {
  VIEWED
  VIDEOS
  FACEBOOK
  EMAILED
  RECIPES
  TRENDING
}
"A representation of movie data from IMDB"
type Movie implements Published {
  "Movie ID on www.imdb.com"
  imdbId: String!
  "The title of the movie"
  title: String!
  "The year the movie was released"
  year: Int!
  "List of the movie directors"
  directors: [String!]!
  "List of movie writers"
  writers: [String!]!
  "The movie cast"
  cast: [MovieCastMember!]!
  "The IMDB movie rating"
  rating: String!
  "The running time of the movie in US - in minutes"
  runtimeUS: Int!
  "List of associated genres"
  genres: [String!]!
  "Release date in the US ('January 2, 2006'), might be incomplete ('1974' or\n'June 1969')"
  releaseDateUS: String!
  "URL of showtimes page"
  ticketUrl: String!
  sourceApplication: String!
  firstPublished: DateTime
  url: String!
  lastModified: DateTime
  sourcePublisher: String!
  uri: String!
  "The unique identifier of the event."
  eventId: String
  shortUrl: String!
  type: String!
  sourceId: String!
  previouslyPublishedUrls: [String!]!
  lastMajorModification: DateTime
}
"Description of the cast members in a movie"
type MovieCastMember {
  "Actor's name"
  actor: String!
  "Character played by the actor"
  character: String!
}
input MovieFacets {
  "e.g., G, PG, PG-13, R, NC-17"
  rating: String
  "e.g., Comedy, Documentary, Thriller"
  genre: String
  "search term"
  text: String
  isCriticsPick: Boolean
  "desc (default) or asc only. Sorts by review date"
  sortOrder: ReviewsSortOrder = DESC
}
type Movies {
  "search movie reviews. first must be a multiple of 10; default is 10.\nbackwards pagination is disabled."
  search(
    first: Int
    last: Int
    before: String
    after: String
    facets: MovieFacets
  ): ReviewsAssetsConnection
  "genres enabled in MovieFacets"
  genres: [NonEmptyString!]
}
"A Block that contains other specified blocks excluding the `MultiListBlock_Beta` type."
type MultiListBlock_Beta implements BlockInterface_beta & Node {
  "A connection of the block objects."
  blocks(
    first: Int
    last: Int
    before: String
    after: String
  ): ProgramContentBlockConnection_Beta
  "Whether or not to show the title of the block in the UI"
  showTitle: Boolean
  "The style of block"
  style: BlockStyle_Beta
    @deprecated(reason: "No longer used for featured / standard styles")
  "Whether or not to offer a show more UI element"
  showMore: Boolean!
    @deprecated(reason: "Frontend blocks no longer support show more")
  "Whether or not to show the section a block is associated with in the UI"
  showSection: Boolean
  id: ID!
  "The internal id of the block"
  dataId: String!
  "If not null, the block will display a link to this url"
  link: String
  "The template name used to render the block"
  template: String
  "The tone of the block"
  tone: BlockTone_Beta
  "The title of the block"
  title: String
  "Minimum assets threshold in a block"
  initialLoad: Int
}
type Mutation {
  "mutation to support changing which channels a user follows. the return type\nrepresents success or failure This field or object is personalized by optional user cookies for logged in users."
  updateFollowStatus(
    user: UserIdentifier
    urisToFollow: [String!]
    urisToUnfollow: [String!]
  ): Boolean
  "Redeem a gift code.  UserIdentifier can be specified or provided via the request context (cookies, headers, etc) This field or object is personalized by optional user cookies for logged in users."
  redeemGiftCode(
    code: NonEmptyString!
    campaignId: String
    user: UserIdentifier
  ): GiftRedemptionResult!
  "This field or object is personalized by optional user cookies - including any anonymous user cookies. This field or object is personalized by the caller IP address."
  createNewsletterSubscription(
    input: CreateNewsletterSubscriptionInput!
    user: UserIdentifier
  ): CreateNewsletterSubscriptionResult
  "Update a User's privacy option selection. The User can be identified from: the `userIdentifier` of the `UpdateUserPrivacyPrefsInput` input,\nor the NYT-S cookie, or the NYT-User-Token header. This field or object is personalized by optional user cookies - including any anonymous user cookies."
  updateUserPrivacyPrefs(
    input: UpdateUserPrivacyPrefsInput!
  ): UserPrivacyPrefsUpdateResult
  "This field or object is personalized by optional user cookies for logged in users."
  addToReadingList(input: ReadingListMutation!): ReadingListMutationResult
  "This field or object is personalized by optional user cookies for logged in users."
  removeFromReadingList(input: ReadingListMutation!): ReadingListMutationResult
  "Mutation that creates and subscribes the user to a custom The Headlines newsletter.\nThe return type represents success or failure. This field or object is personalized by optional user cookies for logged in users."
  subscribeToTheHeadlinesNewsletter(
    userIdentifier: UserIdentifier
  ): SubscribeToTheHeadlinesResult
  "Mutation that updates when the user first sees an upsell offer. This field or object is personalized by optional user cookies for logged in users."
  updateUpsellOfferStatus(
    userIdentifier: UserIdentifier
    hasSeenUpsell: Boolean
  ): UpsellOfferResult
}
type Neighborhood {
  "the borough a neighborhood is in"
  borough: String
  "the neighborhood a restaurant is in"
  neighborhood: NonEmptyString!
}
type NewsAlert implements Published {
  types: NewsAlertAlertTypes
  tweetText: String!
  tweetDoesNotIncludeUrl: Boolean!
  overrideUrl: String!
  kicker: String!
  htmlEmailBody: String!
  headline: String!
  fullCoverage: CreativeWork
  emailSubject: String!
  channels: NewsAlertChannels
  advertisingProperties: CreativeWorkAdvertisingProperties
  sourceApplication: String!
  firstPublished: DateTime
  url: String!
  lastModified: DateTime
  sourcePublisher: String!
  uri: String!
  "The unique identifier of the event."
  eventId: String
  shortUrl: String!
  type: String!
  sourceId: String!
  previouslyPublishedUrls: [String!]!
  lastMajorModification: DateTime
}
type NewsAlertAlertTypes {
  vr: Boolean!
  topStories: Boolean!
  sports: Boolean!
  politics: Boolean!
  opinion: Boolean!
  olympics: Boolean!
  newYork: Boolean!
  liveVideo: Boolean!
  dealbook: Boolean!
  businessAndTech: Boolean!
  breakingNews: Boolean!
}
type NewsAlertChannels {
  web: Boolean!
  twitter: Boolean!
  mobile: Boolean!
  email: Boolean!
}
enum NewsStatusType {
  DEFAULT
  LIVE
  BREAKING
  DEVELOPING
}
type Newsletter {
  code: String!
  headline: String!
  summary: String!
  thumbUrl: String
}
"metadata about a newsletter"
type NewsletterConfig implements Node {
  "string-based unique identifier for a newsletter"
  newsletterId: String!
  "the uri of the newsletter, e.g., www.nytimes.com/newsletters/{slug}"
  slug: String!
  "the title of the newsletter"
  title: NonEmptyString
  "the caption description of a newsletter displayed on the signup and splash\npages"
  caption: NonEmptyString
  "SEO text for thumbnail images on newsletter splash page"
  altText: NonEmptyString
  "url showing some of the latest issues of the newsletter"
  sampleUrl: NonEmptyString
  "image URL of a newsletter intended for display on the newsletter's signup\npage"
  figureImageUrl: NonEmptyString
  "If exists, the image of the Newsletter Title on the signup page"
  titleImage: NonEmptyString
  "Newsletter title text if titleImage does not exist"
  altTextLogo: NonEmptyString
  "key for the CSS value of the title font if titleImage does not exist"
  titleFont: String!
  "frequency of newsletter issues (e.g., 'SUNDAY - FRIDAY')"
  frequency: NonEmptyString
  "url for newsletter thumbnail image for use on the signup page"
  thumbImageUrl: NonEmptyString
  id: ID!
}
"a newsletter-specific section that one or more newsletters can belong to"
type NewsletterSection {
  "the name of the newsletterSection"
  name: String
  "unique ID of the section for event tracking"
  version: String
}
"a newsletter section and all the newsletterConfigs that belong to that\nsection"
type NewsletterSectionConfig {
  "the section that each of the newsletterConfigs belongs to"
  newsletterSection: NewsletterSection
  "newsletter metadata"
  newsletterConfigs: [NewsletterConfig]!
}
interface Node {
  id: ID!
}
scalar NonEmptyString
type Organization implements Published & TimesTag & Linkable & Node {
  tickerSymbols: [OrganizationTickerSymbol]!
  previousNames: [PreviousName]!
  contactDetails: ContactDetails
  displayName: String!
  sourceApplication: String!
  userAdded: Boolean!
  firstPublished: DateTime
  url: String!
  lastModified: DateTime
  description: String!
  linkedData: [TimesTagLinkedData]!
  sourcePublisher: String!
  uri: String!
  slug: String!
  "The unique identifier of the event."
  eventId: String
  shortUrl: String!
  taggingRules: [TimesTagTaggingRule]!
  id: ID!
  "\n Any returned types that do not match an expected GQL type on this field will be filtered out,\n with null being returned instead.\n                    "
  promotionalMedia: TimesTagPromotionalMedia
  vernacular: String!
  type: String!
  isAdvertisingBrandSensitive: Boolean!
  sourceId: String!
  previouslyPublishedUrls: [String!]!
  lastMajorModification: DateTime
}
type OrganizationTickerSymbol {
  symbol: String!
  exchange: String!
}
type Package implements Published & HasPromotionalProperties & Linkable & Node {
  name: String!
  displayStyle: DisplayStyleType!
  assets: [HasPromotionalProperties]!
  assetDisplayOptions: [PackageAssetDisplayOptions]!
  "A list of promotional variants representing the multiple promotional\nproperties associated with the Package."
  promotions: [PromotionalVariant!]!
  sourceApplication: String!
  "An alternate summary in the form of a bulleted list, tailored for the\nhomepage."
  promotionalBullets: [String!]!
  newsStatus: NewsStatusType!
  firstPublished: DateTime
  url: String!
  lastModified: DateTime
  sourcePublisher: String!
  uri: String!
  "An additional piece of metadata for cards that the news desk uses to capture\nsentence renditions."
  oneLine: String!
  "A summary specially tailored for the homepage."
  promotionalSummary: String!
  "The unique identifier of the event."
  eventId: String
  shortUrl: String!
  "A banner displayed across the top an individual article/video/interactive or\npackage to allow the news desk to give extra emphasis to high-priority\ncoverage."
  banner: String!
  "A headline specially tailored for the homepage."
  promotionalHeadline: String!
  id: ID!
  "The multimedia that should be used to promote the story."
  promotionalMedia: PromotionalPropertiesMedia
  "MediaEmphasis can be influenced by cardType depending on the page layout.\n\nThis is business logic currently applied only by Samizdat, but could live on the Pipeline in the future.\n\nIf layout is not provided, the value is the mediaEmphasis from\npromotionalProperties.mediaEmphasis.\n\nIf layout is provided, and the layout value is\n  SMALL: Always force a MediaEmphasis of 'NONE' for TEXT cardTypes or\n         'MAXIMUM' for all others.\n  Anything else: Return the promotionalProperties.mediaEmphasis value"
  promotionalMediaEmphasis(layout: ProgramLayoutSize): MediaEmphasis!
  type: String!
  "An excerpt specially tailored for the homepage."
  promotionalExcerpt: String!
  card: CardUnion
  cardType: CardType!
  sourceId: String!
  previouslyPublishedUrls: [String!]!
  lastMajorModification: DateTime
}
type PackageAssetDisplayOptions {
  displayFields: [String]!
}
type Page implements Published & CreativeWork & Linkable & Node {
  text: String!
  template: String!
  regions: [PageRegion]!
  displayBreadcrumb: Boolean!
  disallowIndexing: Boolean!
  categories: [PageCategory]!
  headline: CreativeWorkHeadline
  "Derived field determined by ad-tech rules based on the asset's section and\nsubsection"
  dfpTaxonomyException: String
  sourceApplication: String!
  standout: Boolean!
  source: Organization
  commentStatus: CommentStatus!
    @deprecated(reason: "Use commentProperties.status instead")
  personalizationProperties: PersonalizationProperties
  firstPublished: DateTime
  url: String!
  typeOfMaterials: [String!]!
  addendums: [CreativeWorkAddendum]!
  lastModified: DateTime
  "Derived field defining ad parameters to send along with DFP request"
  adTargetingParams(clientAdParams: ClientAdParams!): [AdTargetingParam]
  sourcePublisher: String!
  uri: String!
  "An array of LegacyCollections associated with a particular work.\n\nCan be filtered by either name, type, or both. Name filtering allows for partial prefix\nmatching (i.e. an input of 'match-box-' will return both 'match-box-20' and 'match-box-30') \n Any returned types that do not match an expected GQL type on this field will be filtered out,\n with null being returned instead.\n                    "
  collections(name: String, type: CollectionType): [LegacyCollection]!
  "Person/Organizations with specific roles in creating the asset.\n\nUnlike 'bylines', this field represents the most current data available (i.e.\nNOT a snapshot)"
  credits: [Credit]!
  kicker: String!
  slug: String!
  desk: String!
  section: Section
  "The unique identifier of the event."
  eventId: String
  shortUrl: String!
  firstReportedAtURL: String!
  originalDesk: String!
  id: ID!
  commentProperties: CreativeWorkCommentProperties!
  "A list of related creative works.  \n Any returned types that do not match an expected GQL type on this field will be filtered out,\n with null being returned instead.\n                     The results are limited to the first 20 elements returned."
  related: [HasPromotionalProperties]!
  language: Language
  "Derived field determined to be the first collection in the collections list\nof type Column"
  column: LegacyCollection
  tone: Tone!
  followChannels: [ChannelMetadata]
  type: String!
  displayProperties: CreativeWorkDisplayProperties
  timesTags: [TimesTag]!
  subsection: Section
  advertisingProperties: CreativeWorkAdvertisingProperties
  "A snapshot of creator data at the time this CreativeWork is last published.\n\nSince it is a snapshot, it will NOT reflect any changes to the underlying\ndata after the CreativeWork is published."
  bylines: [Byline]!
  summary: String!
  sourceId: String!
  previouslyPublishedUrls: [String!]!
  "The full TZ name from the tzdata database, e.g. 'America/New_York', as set by\nthe editor in Scoop, for the timezone most relevant for the content"
  contentTimezoneName: String
  lastMajorModification: DateTime
  "Timezone offset string based on the publicationProperties.firstPublished and\ncreativeWork.contentTimezoneName fields formatted as: '+00:00, -00:00'."
  firstPublishedTimezoneOffset: String
}
type PageCategory {
  name: String!
  description: String!
}
type PageCollection {
  renderStyle: String!
  kicker: String!
  excludeFromWeb: Boolean!
  excludeFromFeed: Boolean!
  asset: [CreativeWork]!
}
type PageInfo {
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String
  endCursor: String
}
type PageRegion {
  name: String!
  collections: [PageCollection]!
}
type PaidPost implements Published & CreativeWork & HasPromotionalProperties & Linkable & Node {
  paidpostType: String!
  logoUrl: String!
  keywords: String!
  jsOverride: String!
  imageUrl: String!
  freeformBody: String!
  cssOverride: String!
  campaign: String!
  body: DocumentBlock
  advertiserUrl: String!
  advertiser: String!
  headline: CreativeWorkHeadline
  "Derived field determined by ad-tech rules based on the asset's section and\nsubsection"
  dfpTaxonomyException: String
  sourceApplication: String!
  standout: Boolean!
  source: Organization
  commentStatus: CommentStatus!
    @deprecated(reason: "Use commentProperties.status instead")
  personalizationProperties: PersonalizationProperties
  "An alternate summary in the form of a bulleted list, tailored for the\nhomepage."
  promotionalBullets: [String!]!
  newsStatus: NewsStatusType!
  firstPublished: DateTime
  url: String!
  typeOfMaterials: [String!]!
  addendums: [CreativeWorkAddendum]!
  lastModified: DateTime
  "Derived field defining ad parameters to send along with DFP request"
  adTargetingParams(clientAdParams: ClientAdParams!): [AdTargetingParam]
  sourcePublisher: String!
  uri: String!
  "An array of LegacyCollections associated with a particular work.\n\nCan be filtered by either name, type, or both. Name filtering allows for partial prefix\nmatching (i.e. an input of 'match-box-' will return both 'match-box-20' and 'match-box-30') \n Any returned types that do not match an expected GQL type on this field will be filtered out,\n with null being returned instead.\n                    "
  collections(name: String, type: CollectionType): [LegacyCollection]!
  "Person/Organizations with specific roles in creating the asset.\n\nUnlike 'bylines', this field represents the most current data available (i.e.\nNOT a snapshot)"
  credits: [Credit]!
  "An additional piece of metadata for cards that the news desk uses to capture\nsentence renditions."
  oneLine: String!
  kicker: String!
  "A summary specially tailored for the homepage."
  promotionalSummary: String!
  slug: String!
  desk: String!
  section: Section
  "The unique identifier of the event."
  eventId: String
  shortUrl: String!
  "A banner displayed across the top an individual article/video/interactive or\npackage to allow the news desk to give extra emphasis to high-priority\ncoverage."
  banner: String!
  "A headline specially tailored for the homepage."
  promotionalHeadline: String!
  firstReportedAtURL: String!
  originalDesk: String!
  id: ID!
  commentProperties: CreativeWorkCommentProperties!
  "A list of related creative works.  \n Any returned types that do not match an expected GQL type on this field will be filtered out,\n with null being returned instead.\n                     The results are limited to the first 20 elements returned."
  related: [HasPromotionalProperties]!
  language: Language
  "The multimedia that should be used to promote the story."
  promotionalMedia: PromotionalPropertiesMedia
  "MediaEmphasis can be influenced by cardType depending on the page layout.\n\nThis is business logic currently applied only by Samizdat, but could live on the Pipeline in the future.\n\nIf layout is not provided, the value is the mediaEmphasis from\npromotionalProperties.mediaEmphasis.\n\nIf layout is provided, and the layout value is\n  SMALL: Always force a MediaEmphasis of 'NONE' for TEXT cardTypes or\n         'MAXIMUM' for all others.\n  Anything else: Return the promotionalProperties.mediaEmphasis value"
  promotionalMediaEmphasis(layout: ProgramLayoutSize): MediaEmphasis!
  "Derived field determined to be the first collection in the collections list\nof type Column"
  column: LegacyCollection
  tone: Tone!
  followChannels: [ChannelMetadata]
  type: String!
  "An excerpt specially tailored for the homepage."
  promotionalExcerpt: String!
  displayProperties: CreativeWorkDisplayProperties
  card: CardUnion
  timesTags: [TimesTag]!
  cardType: CardType!
  subsection: Section
  advertisingProperties: CreativeWorkAdvertisingProperties
  "A snapshot of creator data at the time this CreativeWork is last published.\n\nSince it is a snapshot, it will NOT reflect any changes to the underlying\ndata after the CreativeWork is published."
  bylines: [Byline]!
  summary: String!
  sourceId: String!
  previouslyPublishedUrls: [String!]!
  "The full TZ name from the tzdata database, e.g. 'America/New_York', as set by\nthe editor in Scoop, for the timezone most relevant for the content"
  contentTimezoneName: String
  lastMajorModification: DateTime
  "Timezone offset string based on the publicationProperties.firstPublished and\ncreativeWork.contentTimezoneName fields formatted as: '+00:00, -00:00'."
  firstPublishedTimezoneOffset: String
}
type ParagraphBlock {
  textAlign: Align!
  content: [InlineUnion]!
}
"A stripped down copy of the Article type. The purpose of this type is to allow the publishing pipeline to ignore articles of this type but still allow the parenting app to retrieve them from samizdat."
type ParentingArticle implements Published & CreativeWork & HasPromotionalProperties & Node {
  "The document body."
  body: DocumentBlock
  headline: CreativeWorkHeadline
  "Derived field determined by ad-tech rules based on the asset's section and\nsubsection"
  dfpTaxonomyException: String
  sourceApplication: String!
  standout: Boolean!
  source: Organization
  commentStatus: CommentStatus!
    @deprecated(reason: "Use commentProperties.status instead")
  personalizationProperties: PersonalizationProperties
  "An alternate summary in the form of a bulleted list, tailored for the\nhomepage."
  promotionalBullets: [String!]!
  newsStatus: NewsStatusType!
  firstPublished: DateTime
  url: String!
  typeOfMaterials: [String!]!
  addendums: [CreativeWorkAddendum]!
  lastModified: DateTime
  "Derived field defining ad parameters to send along with DFP request"
  adTargetingParams(clientAdParams: ClientAdParams!): [AdTargetingParam]
  sourcePublisher: String!
  uri: String!
  "An array of LegacyCollections associated with a particular work.\n\nCan be filtered by either name, type, or both. Name filtering allows for partial prefix\nmatching (i.e. an input of 'match-box-' will return both 'match-box-20' and 'match-box-30') \n Any returned types that do not match an expected GQL type on this field will be filtered out,\n with null being returned instead.\n                    "
  collections(name: String, type: CollectionType): [LegacyCollection]!
  "Person/Organizations with specific roles in creating the asset.\n\nUnlike 'bylines', this field represents the most current data available (i.e.\nNOT a snapshot)"
  credits: [Credit]!
  "An additional piece of metadata for cards that the news desk uses to capture\nsentence renditions."
  oneLine: String!
  kicker: String!
  "A summary specially tailored for the homepage."
  promotionalSummary: String!
  slug: String!
  desk: String!
  section: Section
  "The unique identifier of the event."
  eventId: String
  shortUrl: String!
  "A banner displayed across the top an individual article/video/interactive or\npackage to allow the news desk to give extra emphasis to high-priority\ncoverage."
  banner: String!
  "A headline specially tailored for the homepage."
  promotionalHeadline: String!
  firstReportedAtURL: String!
  originalDesk: String!
  id: ID!
  commentProperties: CreativeWorkCommentProperties!
  "A list of related creative works.  \n Any returned types that do not match an expected GQL type on this field will be filtered out,\n with null being returned instead.\n                     The results are limited to the first 20 elements returned."
  related: [HasPromotionalProperties]!
  language: Language
  "The multimedia that should be used to promote the story."
  promotionalMedia: PromotionalPropertiesMedia
  "MediaEmphasis can be influenced by cardType depending on the page layout.\n\nThis is business logic currently applied only by Samizdat, but could live on the Pipeline in the future.\n\nIf layout is not provided, the value is the mediaEmphasis from\npromotionalProperties.mediaEmphasis.\n\nIf layout is provided, and the layout value is\n  SMALL: Always force a MediaEmphasis of 'NONE' for TEXT cardTypes or\n         'MAXIMUM' for all others.\n  Anything else: Return the promotionalProperties.mediaEmphasis value"
  promotionalMediaEmphasis(layout: ProgramLayoutSize): MediaEmphasis!
  "Derived field determined to be the first collection in the collections list\nof type Column"
  column: LegacyCollection
  tone: Tone!
  followChannels: [ChannelMetadata]
  type: String!
  "An excerpt specially tailored for the homepage."
  promotionalExcerpt: String!
  displayProperties: CreativeWorkDisplayProperties
  card: CardUnion
  timesTags: [TimesTag]!
  cardType: CardType!
  subsection: Section
  advertisingProperties: CreativeWorkAdvertisingProperties
  "A snapshot of creator data at the time this CreativeWork is last published.\n\nSince it is a snapshot, it will NOT reflect any changes to the underlying\ndata after the CreativeWork is published."
  bylines: [Byline]!
  summary: String!
  sourceId: String!
  previouslyPublishedUrls: [String!]!
  "The full TZ name from the tzdata database, e.g. 'America/New_York', as set by\nthe editor in Scoop, for the timezone most relevant for the content"
  contentTimezoneName: String
  lastMajorModification: DateTime
  "Timezone offset string based on the publicationProperties.firstPublished and\ncreativeWork.contentTimezoneName fields formatted as: '+00:00, -00:00'."
  firstPublishedTimezoneOffset: String
}
type Person implements Published & TimesTag & Linkable & Node & Collection {
  "A manually placed URL that the newsroom decides a person's name should link to"
  bioUrl: String!
  title: String!
  retiredNames: [PreviousName]!
  honorificSuffix: String!
  honorificPrefix: String!
  givenName: String!
  familyName: String!
  contactDetails: ContactDetails
  additionalNames: [String!]!
  legacyData: PersonLegacyData
  "Whether this person can receive emails from readers. Only applies to Persons that are content authors. This will enable an 'Email Author' link on a byline page"
  publiclyEmailable: Boolean!
  displayName: String!
  "Ranked assets in the collection"
  highlights(
    first: Int
    last: Int
    before: String
    after: String
  ): AssetsConnection
  sourceApplication: String!
  "Highlights and stream concatenated into one logical list, first param is\ndefaulted to 10"
  assets(first: Int, last: Int, before: String, after: String): AssetsConnection
  userAdded: Boolean!
  firstPublished: DateTime
  url: String!
  lastModified: DateTime
  description: String!
  linkedData: [TimesTagLinkedData]!
  sourcePublisher: String!
  uri: String!
  slug: String!
  "The unique identifier of the event."
  eventId: String
  shortUrl: String!
  taggingRules: [TimesTagTaggingRule]!
  id: ID!
  "a list of assets determined by some inherent criteria"
  stream(
    first: Int
    last: Int
    before: String
    after: String
    query: SearchQuery
    exclusionMode: StreamExclusionMode = HIGHLIGHTS_AND_EMBEDDED
  ): AssetsConnection
  "\n Any returned types that do not match an expected GQL type on this field will be filtered out,\n with null being returned instead.\n                    "
  promotionalMedia: TimesTagPromotionalMedia
  vernacular: String!
  type: String!
  isAdvertisingBrandSensitive: Boolean!
  sourceId: String!
  previouslyPublishedUrls: [String!]!
  lastMajorModification: DateTime
}
type PersonLegacyData {
  htmlBiography: String!
  htmlShortBiography: String!
}
"The set of values clients can specify as inputs for personalized lists that\ncorrespond to applications"
enum PersonalizationAppType {
  "a web application"
  WEB
  "a native application"
  NATIVE
}
"The set of values clients can specify as inputs for personalized lists that\ncorrespond to devices"
enum PersonalizationDeviceType {
  "A desktop device"
  DESKTOP
  "Any mobile device"
  MOBILE
}
type PersonalizationProperties {
  audienceTargets: [PersonalizationPropertiesAudienceTarget]!
}
type PersonalizationPropertiesAudienceTarget {
  value: String!
  type: String!
  priority: Int
}
"A block that contains items personalized on a one to one basis.  Clients should\nnot query for assets along side other cacheable blocks in the moreProgrammables\nquery but rather fetch these via a node query after the initial\nmoreProgrammables load"
type PersonalizedBlock_Beta implements BlockInterface_beta & Node {
  "The URI of the list to be used for resolving connections"
  dataSource: String
  "The connection of asset to load first; its maximum size is controlled via the\nblocks' configuration in the program.\n\nClients will usually not provide any pagination parameters so they can get\nthe entire list in one shot. This field or object is personalized by optional user cookies - including any anonymous user cookies."
  assets(
    first: Int
    last: Int
    before: String
    after: String
    personalizedListContext: PersonalizedListContext
  ): PersonalizedItemsConnection
  "Whether or not to show the title of the block in the UI"
  showTitle: Boolean
  "The style of block"
  style: BlockStyle_Beta
    @deprecated(reason: "No longer used for featured / standard styles")
  "Whether or not to offer a show more UI element"
  showMore: Boolean!
    @deprecated(reason: "Frontend blocks no longer support show more")
  "Whether or not to show the section a block is associated with in the UI"
  showSection: Boolean
  id: ID!
  "The internal id of the block"
  dataId: String!
  "If not null, the block will display a link to this url"
  link: String
  "The template name used to render the block"
  template: String
  "The tone of the block"
  tone: BlockTone_Beta
  "The title of the block"
  title: String
  "Minimum assets threshold in a block"
  initialLoad: Int
}
"Any item that can be returned by a personalization endpoint, including\npublished assets; in the future, it may include marketing assets and/or\nnewsletter subscription modules."
union PersonalizedItem =
    Capsule
  | Image
  | Video
  | Playlist
  | LegacyCollection
  | Audio
  | Slideshow
  | Interactive
  | EmbeddedInteractive
  | Article
  | Promo
  | PaidPost
  | ParentingArticle
  | CityGuide
  | Guide
  | Package
  | Recipe
  | Podcast
  | WatchingRecommendation
"A connection for accessing a personalized list of entities"
type PersonalizedItemsConnection implements RelayConnection {
  "The list of edges in the current page of the connection"
  edges: [PersonalizedItemsEdge]
  pageInfo: PageInfo!
  "Not part of the Relay Connection spec.  This is a custom and optional extension"
  totalCount: Int
}
"The edge to be returned in a personalized list connection"
type PersonalizedItemsEdge implements RelayEdge {
  "The individual item in the current page of the connection"
  node: PersonalizedItem
  "A list of key/value pairs that should be used for reporting purposes"
  trackingParams: [TrackingParam]
  cursor: String!
}
"Additional input parameters to be passed to personalization to feed the\nalgorithms"
input PersonalizedListContext {
  "The NYT uri or url of view to be displaying the requested list"
  referrer: String
  "The NYT uri or url of the view immediately preceding the view displaying the\nrequested list"
  originalReferrer: String
  "The device type displaying the list"
  deviceType: PersonalizationDeviceType
  "The application type displaying the list"
  appType: PersonalizationAppType
  "The NYT uri of the asset from which recommendations should be based on."
  assetUri: String
}
scalar PersonalizedListUri
enum PhoneType {
  MAIN
  MOBILE
  HOME
  WORK
  MAIN_FAX
  WORK_FAX
  OTHER_FAX
  PAGER
}
enum Platform {
  NOT_SET
  ANDROID
  IOS
}
type Playlist implements Published & CreativeWork & HasPromotionalProperties & Linkable & Node {
  videos(first: Int, last: Int, before: String, after: String): VideosConnection
  template: String!
  socialImage: Image
  icon: Image
  headerImage: Image
  branded: Boolean!
  headline: CreativeWorkHeadline
  "Derived field determined by ad-tech rules based on the asset's section and\nsubsection"
  dfpTaxonomyException: String
  sourceApplication: String!
  standout: Boolean!
  source: Organization
  commentStatus: CommentStatus!
    @deprecated(reason: "Use commentProperties.status instead")
  personalizationProperties: PersonalizationProperties
  "An alternate summary in the form of a bulleted list, tailored for the\nhomepage."
  promotionalBullets: [String!]!
  newsStatus: NewsStatusType!
  firstPublished: DateTime
  url: String!
  typeOfMaterials: [String!]!
  addendums: [CreativeWorkAddendum]!
  lastModified: DateTime
  "Derived field defining ad parameters to send along with DFP request"
  adTargetingParams(clientAdParams: ClientAdParams!): [AdTargetingParam]
  sourcePublisher: String!
  uri: String!
  "An array of LegacyCollections associated with a particular work.\n\nCan be filtered by either name, type, or both. Name filtering allows for partial prefix\nmatching (i.e. an input of 'match-box-' will return both 'match-box-20' and 'match-box-30') \n Any returned types that do not match an expected GQL type on this field will be filtered out,\n with null being returned instead.\n                    "
  collections(name: String, type: CollectionType): [LegacyCollection]!
  "Person/Organizations with specific roles in creating the asset.\n\nUnlike 'bylines', this field represents the most current data available (i.e.\nNOT a snapshot)"
  credits: [Credit]!
  "An additional piece of metadata for cards that the news desk uses to capture\nsentence renditions."
  oneLine: String!
  kicker: String!
  "A summary specially tailored for the homepage."
  promotionalSummary: String!
  slug: String!
  desk: String!
  section: Section
  "The unique identifier of the event."
  eventId: String
  shortUrl: String!
  "A banner displayed across the top an individual article/video/interactive or\npackage to allow the news desk to give extra emphasis to high-priority\ncoverage."
  banner: String!
  "A headline specially tailored for the homepage."
  promotionalHeadline: String!
  firstReportedAtURL: String!
  originalDesk: String!
  id: ID!
  commentProperties: CreativeWorkCommentProperties!
  "A list of related creative works.  \n Any returned types that do not match an expected GQL type on this field will be filtered out,\n with null being returned instead.\n                     The results are limited to the first 20 elements returned."
  related: [HasPromotionalProperties]!
  language: Language
  "The multimedia that should be used to promote the story."
  promotionalMedia: PromotionalPropertiesMedia
  "MediaEmphasis can be influenced by cardType depending on the page layout.\n\nThis is business logic currently applied only by Samizdat, but could live on the Pipeline in the future.\n\nIf layout is not provided, the value is the mediaEmphasis from\npromotionalProperties.mediaEmphasis.\n\nIf layout is provided, and the layout value is\n  SMALL: Always force a MediaEmphasis of 'NONE' for TEXT cardTypes or\n         'MAXIMUM' for all others.\n  Anything else: Return the promotionalProperties.mediaEmphasis value"
  promotionalMediaEmphasis(layout: ProgramLayoutSize): MediaEmphasis!
  "Derived field determined to be the first collection in the collections list\nof type Column"
  column: LegacyCollection
  tone: Tone!
  followChannels: [ChannelMetadata]
  type: String!
  "An excerpt specially tailored for the homepage."
  promotionalExcerpt: String!
  displayProperties: CreativeWorkDisplayProperties
  card: CardUnion
  timesTags: [TimesTag]!
  cardType: CardType!
  subsection: Section
  advertisingProperties: CreativeWorkAdvertisingProperties
  "A snapshot of creator data at the time this CreativeWork is last published.\n\nSince it is a snapshot, it will NOT reflect any changes to the underlying\ndata after the CreativeWork is published."
  bylines: [Byline]!
  summary: String!
  sourceId: String!
  previouslyPublishedUrls: [String!]!
  "The full TZ name from the tzdata database, e.g. 'America/New_York', as set by\nthe editor in Scoop, for the timezone most relevant for the content"
  contentTimezoneName: String
  lastMajorModification: DateTime
  "Timezone offset string based on the publicationProperties.firstPublished and\ncreativeWork.contentTimezoneName fields formatted as: '+00:00, -00:00'."
  firstPublishedTimezoneOffset: String
}
"The metadata that defines a podcast plus the list of episodes"
type Podcast implements Collection & Published & HasPromotionalProperties & CreativeWork & Node {
  "URLs that can be used for subscribing to this podcast"
  subscriptionUrls(services: [PodcastService!]): [PodcastSubscriptionUrl!]!
  headline: CreativeWorkHeadline
  "Derived field determined by ad-tech rules based on the asset's section and\nsubsection"
  dfpTaxonomyException: String
  "Ranked assets in the collection"
  highlights(
    first: Int
    last: Int
    before: String
    after: String
  ): AssetsConnection
  sourceApplication: String!
  standout: Boolean!
  source: Organization
  "Highlights and stream concatenated into one logical list, first param is\ndefaulted to 10"
  assets(first: Int, last: Int, before: String, after: String): AssetsConnection
  commentStatus: CommentStatus!
    @deprecated(reason: "Use commentProperties.status instead")
  personalizationProperties: PersonalizationProperties
  "An alternate summary in the form of a bulleted list, tailored for the\nhomepage."
  promotionalBullets: [String!]!
  newsStatus: NewsStatusType!
  firstPublished: DateTime
  url: String!
  typeOfMaterials: [String!]!
  addendums: [CreativeWorkAddendum]!
  lastModified: DateTime
  "Derived field defining ad parameters to send along with DFP request"
  adTargetingParams(clientAdParams: ClientAdParams!): [AdTargetingParam]
  sourcePublisher: String!
  uri: String!
  "An array of LegacyCollections associated with a particular work.\n\nCan be filtered by either name, type, or both. Name filtering allows for partial prefix\nmatching (i.e. an input of 'match-box-' will return both 'match-box-20' and 'match-box-30') \n Any returned types that do not match an expected GQL type on this field will be filtered out,\n with null being returned instead.\n                    "
  collections(name: String, type: CollectionType): [LegacyCollection]!
  "Person/Organizations with specific roles in creating the asset.\n\nUnlike 'bylines', this field represents the most current data available (i.e.\nNOT a snapshot)"
  credits: [Credit]!
  "An additional piece of metadata for cards that the news desk uses to capture\nsentence renditions."
  oneLine: String!
  kicker: String!
  "A summary specially tailored for the homepage."
  promotionalSummary: String!
  slug: String!
  desk: String!
  section: Section
  "The unique identifier of the event."
  eventId: String
  shortUrl: String!
  "A banner displayed across the top an individual article/video/interactive or\npackage to allow the news desk to give extra emphasis to high-priority\ncoverage."
  banner: String!
  "A headline specially tailored for the homepage."
  promotionalHeadline: String!
  firstReportedAtURL: String!
  originalDesk: String!
  id: ID!
  commentProperties: CreativeWorkCommentProperties!
  "A list of related creative works.  \n Any returned types that do not match an expected GQL type on this field will be filtered out,\n with null being returned instead.\n                     The results are limited to the first 20 elements returned."
  related: [HasPromotionalProperties]!
  language: Language
  "a list of assets determined by some inherent criteria"
  stream(
    first: Int
    last: Int
    before: String
    after: String
    query: SearchQuery
    exclusionMode: StreamExclusionMode = HIGHLIGHTS_AND_EMBEDDED
  ): AssetsConnection
  "The multimedia that should be used to promote the story."
  promotionalMedia: PromotionalPropertiesMedia
  "MediaEmphasis can be influenced by cardType depending on the page layout.\n\nThis is business logic currently applied only by Samizdat, but could live on the Pipeline in the future.\n\nIf layout is not provided, the value is the mediaEmphasis from\npromotionalProperties.mediaEmphasis.\n\nIf layout is provided, and the layout value is\n  SMALL: Always force a MediaEmphasis of 'NONE' for TEXT cardTypes or\n         'MAXIMUM' for all others.\n  Anything else: Return the promotionalProperties.mediaEmphasis value"
  promotionalMediaEmphasis(layout: ProgramLayoutSize): MediaEmphasis!
  "Derived field determined to be the first collection in the collections list\nof type Column"
  column: LegacyCollection
  tone: Tone!
  followChannels: [ChannelMetadata]
  type: String!
  "An excerpt specially tailored for the homepage."
  promotionalExcerpt: String!
  displayProperties: CreativeWorkDisplayProperties
  card: CardUnion
  timesTags: [TimesTag]!
  cardType: CardType!
  subsection: Section
  advertisingProperties: CreativeWorkAdvertisingProperties
  "A snapshot of creator data at the time this CreativeWork is last published.\n\nSince it is a snapshot, it will NOT reflect any changes to the underlying\ndata after the CreativeWork is published."
  bylines: [Byline]!
  summary: String!
  sourceId: String!
  previouslyPublishedUrls: [String!]!
  "The full TZ name from the tzdata database, e.g. 'America/New_York', as set by\nthe editor in Scoop, for the timezone most relevant for the content"
  contentTimezoneName: String
  lastMajorModification: DateTime
  "Timezone offset string based on the publicationProperties.firstPublished and\ncreativeWork.contentTimezoneName fields formatted as: '+00:00, -00:00'."
  firstPublishedTimezoneOffset: String
}
"An enumeration of supported podcast services that we provided subscription\nlinks to"
enum PodcastService {
  NOT_SET
  APPLE
  GOOGLE
  RADIO_PUBLIC
}
"The metadata required for displaying links to subscribe to the podcast in\nvarious services"
type PodcastSubscriptionUrl {
  "The URL to visit to subscribe"
  url: String!
  "The podcast service associated with the link"
  podcastService: PodcastService!
}
type PreviousName {
  retiredDate: DateTime
  name: String!
}
type PrintInformation {
  section: String!
  reconciled: Boolean!
  publicationDate: DateTime
  page: String!
  headline: String!
  edition: String!
  illustrationText: String!
}
"This union represents the top level blocks for the program."
union ProgramBlockUnion_Beta = Block_Beta | MultiListBlock_Beta
"A relay edge of content blocks."
type ProgramContentBlockConnection_Beta implements RelayConnection {
  edges: [ProgramContentBlockEdge_Beta]
  pageInfo: PageInfo!
  "Not part of the Relay Connection spec.  This is a custom and optional extension"
  totalCount: Int
}
type ProgramContentBlockEdge_Beta implements RelayEdge {
  node: ProgramContentBlockUnion_Beta
  cursor: String!
}
"Union representing blocks that may contain assets other than block metadata.\n\nNote this union includes `PersonalizedBlock_Beta`, be sure to see its\nassociated warning."
union ProgramContentBlockUnion_Beta = Block_Beta | PersonalizedBlock_Beta
"The layout size of a program - the meaning of this size is UI dependant."
enum ProgramLayoutSize {
  SMALL
  MEDIUM
  LARGE
  EXTRA_LARGE
}
type Program_Beta implements Node {
  dataId: String!
  spotlight: Block_Beta
    @deprecated(reason: "Use generic block naming (spotlight[a/b/c]) instead")
  topStories: Block_Beta
    @deprecated(reason: "Use generic block naming (topPrimary[a/b/c]) instead")
  briefings: Block_Beta
    @deprecated(
      reason: "Use generic block naming (topSecondary[a/b/c]) instead"
    )
  latestNews: Block_Beta
    @deprecated(
      reason: "Use generic block naming (topSecondary[a/b/c]) instead"
    )
  spotlightA: ProgramBlockUnion_Beta
  spotlightB: ProgramBlockUnion_Beta
  spotlightC: ProgramBlockUnion_Beta
  topPrimaryA: ProgramBlockUnion_Beta
  topPrimaryB: ProgramBlockUnion_Beta
  topPrimaryC: ProgramBlockUnion_Beta
  topSecondaryA: ProgramBlockUnion_Beta
  topSecondaryB: ProgramBlockUnion_Beta
  topSecondaryC: ProgramBlockUnion_Beta
  midA: ProgramBlockUnion_Beta
  midB: ProgramBlockUnion_Beta
  midC: ProgramBlockUnion_Beta
  "An array of all the program blocks matched by an identifier in 'dataIds'."
  anyBlocks(dataIds: [String!]!): [AnyProgramBlock_Beta]!
  moreProgrammables(
    first: Int
    last: Int
    before: String
    after: String
  ): ProgrammablesConnection_Beta
  id: ID!
  "Derived field defining ad parameters to send along with DFP request"
  adTargetingParams(clientAdParams: ClientAdParams!): [AdTargetingParam]
}
union Programmable_Beta =
    Block_Beta
  | MultiListBlock_Beta
  | Advert_Beta
  | PersonalizedBlock_Beta
type ProgrammablesConnection_Beta implements RelayConnection {
  edges: [ProgrammablesEdge_Beta]
  pageInfo: PageInfo!
  "Not part of the Relay Connection spec.  This is a custom and optional extension"
  totalCount: Int
}
type ProgrammablesEdge_Beta implements RelayEdge {
  node: Programmable_Beta
  cursor: String!
}
type Promo implements Published & HasPromotionalProperties & Linkable & Node {
  targetUrl: String!
  tone: Tone
  "A list of promotional variants representing the multiple promotional\nproperties associated with the Promo."
  promotions: [PromotionalVariant!]!
  sourceApplication: String!
  "An alternate summary in the form of a bulleted list, tailored for the\nhomepage."
  promotionalBullets: [String!]!
  newsStatus: NewsStatusType!
  firstPublished: DateTime
  url: String!
  lastModified: DateTime
  sourcePublisher: String!
  uri: String!
  "An additional piece of metadata for cards that the news desk uses to capture\nsentence renditions."
  oneLine: String!
  "A summary specially tailored for the homepage."
  promotionalSummary: String!
  "The unique identifier of the event."
  eventId: String
  shortUrl: String!
  "A banner displayed across the top an individual article/video/interactive or\npackage to allow the news desk to give extra emphasis to high-priority\ncoverage."
  banner: String!
  "A headline specially tailored for the homepage."
  promotionalHeadline: String!
  id: ID!
  "The multimedia that should be used to promote the story."
  promotionalMedia: PromotionalPropertiesMedia
  "MediaEmphasis can be influenced by cardType depending on the page layout.\n\nThis is business logic currently applied only by Samizdat, but could live on the Pipeline in the future.\n\nIf layout is not provided, the value is the mediaEmphasis from\npromotionalProperties.mediaEmphasis.\n\nIf layout is provided, and the layout value is\n  SMALL: Always force a MediaEmphasis of 'NONE' for TEXT cardTypes or\n         'MAXIMUM' for all others.\n  Anything else: Return the promotionalProperties.mediaEmphasis value"
  promotionalMediaEmphasis(layout: ProgramLayoutSize): MediaEmphasis!
  type: String!
  "An excerpt specially tailored for the homepage."
  promotionalExcerpt: String!
  card: CardUnion
  cardType: CardType!
  sourceId: String!
  previouslyPublishedUrls: [String!]!
  lastMajorModification: DateTime
}
type PromotionalProperties {
  "A summary specially tailored for the homepage."
  summary: String!
  newsStatus: NewsStatusType!
  mediaEmphasis: MediaEmphasis!
  "The multimedia that should be used to promote the story."
  media: PromotionalPropertiesMedia
  "A headline specially tailored for the homepage."
  headline: String!
  "An excerpt specially tailored for the homepage."
  excerpt: String!
  cardType: CardType!
  "An alternate summary in the form of a bulleted list, tailored for the homepage."
  bullets: [String!]!
  "An additional piece of metadata for cards that the news desk uses to capture\nsentence renditions."
  oneLine: String!
  "A banner displayed across the top an individual article/video/interactive or\npackage to allow the news desk to give extra emphasis to high-priority\ncoverage."
  banner: String!
}
union PromotionalPropertiesMedia =
    Image
  | Video
  | Interactive
  | Slideshow
  | EmbeddedInteractive
  | Article
  | Promo
  | Audio
"Represents named PromotionalProperties, used to attach multiple promotional\nproperties to assets."
type PromotionalVariant {
  "The name of the variant"
  name: String!
  "The set of promo properties associated with the variant"
  promotionalProperties: PromotionalProperties
}
type PublicationProperties {
  url: String!
  uri: String!
  type: String!
  sourceId: String!
  sourceApplication: String!
  source: String!
  shortUrl: String!
  previouslyPublishedUrls: [String!]!
  lastModified: DateTime
  lastMajorModification: DateTime
  firstPublished: DateTime
}
interface Published {
  url: String!
  uri: String!
  "The unique identifier of the event."
  eventId: String
  type: String!
  sourceId: String!
  sourceApplication: String!
  sourcePublisher: String!
  shortUrl: String!
  previouslyPublishedUrls: [String!]!
  lastModified: DateTime
  lastMajorModification: DateTime
  firstPublished: DateTime
}
type PullquoteBlock {
  "The quoted text"
  quote: [InlineUnion]!
  "Attribution for the quote"
  attribution: [InlineUnion]!
}
type QualtricsEmbedBlock {
  "Id of the survey created in Qualtrics"
  surveyId: String!
}
type Query implements RelayGraph {
  node(id: ID!): Node
  "Fetch a hub by an identifier string."
  askHubDocument_beta(identifier: String!): AskHubDocument_Beta
  "Fetch an answer by an identifier string."
  askAnswerDocument_beta(identifier: String!): AskAnswerDocument_Beta
  "best sellers book lists and/or navigation by list date (defaults to most\nrecent) in an ISO-8601-compatible date format such as 'YYYY-MM-DD'"
  bestsellers(date: DateTime): BestSellers
  "all assets in a user's feed sorted in reverse chron (where a user's feed is\na merged view of assets in all channels they follow). pagination args pertain\nto followAssets, not groups! This field or object is personalized by optional user cookies - including any anonymous user cookies."
  followFeed(
    first: Int
    after: String
    last: Int
    before: String
    user: UserIdentifier
  ): FollowFeedAssetsConnection
  "all assets in a user's feed sorted in reverse chron (where a user's feed is\na merged view of assets in all channels they follow). pagination args pertain\nto followAssets, not groups!\nthis version contains the onboarding logic for iOS experimentation, which\nautopopulates the feed if they're not following anything. This field or object is personalized by optional user cookies - including any anonymous user cookies."
  followFeedWithOnboarding(
    first: Int
    after: String
    last: Int
    before: String
    user: UserIdentifier
  ): FollowFeedAssetsConnection
  "assets in a specific channel in reverse chron, paginated"
  channel(id: String!): Channel
  "a list of statuses for each uri provided (shows whether the user is following\nthe channel or not) This field or object is personalized by optional user cookies for logged in users."
  followStatus(uris: [String!], user: UserIdentifier): [FollowStatus]
  "a list of statuses for each uri provided (shows whether the user is following\nthe channel or not). This field or object is personalized by optional user cookies for logged in users."
  bulletinFollowStatus(
    uris: [String!]
    user: UserIdentifier
  ): [BulletinFollowStatus]
  "a list of channels followed by the user This field or object is personalized by optional user cookies for logged in users."
  followedChannels(
    first: Int
    after: String
    last: Int
    before: String
    user: UserIdentifier
  ): ChannelMetadatasConnection
  "groupings of channels to be displayed together"
  categoriesOfChannels: [ChannelsCategory]
  legacySearch(query: SearchQuery): LegacySearchResult
  "Returns information about the gift code provided to a specific user if the user is provided.\nIf user is not provided (either as an argument or via request context), then just info on the code will be returned This field or object is personalized by optional user cookies for logged in users."
  giftInfo(code: NonEmptyString!, user: UserIdentifier): GiftInfoResult!
  lists: Lists
  "Fetch all newsletter configs (newsletter metadata)"
  newsletterSectionConfigs: [NewsletterSectionConfig!]!
  "Fetch a single newsletter config by slug"
  newsletterConfig(slug: String, newsletterId: String): NewsletterConfig
  "A list of all available podcasts"
  podcastList: List
  "Lookup a podcast by its NYT URI or its URL"
  podcast(id: String!): Podcast
  program_beta(id: String!): Program_Beta
  article(id: String!): Article
  audio(id: String!): Audio
  "Query a Capsule by id"
  capsule(id: String!): Capsule
  "Query a CityGuide by id"
  cityGuide(id: String!): CityGuide
  creativeWork(id: String!): CreativeWork
    @deprecated(reason: "Use anyWork instead")
  dispatchList(id: String!): DispatchList
  embeddedinteractive(id: String!): EmbeddedInteractive
    @deprecated(reason: "Use embeddedInteractive instead")
  embeddedInteractive(id: String!): EmbeddedInteractive
  hybridGlobalResources: [String]!
  image(id: String!): Image
  interactive(id: String!): Interactive
  legacycollection(id: String!): LegacyCollection
    @deprecated(reason: "Use legacyCollection instead")
  legacyCollection(id: String!): LegacyCollection
  "Use this to fetch interactives (interactiveGraphics or embeddedInteractives)\nby Scoop ID; otherwise, use interactive or anyWork"
  legacyInteractiveWork(id: String!): InteractiveWork
    @deprecated(reason: "Use interactive or anyWork instead")
  parentingArticle(id: String!): ParentingArticle
  paidpost(id: String!): PaidPost @deprecated(reason: "Use paidPost instead")
  paidPost(id: String!): PaidPost
  playlist(id: String!): Playlist
  slideshow(id: String!): Slideshow
  video(id: String!): Video
  "Use this to fetch asset metadata that might be needed for resource status\ncodes (e.g. 410, 301, etc).\n\nIf you wish GraphQL to automatically follow the redirect, silently exclude\nexpired items, etc - query for AnyWork"
  workOrLocation(id: String!): WorkOrLocation
  "A union of CreativeWork and External Work types. Use this for any generic\nquery that could potentially return an external asset"
  anyWork(id: String!): AnyWork
  anyWorks(ids: [ID!]!): [AnyWork]!
  theaterEvent(id: String!): TheaterEvent
  theaterVenue(id: String!): TheaterVenue
  recipe(id: String!): Recipe
  guide(id: String!): Guide
  newsAlert(id: String!): NewsAlert
  restaurant(id: String!): Restaurant
  movie(id: String!): Movie
  helixNewsletterProduct(id: String!): HelixNewsletterProduct
  helixNewsletter(id: String!): HelixNewsletter
  reviews: Reviews
  "Suggest using the search API, based off metadata including timestags"
  searchSuggest(query: SearchSuggestQuery): SearchSuggestResult
  "Queries for fetching data for pages in the NYTimes sitemap **WARNING: This field is not available and will always return a null in the following environments: dev, tst, stg, prd**."
  sitemap: Sitemap
  suggest(query: SuggestQuery): SuggestResult
    @deprecated(reason: "Use searchSuggest query instead")
  "This field or object is personalized by optional user cookies for logged in users."
  user(identifier: UserIdentifier): User
  "A list of available channels."
  videoNavigationChannels: [VideoNavigationChannel]!
}
"This field or object is personalized by optional user cookies for logged in users."
type ReadingListAssetsConnection implements RelayConnection {
  edges: [ReadingListAssetsEdge]
  metadata: ReadingListMetadata
  pageInfo: PageInfo!
  "Not part of the Relay Connection spec.  This is a custom and optional extension"
  totalCount: Int
}
type ReadingListAssetsEdge implements RelayEdge {
  node: HasPromotionalProperties
  metadata: ReadingListAssetsEdgeMetadata
  cursor: String!
}
type ReadingListAssetsEdgeMetadata {
  regiId: Int
  url: String
  createdDate: String
  updatedDate: String
  status: String
}
type ReadingListMetadata {
  retrievalTime: String
  overallSummary: ReadingListSummary
}
input ReadingListMutation {
  "RelayMutation"
  clientMutationId: String!
  userIdentifier: UserIdentifier
  url: String!
}
type ReadingListMutationResult implements RelayMutation {
  url: String!
  item: ReadingListAssetsEdgeMetadata
  readingListAssetsConnection(
    first: Int
    last: Int
    before: String
    after: String
  ): ReadingListAssetsConnection
  clientMutationId: String!
}
type ReadingListStatus {
  url: String!
  saved: Boolean!
}
type ReadingListSummary {
  regiId: Int
  count: Int
  readCount: Int
  archiveCount: Int
  createdDate: String
  updatedDate: String
}
type Recipe implements Published & CreativeWork & HasPromotionalProperties {
  "Is approved for cooking product"
  approvedForCookingProduct: Boolean!
  "Recipe name print override"
  printName: String!
  "Recipe description (~1 paragraph)"
  description: String!
  "Attribution (adapted from, ...)"
  attribution: String!
  "Total time to make recipe in minutes (e.g. 85.00)"
  totalTime: Float
  "Total time comment"
  totalTimeComment: String!
  "Nicely formatted total time (e.g. 1 hour 25 minutes)"
  totalTimeDisplay: String!
  "Total time range end in minutes"
  totalTimeRangeEnd: Float
  "Total time range end display"
  totalTimeRangeEndDisplay: String!
  "Time to prep food in minutes (e.g. 90.00)"
  prepTime: Float
  "Nicely formatted prep time (e.g. 1 hour 30 minutes)"
  prepTimeDisplay: String!
  "Cook time (e.g. 4.75)"
  cookTime: Float
  "Cook time display (e.g. 30 minutes)"
  cookTimeDisplay: String!
  "Yield unit (e.g. pint)"
  yieldUnit: String!
  "Yield display (e.g. 1 3/4 cup)"
  yieldDisplay: String!
  "Yield quantity (e.g. 1.75)"
  yieldQuantity: Float
  "Yield quantity display"
  yieldQuantityDisplay: String!
  "Yield quantity range end (e.g. 10.00)"
  yieldQuantityRangeEnd: Float
  "Yield quantity range end display"
  yieldQuantityRangeEndDisplay: String!
  "Number of parts (e.g. 4)"
  parts: Int!
  "Ingredients"
  ingredients: [Ingredient!]!
  "Variations are changes/additions you can make to recipe (e.g These are\ndelicious topped with a scoop of your favorite mashed potatoes and gravy.)"
  variations: [String!]!
  "Steps"
  steps: [Step!]!
  "Notes"
  notes: [String!]!
  "Tags"
  tags: [RecipeTag!]!
  "Recipe source (e.g. T Magazine)"
  recipeSource: String!
  "Parent article of recipe"
  article: [Article]!
  "Related recipes"
  relatedRecipes: [Recipe]!
  "Photo isn't specific to recipe"
  hasGenericPhoto: Boolean!
  legacyByline: String @deprecated(reason: "Use CreativeWork.bylines instead")
  headline: CreativeWorkHeadline
  "Derived field determined by ad-tech rules based on the asset's section and\nsubsection"
  dfpTaxonomyException: String
  sourceApplication: String!
  standout: Boolean!
  source: Organization
  commentStatus: CommentStatus!
    @deprecated(reason: "Use commentProperties.status instead")
  personalizationProperties: PersonalizationProperties
  "An alternate summary in the form of a bulleted list, tailored for the\nhomepage."
  promotionalBullets: [String!]!
  newsStatus: NewsStatusType!
  firstPublished: DateTime
  url: String!
  typeOfMaterials: [String!]!
  addendums: [CreativeWorkAddendum]!
  lastModified: DateTime
  "Derived field defining ad parameters to send along with DFP request"
  adTargetingParams(clientAdParams: ClientAdParams!): [AdTargetingParam]
  sourcePublisher: String!
  uri: String!
  "An array of LegacyCollections associated with a particular work.\n\nCan be filtered by either name, type, or both. Name filtering allows for partial prefix\nmatching (i.e. an input of 'match-box-' will return both 'match-box-20' and 'match-box-30') \n Any returned types that do not match an expected GQL type on this field will be filtered out,\n with null being returned instead.\n                    "
  collections(name: String, type: CollectionType): [LegacyCollection]!
  "Person/Organizations with specific roles in creating the asset.\n\nUnlike 'bylines', this field represents the most current data available (i.e.\nNOT a snapshot)"
  credits: [Credit]!
  "An additional piece of metadata for cards that the news desk uses to capture\nsentence renditions."
  oneLine: String!
  kicker: String!
  "A summary specially tailored for the homepage."
  promotionalSummary: String!
  slug: String!
  desk: String!
  section: Section
  "The unique identifier of the event."
  eventId: String
  shortUrl: String!
  "A banner displayed across the top an individual article/video/interactive or\npackage to allow the news desk to give extra emphasis to high-priority\ncoverage."
  banner: String!
  "A headline specially tailored for the homepage."
  promotionalHeadline: String!
  firstReportedAtURL: String!
  originalDesk: String!
  commentProperties: CreativeWorkCommentProperties!
  "A list of related creative works.  \n Any returned types that do not match an expected GQL type on this field will be filtered out,\n with null being returned instead.\n                     The results are limited to the first 20 elements returned."
  related: [HasPromotionalProperties]!
  language: Language
  "The multimedia that should be used to promote the story."
  promotionalMedia: PromotionalPropertiesMedia
  "MediaEmphasis can be influenced by cardType depending on the page layout.\n\nThis is business logic currently applied only by Samizdat, but could live on the Pipeline in the future.\n\nIf layout is not provided, the value is the mediaEmphasis from\npromotionalProperties.mediaEmphasis.\n\nIf layout is provided, and the layout value is\n  SMALL: Always force a MediaEmphasis of 'NONE' for TEXT cardTypes or\n         'MAXIMUM' for all others.\n  Anything else: Return the promotionalProperties.mediaEmphasis value"
  promotionalMediaEmphasis(layout: ProgramLayoutSize): MediaEmphasis!
  "Derived field determined to be the first collection in the collections list\nof type Column"
  column: LegacyCollection
  tone: Tone!
  followChannels: [ChannelMetadata]
  type: String!
  "An excerpt specially tailored for the homepage."
  promotionalExcerpt: String!
  displayProperties: CreativeWorkDisplayProperties
  card: CardUnion
  timesTags: [TimesTag]!
  cardType: CardType!
  subsection: Section
  advertisingProperties: CreativeWorkAdvertisingProperties
  "A snapshot of creator data at the time this CreativeWork is last published.\n\nSince it is a snapshot, it will NOT reflect any changes to the underlying\ndata after the CreativeWork is published."
  bylines: [Byline]!
  summary: String!
  sourceId: String!
  previouslyPublishedUrls: [String!]!
  "The full TZ name from the tzdata database, e.g. 'America/New_York', as set by\nthe editor in Scoop, for the timezone most relevant for the content"
  contentTimezoneName: String
  lastMajorModification: DateTime
  "Timezone offset string based on the publicationProperties.firstPublished and\ncreativeWork.contentTimezoneName fields formatted as: '+00:00, -00:00'."
  firstPublishedTimezoneOffset: String
}
type RecipeTag {
  "Tag type"
  type: String!
  "Tag type display name"
  typeDisplayName: String!
  "Tag name"
  name: String!
  "Tag display name"
  displayName: String!
}
type RelatedLinksBlock {
  "A title intended to be displayed before the summary"
  title: [InlineUnion]!
  "A list of related assets"
  related: [HasPromotionalProperties]!
  "An optional label intended to be displayed before the summary"
  kicker: String!
  "The suggested displayStyle to render the related links in"
  displayStyle: RelatedLinksBlockDisplayStyle!
  "An optional description of the content, generally one or two sentences long"
  description: [InlineUnion]!
}
"for RelatedLinksBlock"
enum RelatedLinksBlockDisplayStyle {
  "Standard, usually text and image"
  STANDARD
  "Light, usually text-only"
  COMPACT
  "Full size, usually text and large image"
  EXPANDED
}
enum RelationType {
  NONE
  SAME_AS
  BROADER
  NARROWER
}
"This RelayConnection interface only defines some of the attributes expected.\nIt cannot define the 'edges' attribute as this must be typed to the specific\nEdge type.\n\nAll implementations need to provide an 'edges: [SomeEdge]' attribute where\n'SomeEdge' is a type that implements RelayEdge."
interface RelayConnection {
  pageInfo: PageInfo!
  "Not part of the Relay Connection spec.  This is a custom and optional extension"
  totalCount: Int
}
"This RelayEdge interface only defines some of the attributes expected. It\ncannot define the 'node' attribute as this must be typed to the specific\nConnection/Edge type.\n\nThis interface serves as a marker for RelayResolver and any implementing types\nmust define the 'node: [Type]' attribute definition where 'Type' is the\nspecific type of the paginated collection."
interface RelayEdge {
  cursor: String!
}
interface RelayGraph {
  node(id: ID!): Node
}
"Relay mutations require a clientMutationId that is unique per mutation, v4 UUID\nis a good choice.\n\nhttps://facebook.github.io/relay/graphql/mutations.htm#sec-Mutation-inputs"
interface RelayMutation {
  clientMutationId: String!
}
"A Redirect event type in Bodega - use this to fetch redirect details; otherwise\nSamizdat will automatically follow the redirect"
type RelocatedWork {
  targetUri: String!
  targetUrl: String!
}
type Restaurant implements Published & Node {
  "The restaurants open/business status"
  openStatus: RestaurantOpenStatus!
  "Restaurant name"
  name: String!
  "Contact details (telephone, address, ...) for the restaurant"
  contactDetails: ContactDetails
  "Restaurant's website URL"
  website: String!
  "Restaurant location latitude/longitude"
  coordinates: GeoCoordinates
  "Description of the restaurant's location"
  locationDescription: String!
  "Whether the restaurant is handicap accessible"
  isAccessible: Boolean
  "Description of the restaurant's accessibility"
  accessibilityDescription: String!
  "List of restaurant cuisines (French, Kosher, ...)"
  cuisines: [String!]!
  "Restaurant price category"
  priceCategory: RestaurantPriceCategory!
  "Accepted payment methods"
  paymentMethods: [RestaurantPaymentMethod!]!
  "Whether the restaurant takes reservations"
  takesReservations: Boolean
  "Any extra information about reservations"
  reservationsNote: String!
  "URL to make reservations"
  reservationsUrl: String!
  "List of days open"
  daysOpen: [DayOfWeek!]!
  "Text description of the hours the restaurant is open"
  openHours: String!
  "List of the meal types served"
  meals: [RestaurantMeal!]!
  "Whether alcohol is served"
  isAlcoholServed: Boolean
  "A description of the alcohol served"
  alcoholDescription: String!
  "Single Platform menu ID"
  singlePlatformId: String!
  "Star rating:\n\n- 0.25: poor\n- 0.5: fair\n- 0.75: satisfactory\n- 1: good\n- 2: very good\n- 3: excellent\n- 4: extraordinary"
  rating: Float!
  "Short summary of the restaurant"
  shortSummary: String!
  "Summary of the restaurant"
  summary: String!
  "Dishes recommended at the restaurant"
  recommendedDishes: String!
  "Atmosphere description of the restaurant"
  atmosphere: String!
  "Sound level description in the restaurant"
  soundLevel: String!
  "Restaurant's wine list"
  wineList: String!
  "Whether this restaurant delivers"
  hasDelivery: Boolean
  "Whether this restaurant has takeout"
  hasTakeout: Boolean
  "Whether this restaurant provides catering services"
  hasCatering: Boolean
  "Description of the restaurant's outdoor space"
  outdoorDescription: String!
  restaurantImage: Image
  sourceApplication: String!
  firstPublished: DateTime
  url: String!
  lastModified: DateTime
  sourcePublisher: String!
  uri: String!
  "The unique identifier of the event."
  eventId: String
  shortUrl: String!
  id: ID!
  type: String!
  sourceId: String!
  previouslyPublishedUrls: [String!]!
  lastMajorModification: DateTime
}
enum RestaurantMeal {
  BREAKFAST
  WEEKEND_BRUNCH
  LUNCH
  DINNER
  LATE_NIGHT
}
enum RestaurantOpenStatus {
  OPEN
  OPENING_SOON
  CLOSED_PERMANENTLY
  CLOSED_TEMPORARILY
}
enum RestaurantPaymentMethod {
  CASH_ONLY
  AMERICAN_EXPRESS
  DISCOVER
  MASTERCARD
  VISA
}
enum RestaurantPriceCategory {
  UNKNOWN
  INEXPENSIVE
  MODERATE
  EXPENSIVE
  VERY_EXPENSIVE
}
union ReviewItem = TheaterEvent | Restaurant | Movie
union ReviewSubject = TheaterEvent | Book | Restaurant | Movie
type Reviews {
  "search and other metadata for movie reviews"
  movies: Movies
  "search and other metadata for dining reviews"
  dining: Dining
  "search and other metadata for theater reviews"
  theater: Theater
}
type ReviewsAssetsConnection implements RelayConnection {
  metadata: ReviewsMetadata
  edges: [ReviewsAssetsEdge]
  pageInfo: PageInfo!
  "Not part of the Relay Connection spec.  This is a custom and optional extension"
  totalCount: Int
}
type ReviewsAssetsEdge implements RelayEdge {
  node: HasPromotionalProperties
  reviewItem: ReviewItem
  cursor: String!
}
type ReviewsMetadata {
  "the display name for a reviews page, e.g., Movie Reviews"
  name: NonEmptyString
  "the tagline for a reviews page.\n\ne.g., Our film critics on blockbusters, independents and everything in\nbetween."
  tagline: NonEmptyString
}
enum ReviewsSortOrder {
  ASC
  DESC
}
type RuleBlock {
  type: String
}
"an enumeration of the intersection of document types indexed by search and\nthose available through GraphQL"
enum SearchDocumentType {
  ARTICLE
  "Blog posts are represented as articles in GraphQL"
  BLOGPOST
  VIDEO
  "Multimedia documents are typically slideshows, videos, or interactives"
  MULTIMEDIA
  RECIPE
  AUDIO
}
"Data about the sections the returned assets belong to"
type SearchFacetSection {
  "Number of assets returned in this section"
  assetCount: Int!
  node: Section
}
"Data about the types of the returned assets"
type SearchFacetType {
  "The number of assets returned for this search query for the associated asset type."
  assetCount: Int!
  "The type of the asset. e.g. Article"
  assetType: String!
}
"Facets are information about how many returned assets have certain attributes,\nlike being in a particular section"
type SearchFacets {
  "A list of counts of the section assets returned."
  sections: [SearchFacetSection]!
  "A list of counts of the types of assets returned."
  types: [SearchFacetType]!
}
"Highlights may contain a snippet of text matching the query"
type SearchHighlight {
  "A headline highlight"
  headline: String
  "A body highlight"
  body: String
}
"Extra data returned with search results."
type SearchMetadata {
  "A list of curated spotlights for the given SearchQuery."
  spotlights: [SearchSpotlight]
  "The facets returned by the SearchQuery"
  facets: SearchFacets
}
input SearchQuery {
  "The text of a query."
  text: String
  "How results should be ordered."
  sort: SearchSort
  "A minimum date constraint on results."
  beginDate: DateTime
  "A maximum date constraint on results."
  endDate: DateTime
  "A set of types to filter by"
  types: [SearchDocumentType!]
  "A filterQuery String that would be passed to Search and analyzed on the backend\n\nexample: (collections: nyt://legacycollection1 OR collections: nyt://legacycollection2)"
  filterQuery: String
}
"The ways to order search results."
enum SearchSort {
  "Order results by relevancy without taking date into account. The default\nbehavior."
  best
  "Order results by the most recently published."
  newest
  "Order results by the least recently published."
  oldest
}
"A spotlight is a piece of content returned for a matching query. Used to inject\narbitrary data into search results, e.g., known good collections pages,\nmarketing information."
type SearchSpotlight {
  "A headline for the spotlight."
  headline: String!
  "The URL to which the spotlight points."
  url: String!
  "An optional summary of the spotlight."
  summary: String
  "An optional URL for a thumbnail image."
  thumbnailUrl: String
}
"queries for suggestions, matching text with first letters of timestags and other metadata"
input SearchSuggestQuery {
  "The text from which to generate suggestions."
  text: String!
}
"Suggestions from the Search Team's index based on the query sent by user"
type SearchSuggestResult {
  "Suggestions of authors."
  authors: [String]
  "Suggestions of subjects."
  subjects: [String]
  "Suggestions of creative works."
  creativeWorks: [String]
  "Suggestions of geolocations."
  glocations: [String]
  "Suggestions of organizations."
  organizations: [String]
  "Suggestions of persons."
  persons: [String]
}
type Section implements Published & Linkable & Node {
  publicUrl: String!
  taxonomyID: String!
  nytBranded: Boolean!
  name: String!
  displayName: String!
  sourceApplication: String!
  firstPublished: DateTime
  url: String!
  lastModified: DateTime
  sourcePublisher: String!
  uri: String!
  "The unique identifier of the event."
  eventId: String
  shortUrl: String!
  id: ID!
  type: String!
  sourceId: String!
  previouslyPublishedUrls: [String!]!
  lastMajorModification: DateTime
}
enum Sensitivity {
  SHOW_ADS
  TRAGEDY
}
"Result when a user's profile session has expired"
type SessionExpired implements GiftErrorResult {
  "Detailed error message, if available, for the error"
  error: String
}
"Result when a user's session does not exist"
type SessionNotFound implements GiftErrorResult {
  "Detailed error message, if available, for the error"
  error: String
}
"One of the three standard privacy directives. This directive describe UI interaction the user may be shown."
type ShowDataSaleOptOutUiPrivacyDirective {
  "This boolean value dictates wherthere or not to display an actionable option for the User."
  show: Boolean!
  "Which preference action this UI option is for."
  preference: UserPreferenceAction
}
"Queries for fetching data for pages in the NYTimes sitemap"
type Sitemap {
  "Top level of the sitemap containing a list of years"
  indexForRoot: SitemapRootIndex
  "A particular year's sitemap index, containing a list of months"
  indexForYear(year: String!): SitemapYearIndex
  "A particular month's sitemap index, containing a list of days"
  indexForMonth(year: String!, month: String!): SitemapMonthIndex
  "A particular day's sitemap index, containing a list of items published on that day"
  indexForDay(year: String!, month: String!, day: String!): SitemapDayIndex
}
"Metadata for a day's sitemap index"
type SitemapDay implements SitemapItem {
  "The datetime representation for this item"
  dateTime: DateTime
  "The item's display name, e.g. January 2018"
  displayName: String
  "A zero-padded string version of a number representing this item, e.g. '03' for March"
  item: String
  "A number representing this item, e.g. 3 for March"
  itemInt: Int
}
"Metadata and a list of published items for a day index in the sitemap"
type SitemapDayIndex {
  "Metadata about the day this index represents"
  metadata: SitemapDay
  "A list of items published on this day"
  publishedItems: [SitemapPublishedItem!]!
}
"A collection of metadata for items contained in sitemap indexes"
interface SitemapItem {
  "The datetime representation for this item"
  dateTime: DateTime
  "The item's display name, e.g. January 2018"
  displayName: String
  "A zero-padded string version of a number representing this item, e.g. '03' for March"
  item: String
  "A number representing this item, e.g. 3 for March"
  itemInt: Int
}
"Metadata for a month's sitemap index"
type SitemapMonth implements SitemapItem {
  "The datetime representation for this item"
  dateTime: DateTime
  "The item's display name, e.g. January 2018"
  displayName: String
  "A zero-padded string version of a number representing this item, e.g. '03' for March"
  item: String
  "A number representing this item, e.g. 3 for March"
  itemInt: Int
}
"Metadata and a list of days for a year index in the sitemap"
type SitemapMonthIndex {
  "Metadata about the month this index represents"
  metadata: SitemapMonth
  "A list of metadata about days in this month"
  days: [SitemapDay!]!
}
"Metadata for items published on a particular day"
type SitemapPublishedItem {
  "The GraphQL type name of a published item, e.g. Article or Video"
  typeName: String
  "The headline of a published item"
  headline: String
  "The url for a published item"
  url: String
  "The uri for a published item"
  uri: String
  "When the item was first published"
  firstPublished: DateTime
  "When the item was last modified"
  lastModification: DateTime
  "When the item had its last major modification"
  lastMajorModification: DateTime
}
"A list of years in the root index of the sitemap"
type SitemapRootIndex {
  "A list of metadata about years in the sitemap index"
  years: [SitemapYear!]!
}
"Metadata for a year's sitemap index"
type SitemapYear implements SitemapItem {
  "The datetime representation for this item"
  dateTime: DateTime
  "The item's display name, e.g. January 2018"
  displayName: String
  "A zero-padded string version of a number representing this item, e.g. '03' for March"
  item: String
  "A number representing this item, e.g. 3 for March"
  itemInt: Int
}
"Metadata and a list of months for a year index in the sitemap"
type SitemapYearIndex {
  "Metadata about the year this index represents"
  metadata: SitemapYear
  "A list of metadata about months in this year"
  months: [SitemapMonth!]!
}
enum Size {
  MEDIUM
  SMALL
  LARGE
  FULL
}
type Slideshow implements Published & CreativeWork & HasPromotionalProperties & Linkable & Node {
  translations: [SlideshowTranslation]!
  slides: [SlideshowSlide]!
  intro: SlideshowSlide
  "A list of promotional variants representing the multiple promotional\nproperties associated with the Slideshow."
  promotions: [PromotionalVariant!]!
  headline: CreativeWorkHeadline
  "Derived field determined by ad-tech rules based on the asset's section and\nsubsection"
  dfpTaxonomyException: String
  sourceApplication: String!
  standout: Boolean!
  source: Organization
  commentStatus: CommentStatus!
    @deprecated(reason: "Use commentProperties.status instead")
  personalizationProperties: PersonalizationProperties
  "An alternate summary in the form of a bulleted list, tailored for the\nhomepage."
  promotionalBullets: [String!]!
  newsStatus: NewsStatusType!
  firstPublished: DateTime
  url: String!
  typeOfMaterials: [String!]!
  addendums: [CreativeWorkAddendum]!
  lastModified: DateTime
  "Derived field defining ad parameters to send along with DFP request"
  adTargetingParams(clientAdParams: ClientAdParams!): [AdTargetingParam]
  sourcePublisher: String!
  uri: String!
  "An array of LegacyCollections associated with a particular work.\n\nCan be filtered by either name, type, or both. Name filtering allows for partial prefix\nmatching (i.e. an input of 'match-box-' will return both 'match-box-20' and 'match-box-30') \n Any returned types that do not match an expected GQL type on this field will be filtered out,\n with null being returned instead.\n                    "
  collections(name: String, type: CollectionType): [LegacyCollection]!
  "Person/Organizations with specific roles in creating the asset.\n\nUnlike 'bylines', this field represents the most current data available (i.e.\nNOT a snapshot)"
  credits: [Credit]!
  "An additional piece of metadata for cards that the news desk uses to capture\nsentence renditions."
  oneLine: String!
  kicker: String!
  "A summary specially tailored for the homepage."
  promotionalSummary: String!
  slug: String!
  desk: String!
  section: Section
  "The unique identifier of the event."
  eventId: String
  shortUrl: String!
  "A banner displayed across the top an individual article/video/interactive or\npackage to allow the news desk to give extra emphasis to high-priority\ncoverage."
  banner: String!
  "A headline specially tailored for the homepage."
  promotionalHeadline: String!
  firstReportedAtURL: String!
  originalDesk: String!
  id: ID!
  commentProperties: CreativeWorkCommentProperties!
  "A list of related creative works.  \n Any returned types that do not match an expected GQL type on this field will be filtered out,\n with null being returned instead.\n                     The results are limited to the first 20 elements returned."
  related: [HasPromotionalProperties]!
  language: Language
  "The multimedia that should be used to promote the story."
  promotionalMedia: PromotionalPropertiesMedia
  "MediaEmphasis can be influenced by cardType depending on the page layout.\n\nThis is business logic currently applied only by Samizdat, but could live on the Pipeline in the future.\n\nIf layout is not provided, the value is the mediaEmphasis from\npromotionalProperties.mediaEmphasis.\n\nIf layout is provided, and the layout value is\n  SMALL: Always force a MediaEmphasis of 'NONE' for TEXT cardTypes or\n         'MAXIMUM' for all others.\n  Anything else: Return the promotionalProperties.mediaEmphasis value"
  promotionalMediaEmphasis(layout: ProgramLayoutSize): MediaEmphasis!
  "Derived field determined to be the first collection in the collections list\nof type Column"
  column: LegacyCollection
  tone: Tone!
  followChannels: [ChannelMetadata]
  type: String!
  "An excerpt specially tailored for the homepage."
  promotionalExcerpt: String!
  displayProperties: CreativeWorkDisplayProperties
  card: CardUnion
  timesTags: [TimesTag]!
  cardType: CardType!
  subsection: Section
  advertisingProperties: CreativeWorkAdvertisingProperties
  "A snapshot of creator data at the time this CreativeWork is last published.\n\nSince it is a snapshot, it will NOT reflect any changes to the underlying\ndata after the CreativeWork is published."
  bylines: [Byline]!
  summary: String!
  sourceId: String!
  previouslyPublishedUrls: [String!]!
  "The full TZ name from the tzdata database, e.g. 'America/New_York', as set by\nthe editor in Scoop, for the timezone most relevant for the content"
  contentTimezoneName: String
  lastMajorModification: DateTime
  "Timezone offset string based on the publicationProperties.firstPublished and\ncreativeWork.contentTimezoneName fields formatted as: '+00:00, -00:00'."
  firstPublishedTimezoneOffset: String
}
type SlideshowBlock {
  size: Size!
  media: Slideshow
}
type SlideshowCard implements CardInterface {
  "The asset underlying the card if it is a slideshow.  Otherwise, this is the\npromotionalMedia of the asset (if that media is a slideshow)."
  slideshow: Slideshow!
  newsStatus: NewsStatusType!
  url: String!
  lastModified: DateTime
  promotionalSummary: String!
  section: Section
  shortUrl: String!
  promotionalHeadline: String!
  promotionalMedia: PromotionalPropertiesMedia
  promotionalMediaEmphasis: MediaEmphasis!
  "Derived field determined to be the first collection in the collections list of type Column"
  column: LegacyCollection
  "The asset underlying this Card"
  asset: HasPromotionalProperties!
  cardType: String!
  subsection: Section
  lastMajorModification: DateTime
}
type SlideshowSlide {
  url: String!
  slug: String!
  legacyHtmlCaption: String!
  image: Image
  caption: TextOnlyDocumentBlock
}
type SlideshowTranslation {
  "Derived field representing either translation.url if present or url"
  url: String!
  translation: Slideshow
  translatedLinkText: String!
  linkText: String!
  language: Language
}
type SoundcloudEmbedBlock {
  soundcloudUrl: String!
  playerStyle: SoundcloudPlayerStyle!
  html: String
}
enum SoundcloudPlayerStyle {
  DEFAULT
  VISUAL
}
type SpotifyEmbedBlock {
  "Url of Spotify asset"
  spotifyUrl: String!
  "URL for embedding a spotify player in a web page"
  spotifyEmbedUrl: String!
  "Player display style"
  playerStyle: SpotifyPlayerStyle!
}
enum SpotifyPlayerStyle {
  DEFAULT
  VISUAL
}
type SprinkledConfig {
  "Name of used config, can be 'desktop', 'mobile', 'desktopHoldout' or\n'mobileHoldout'."
  name: String!
  "Indicates if sprinkling of ads was enabled (auto-disabled in case of\n'tragedy')"
  enabled: Boolean!
  threshold: Int! @deprecated(reason: "Use thresholds instead.")
  "Step between ads in dropzone, for example stride = 7 means that ad should\ntake every 7th dropzone"
  stride: Int!
  "Maximum amount of ads that can be sprinkled per article"
  capacity: Int!
  "Ids for the dropzones that should have ads before we start using stride"
  thresholds: [Int]!
  "Amount of dropzones that cannot be used for ads from the bottom of article\nbody"
  bound: Int
}
type SprinkledContent {
  body: DocumentBlock
  configs(names: [String!]): [SprinkledConfig!]!
}
type StandardCard implements CardInterface {
  newsStatus: NewsStatusType!
  url: String!
  lastModified: DateTime
  promotionalSummary: String!
  section: Section
  shortUrl: String!
  promotionalHeadline: String!
  promotionalMedia: PromotionalPropertiesMedia
  promotionalMediaEmphasis: MediaEmphasis!
  "Derived field determined to be the first collection in the collections list of type Column"
  column: LegacyCollection
  "The asset underlying this Card"
  asset: HasPromotionalProperties!
  cardType: String!
  subsection: Section
  lastMajorModification: DateTime
}
type Step {
  "Step part name"
  partName: String!
  "Step description"
  description: String!
  "Related recipe to step"
  relatedRecipes: [Recipe]!
}
enum StreamExclusionMode {
  "Ensure no highlights associated with the collection appear in the stream"
  HIGHLIGHTS
  "Ensure no assets in embedded collections appear in the stream"
  EMBEDDED
  "Ensure neither highlights nor embedded collection assets appear in the stream"
  HIGHLIGHTS_AND_EMBEDDED
  "No assets are excluded from the stream"
  NONE
}
type StrikethroughFormat {
  type: String
}
enum Style {
  UNORDERED
  ORDERED
}
type Subject implements Published & TimesTag & Linkable & Node {
  taxonomicRelations: [SubjectTaxonomicRelation]!
  scopeNote: String!
  retiredNames: [PreviousName]!
  displayName: String!
  sourceApplication: String!
  userAdded: Boolean!
  firstPublished: DateTime
  url: String!
  lastModified: DateTime
  description: String!
  linkedData: [TimesTagLinkedData]!
  sourcePublisher: String!
  uri: String!
  slug: String!
  "The unique identifier of the event."
  eventId: String
  shortUrl: String!
  taggingRules: [TimesTagTaggingRule]!
  id: ID!
  "\n Any returned types that do not match an expected GQL type on this field will be filtered out,\n with null being returned instead.\n                    "
  promotionalMedia: TimesTagPromotionalMedia
  vernacular: String!
  type: String!
  isAdvertisingBrandSensitive: Boolean!
  sourceId: String!
  previouslyPublishedUrls: [String!]!
  lastMajorModification: DateTime
}
type SubjectTaxonomicRelation {
  subject: Subject
  relation: RelationType!
}
"Indicates that the requested was successfully updated."
type SubscribeToTheHeadlinesResult {
  "Returns a status reponse, OK or an error message"
  status: NonEmptyString!
}
type SubscriptFormat {
  type: String
}
enum Subtype {
  NONE
  PLAY
  TV_PROGRAM
  OPERA
  VIDEO_GAME
  ALBUM
  EXHIBIT
  BALLET
  DANCE
  WEB_ORIGINAL_PROGRAM
  MUSICAL_WORK
  RADIO_PROGRAM
  SONG
  MOVIE
  BOOK
  OTHER
}
input SuggestQuery {
  "The text from which to generate suggestions."
  text: String!
}
type SuggestResult {
  "Suggestions based on the most-searched terms."
  mostSearched: [Suggestion]
  "Suggestions based on times tags."
  timesTags: [Suggestion]
  "Suggestions based on author bylines."
  byline: [Suggestion]
}
type Suggestion {
  "The text associated with a suggestion."
  text: String!
}
type SummaryBlock {
  textAlign: Align!
  content: [InlineUnion]!
}
type SuperscriptFormat {
  type: String
}
enum SyndicationType {
  TEXT
  ANDROID
  ANDROID_TABLET
  IPAD
  IPHONE
  MOBILE_WEB
}
type SyndicationUrl {
  url: String!
  type: SyndicationType!
}
type TextCard implements CardInterface {
  newsStatus: NewsStatusType!
  url: String!
  lastModified: DateTime
  promotionalSummary: String!
  section: Section
  shortUrl: String!
  promotionalHeadline: String!
  promotionalMedia: PromotionalPropertiesMedia
  promotionalMediaEmphasis: MediaEmphasis!
  "Derived field determined to be the first collection in the collections list of type Column"
  column: LegacyCollection
  "The asset underlying this Card"
  asset: HasPromotionalProperties!
  cardType: String!
  subsection: Section
  lastMajorModification: DateTime
}
type TextInline {
  text: String!
  formats: [FormatUnion]!
}
type TextOnlyDocumentBlock {
  text: String!
  content: [TextOnlyDocumentBlockUnion]!
}
union TextOnlyDocumentBlockUnion = ParagraphBlock | RuleBlock
type Theater {
  "search theater reviews. first must be a multiple of 10; default is 10.\nbackwards pagination is disabled."
  search(
    first: Int
    last: Int
    before: String
    after: String
    facets: TheaterFacets
  ): ReviewsAssetsConnection
}
"WARNING: only uri will be available until all of\nhttps://jira.nyt.net/browse/DU-3933 is complete"
type TheaterEvent implements Published {
  venue: TheaterVenue
  description: String!
  paymentOptions: String!
  ageInformation: String!
  isKidFriendly: Boolean!
  isCancelled: Boolean!
  genre: String!
  startDate: DateTime
  stopDate: DateTime
  eventTypes: String!
  cast: String!
  awards: String!
  category: Category!
  openDate: DateTime
  openRun: Boolean!
  shortComment: String!
  creators: String!
  runtime: String!
  hasIntermission: Boolean!
  theaterShow: [TheaterEventTheaterShow]!
  performance: TheaterEventPerformance
  ticketInfo: TheaterEventTicketInfo
  sourceApplication: String!
  firstPublished: DateTime
  url: String!
  lastModified: DateTime
  sourcePublisher: String!
  uri: String!
  "The unique identifier of the event."
  eventId: String
  shortUrl: String!
  type: String!
  sourceId: String!
  previouslyPublishedUrls: [String!]!
  lastMajorModification: DateTime
}
type TheaterEventPerformance {
  name: String!
  description: String!
  website: String!
}
type TheaterEventTheaterShow {
  updated: DateTime
  showDate: DateTime
  showTime: DateTime
  description: String!
}
type TheaterEventTicketInfo {
  description: String!
  ticketSaleDate: DateTime
  prices: String!
  website: String!
}
input TheaterFacets {
  "the category of the theater event.\n\ne.g., BROADWAY, OFFBROADWAY, OFFOFFBROADWAY"
  categories: [Category]
  "the genre of the theater event, e.g., musical, play, drama"
  genre: String
  "the num days a theater event has been open"
  openedWithin: Int
  "the num days until a theater event closes"
  closingWithin: Int
  "whether or not the theater event is kid friendly"
  isKidFriendly: Boolean
  "whether or not the theater event is a critics pick"
  isCriticsPick: Boolean
  "desc or asc only. Sorts by review date"
  sortOrder: ReviewsSortOrder = DESC
}
type TheaterVenue implements Published {
  venueIsShutdown: Boolean!
  type: String!
  ticketInfo: String!
  smokingDescription: String!
  smokingAllowed: Boolean!
  seating: Int!
  paymentOptions: String!
  parkingDescription: String!
  name: String!
  locationDescription: String!
  hours: String!
  hasParking: Boolean!
  hasAlcohol: Boolean!
  coordinates: LocationGeoCoordinates
  contactDetails: ContactDetails
  alcoholDescription: String!
  ageRestricted: Boolean!
  ageDescription: String!
  accessible: Boolean!
  accessibilityDescription: String!
  sourceApplication: String!
  firstPublished: DateTime
  url: String!
  lastModified: DateTime
  sourcePublisher: String!
  uri: String!
  "The unique identifier of the event."
  eventId: String
  shortUrl: String!
  sourceId: String!
  previouslyPublishedUrls: [String!]!
  lastMajorModification: DateTime
}
interface TimesTag {
  vernacular: String!
  userAdded: Boolean!
  taggingRules: [TimesTagTaggingRule]!
  slug: String!
  "\n Any returned types that do not match an expected GQL type on this field will be filtered out,\n with null being returned instead.\n                    "
  promotionalMedia: TimesTagPromotionalMedia
  linkedData: [TimesTagLinkedData]!
  isAdvertisingBrandSensitive: Boolean!
  displayName: String!
  description: String!
}
type TimesTagLinkedData {
  targetUri: String!
  targetType: String!
  relation: RelationType!
}
union TimesTagPromotionalMedia = Image | Video | Interactive | Slideshow
type TimesTagTaggingRule {
  triggerTerm: String!
  tickerizations: [TimesTagTaggingRuleTickerization]!
  conditionType: ConditionType!
  condition: String!
}
type TimesTagTaggingRuleTickerization {
  url: String!
  sections: [Section]!
  altText: String!
}
enum TimesWireContentType {
  ARTICLE
  INTERACTIVE
  SLIDESHOW
  VIDEO
}
input TimesWireFetchCriteria {
  sectionUri: String
  sourceUri: String
  sourceUris: [String!]
  contentType: TimesWireContentType
}
type TimestampBlock {
  timestamp: DateTime
  align: Align!
  "If true, render the Last Major Modification updated timestamp in the header of articles"
  showUpdatedTimestamp: Boolean
  "The full TZ name from the tzdata database, e.g. 'America/New_York'.\n\nAs set by the editor in Scoop, for the timezone most relevant for the\ncontent."
  contentTimezoneName: String
  "Timezone offset string for the timestamp value formatted as:\n'+00:00, -00:00'"
  contentTimezoneOffset: String
}
type Title implements Published & TimesTag & Linkable & Node {
  subtype: Subtype!
  displayName: String!
  sourceApplication: String!
  userAdded: Boolean!
  firstPublished: DateTime
  url: String!
  lastModified: DateTime
  description: String!
  linkedData: [TimesTagLinkedData]!
  sourcePublisher: String!
  uri: String!
  slug: String!
  "The unique identifier of the event."
  eventId: String
  shortUrl: String!
  taggingRules: [TimesTagTaggingRule]!
  id: ID!
  "\n Any returned types that do not match an expected GQL type on this field will be filtered out,\n with null being returned instead.\n                    "
  promotionalMedia: TimesTagPromotionalMedia
  vernacular: String!
  type: String!
  isAdvertisingBrandSensitive: Boolean!
  sourceId: String!
  previouslyPublishedUrls: [String!]!
  lastMajorModification: DateTime
}
enum Tone {
  NO_TONE_SET
  NEWS
  FEATURE
  OPINION
  INFORMAL
}
enum TopicCategory {
  NONE
  PERSON
  ORGANIZATION
  SUBJECT
  DESTINATION
}
type TopicCompany {
  "The exchange the company trades on. When combined with the symbol, this can\nbe used to get stock information"
  exchange: String!
  "The ticker symbol of the company. When combined with exchange, this can be\nused to get stock information"
  symbol: String!
  "The full name of the company listed on the exchange"
  issueName: String!
}
"A key/value pair to use for tracking purposes"
type TrackingParam {
  "The name of the tracking parameter"
  key: String!
  "The value of the tracking parameter"
  value: String!
}
type TwitterEmbedBlock {
  twitterUrl: String!
  snapshot: String!
  hideMedia: Boolean!
  html: String
}
type UnstructuredBlock {
  "typename of data"
  dataType: String!
  "JSON data for block"
  data: String!
  "A list of related media types (supported by PublicationProperties)"
  media: [UnstructuredBlockMediaUnion]!
}
union UnstructuredBlockMediaUnion = Image | Video | Slideshow | Interactive
"The set of necessary inputs for updating a client's preference."
input UpdateUserPrivacyPrefsInput {
  "The relavant information to identify the User by. This value can also be passed by the Cookie: `NYT-S` or header `NYT-User-Token`."
  userIdentifier: UserIdentifier
  "The kind of preference to be updated -- known as an 'action'."
  preference: UserPreferenceAction!
  "The value of the preference based on the user interaction."
  value: UserPrivacyPreferenceValue!
  "Information about where the user action originated from."
  sourceName: String!
}
"Indicates that the requested was successfully updated."
type UpsellOfferResult {
  "Returns a status reponse, OK or an error message"
  status: NonEmptyString!
}
"Keeps track of whether the user has been shown an upsell offer."
type UpsellOfferStatus {
  "Whether or not the user has seen an upsell offer."
  hasSeenUpsell: Boolean!
}
type UrgentCard implements CardInterface {
  promotionalBullets: [String!]!
  newsStatus: NewsStatusType!
  url: String!
  lastModified: DateTime
  promotionalSummary: String!
  section: Section
  shortUrl: String!
  promotionalHeadline: String!
  promotionalMedia: PromotionalPropertiesMedia
  promotionalMediaEmphasis: MediaEmphasis!
  "Derived field determined to be the first collection in the collections list of type Column"
  column: LegacyCollection
  "The asset underlying this Card"
  asset: HasPromotionalProperties!
  cardType: String!
  subsection: Section
  lastMajorModification: DateTime
}
type User {
  "Profile information for this user."
  profile: UserProfile
  userInfo: UserInfo
  "Information about the current User's subscription."
  subscriptionDetails: [UserSubscriptionInfo!]
  readingListAssetsConnection(
    first: Int
    last: Int
    before: String
    after: String
  ): ReadingListAssetsConnection
  readingListStatus(urls: [String!]!): [ReadingListStatus!]!
  "Whether user has seen an upsell offer"
  hasSeenUpsellOffer: UpsellOfferStatus
  "The privacy directives for this user given the directivesParam plus contexual location information identifiable from\nthe request including:\n- Country & Region (Specified by header x-nyt-country, x-nyt-region respectively)\n- If the identified user has made certain privacy selections This field or object is personalized by optional user cookies - including any anonymous user cookies."
  privacyDirectives(
    directivesParam: UserPrivacyDirectivesParam
  ): UserPrivacyDirectives
}
input UserIdentifier {
  token: String!
  demographicsToken: String
  profileToken: String
}
type UserInfo {
  demographics: Demographics
  entitlements: [Entitlement]
  geo: Geo
  regiId: String
  name: String @deprecated(reason: "Use the User object's profile instead")
  subscriptions: [NonEmptyString]
}
"An Enum containing the set of possible preference actions a User can update."
enum UserPreferenceAction {
  NYT_SELL_PERSONAL_INFORMATION_CCPA
}
"A standard set of privacy marker directives. Clients are required to understand and comply to all directives for a safe implementation\nin their application."
type UserPrivacyDirectives {
  "This tells the client app what type of advertising configuration to use."
  adConfiguration: AdConfigurationPrivacyDirective!
  "This tells the client app what type of tracking configuration to use."
  acceptableTrackers: AcceptableTrackersPrivacyDirective!
  "This tells the client app to show (or not show) an affordance, such as an opt-out link or button, that a user can take action on."
  showDataSaleOptOutUI: ShowDataSaleOptOutUiPrivacyDirective!
}
"Relavant user privacy preferences that are known to the device. Clients should pass these data points if they have them."
input UserPrivacyDirectivesParam {
  "The kind of preference action."
  action: UserPreferenceAction!
  "The preference value for the `action` that is local to the device. Typically this means a user was anonymous when the preference action took place."
  valueLocalToAgent: UserPrivacyPreferenceValue
  "The preference value for the `action` that is stored for the user. Typically, this means the user was loggged in when the preference action took place."
  valueStoredByNyt: UserPrivacyPreferenceValue
}
"Describes the value of a Preference action for a given User."
type UserPrivacyPreference {
  "The preference action."
  action: UserPreferenceAction!
  "The value that is local to the user. This value is only filled-in if the User is anonymous."
  valueLocalToAgent: UserPrivacyPreferenceValue
  "The value that is stored for the User. This value is only filled-in if the User is logged in."
  valueStoredByNyt: UserPrivacyPreferenceValue
}
"An Enum containing the possible values for a given Preference Action."
enum UserPrivacyPreferenceValue {
  OPT_IN
  OPT_OUT
}
"The result of requesting to update a User's preference."
type UserPrivacyPrefsUpdateResult {
  "The updated preference value. Clients should store this value."
  preference: UserPrivacyPreference
  "New privacy directives for the User based the new updated Preference and other contexual informations. See the `User.privacyDirectives` field."
  privacyDirectives: UserPrivacyDirectives
}
"Represents information about an identified user."
type UserProfile {
  "The identified user's email address"
  email: String!
  "The identified user's name. This field is constructed as the first part of\nthe user's email if a name isn't available."
  displayName: String
}
type UserSubscriptionInfo {
  "Indicates this subscription is a free trial."
  isFreeTrial: Boolean!
  "If the subscription is a free trial, indicates a new subscription at the end\nof the trial."
  hasQueuedSub: Boolean
  "The start date of this subscription."
  startDate: DateTime
  "The end date if this is a termed subscription."
  endDate: DateTime
  "The status of this subscription."
  status: UserSubscriptionStatus
  "The entitlements associated with this subscription."
  entitlements: [String]!
  "The start date of the grace period when the user subscription is in grace."
  graceStartDate: DateTime
  "The end date of the grace period when the user subscription is in grace."
  graceEndDate: DateTime
  "A payment is pending for this subscription"
  hasTransactionInProgress: Boolean
  "Subscription has active entitlements."
  hasActiveEntitlements: Boolean
}
enum UserSubscriptionStatus {
  ACTIVE
  CLOSED
  QUEUED
  IN_GRACE_PERIOD
  CANCELED
}
type Video implements Published & CreativeWork & HasPromotionalProperties & Linkable & Node {
  translations: [VideoTranslation]!
  transcript: String!
  rightsDistribution: Boolean!
  rights: Boolean!
  renditions: [VideoRendition]!
  playlist: Playlist
  muted: Boolean!
    @deprecated(reason: "This field has been moved to VideoBlock type.")
  multimediaLabel: String!
  looping: Boolean!
    @deprecated(reason: "This field has been moved to VideoBlock type.")
  liveUrls: [String!]!
  isLive: Boolean!
  is360: Boolean!
  hideSummary: Boolean!
    @deprecated(reason: "This field has been moved to VideoBlock type.")
  hideSharetools: Boolean!
    @deprecated(
      reason: "This field has been combined with hideControls in the VideoBlock type"
    )
  hideControls: Boolean!
    @deprecated(reason: "This field has been moved to VideoBlock type.")
  externalPlatforms: [VideoExternalPlatform]!
  embedded: Boolean!
  duration: Int
  cues: [VideoCue]!
  contentSeries: String!
  autoplay: Boolean!
    @deprecated(reason: "This field has been moved to VideoBlock type.")
  aspectRatio: String!
  playlists: [Playlist]!
  "The id of the video on YouTube"
  youTubeId: String!
  "A list of promotional variants representing the multiple promotional\nproperties associated with the Video"
  promotions: [PromotionalVariant!]!
  "If true, the video will be treated as cinemagraph."
  isCinemagraph: Boolean!
  "What form of video is being produced"
  productionType: VideoProductionType!
  headline: CreativeWorkHeadline
  "Derived field determined by ad-tech rules based on the asset's section and\nsubsection"
  dfpTaxonomyException: String
  sourceApplication: String!
  standout: Boolean!
  source: Organization
  commentStatus: CommentStatus!
    @deprecated(reason: "Use commentProperties.status instead")
  personalizationProperties: PersonalizationProperties
  "An alternate summary in the form of a bulleted list, tailored for the\nhomepage."
  promotionalBullets: [String!]!
  newsStatus: NewsStatusType!
  firstPublished: DateTime
  url: String!
  typeOfMaterials: [String!]!
  addendums: [CreativeWorkAddendum]!
  lastModified: DateTime
  "Derived field defining ad parameters to send along with DFP request"
  adTargetingParams(clientAdParams: ClientAdParams!): [AdTargetingParam]
  sourcePublisher: String!
  uri: String!
  "An array of LegacyCollections associated with a particular work.\n\nCan be filtered by either name, type, or both. Name filtering allows for partial prefix\nmatching (i.e. an input of 'match-box-' will return both 'match-box-20' and 'match-box-30') \n Any returned types that do not match an expected GQL type on this field will be filtered out,\n with null being returned instead.\n                    "
  collections(name: String, type: CollectionType): [LegacyCollection]!
  "Person/Organizations with specific roles in creating the asset.\n\nUnlike 'bylines', this field represents the most current data available (i.e.\nNOT a snapshot)"
  credits: [Credit]!
  "An additional piece of metadata for cards that the news desk uses to capture\nsentence renditions."
  oneLine: String!
  kicker: String!
  "A summary specially tailored for the homepage."
  promotionalSummary: String!
  slug: String!
  desk: String!
  section: Section
  "The unique identifier of the event."
  eventId: String
  shortUrl: String!
  "A banner displayed across the top an individual article/video/interactive or\npackage to allow the news desk to give extra emphasis to high-priority\ncoverage."
  banner: String!
  "A headline specially tailored for the homepage."
  promotionalHeadline: String!
  firstReportedAtURL: String!
  originalDesk: String!
  id: ID!
  commentProperties: CreativeWorkCommentProperties!
  "A list of related creative works.  \n Any returned types that do not match an expected GQL type on this field will be filtered out,\n with null being returned instead.\n                     The results are limited to the first 20 elements returned."
  related: [HasPromotionalProperties]!
  language: Language
  "The multimedia that should be used to promote the story."
  promotionalMedia: PromotionalPropertiesMedia
  "MediaEmphasis can be influenced by cardType depending on the page layout.\n\nThis is business logic currently applied only by Samizdat, but could live on the Pipeline in the future.\n\nIf layout is not provided, the value is the mediaEmphasis from\npromotionalProperties.mediaEmphasis.\n\nIf layout is provided, and the layout value is\n  SMALL: Always force a MediaEmphasis of 'NONE' for TEXT cardTypes or\n         'MAXIMUM' for all others.\n  Anything else: Return the promotionalProperties.mediaEmphasis value"
  promotionalMediaEmphasis(layout: ProgramLayoutSize): MediaEmphasis!
  "Derived field determined to be the first collection in the collections list\nof type Column"
  column: LegacyCollection
  tone: Tone!
  followChannels: [ChannelMetadata]
  type: String!
  "An excerpt specially tailored for the homepage."
  promotionalExcerpt: String!
  displayProperties: CreativeWorkDisplayProperties
  card: CardUnion
  timesTags: [TimesTag]!
  cardType: CardType!
  subsection: Section
  advertisingProperties: CreativeWorkAdvertisingProperties
  "A snapshot of creator data at the time this CreativeWork is last published.\n\nSince it is a snapshot, it will NOT reflect any changes to the underlying\ndata after the CreativeWork is published."
  bylines: [Byline]!
  summary: String!
  sourceId: String!
  previouslyPublishedUrls: [String!]!
  "The full TZ name from the tzdata database, e.g. 'America/New_York', as set by\nthe editor in Scoop, for the timezone most relevant for the content"
  contentTimezoneName: String
  lastMajorModification: DateTime
  "Timezone offset string based on the publicationProperties.firstPublished and\ncreativeWork.contentTimezoneName fields formatted as: '+00:00, -00:00'."
  firstPublishedTimezoneOffset: String
}
type VideoBlock {
  " Size content should render at"
  size: Size!
  "If true, the video should be muted"
  muted: Boolean!
  media: Video
  "If true, the video should loop"
  looping: Boolean!
  "If true, the video should autoplay"
  autoplay: Boolean!
  "If true, the video's controls and share tools should be hidden"
  hideControls: Boolean!
  "If true, the video player should hide the summary"
  hideSummary: Boolean!
}
type VideoCard implements CardInterface {
  "The asset underlying the card if it is a video.  Otherwise, this is the\npromotionalMedia of the asset (if that media is a video)."
  video: Video!
  newsStatus: NewsStatusType!
  url: String!
  lastModified: DateTime
  promotionalSummary: String!
  section: Section
  shortUrl: String!
  promotionalHeadline: String!
  promotionalMedia: PromotionalPropertiesMedia
  promotionalMediaEmphasis: MediaEmphasis!
  "Derived field determined to be the first collection in the collections list of type Column"
  column: LegacyCollection
  "The asset underlying this Card"
  asset: HasPromotionalProperties!
  cardType: String!
  subsection: Section
  lastMajorModification: DateTime
}
type VideoCue {
  type: String!
  timeOut: Int!
  timeIn: Int!
  name: String!
}
type VideoExternalPlatform {
  type: String!
  sourceUrl: String!
  externalUrl: String!
  externalId: String!
}
type VideoNavigationChannel {
  "ID of the channel."
  channelId: String!
  "Display name of the channel."
  displayName: String!
  "URL of the channel."
  publishUrl: String!
  "Channel's shows."
  shows: [VideoNavigationShows]!
}
type VideoNavigationShows {
  "ID of the show."
  showId: String!
  "Display name of the show."
  displayName: String!
  "URL of the show."
  publishUrl: String!
}
enum VideoProductionType {
  PRODUCTION_TYPE_NOT_SET
  ENTERPRISE_LOW
  ENTERPRISE_HIGH
  BIG_PROJECT
  SERIES_LOW
  SERIES_HIGH
  NEWS_PACKAGE
  NEWS_CLIP
  DESK_EXTERNAL
  OPINION
  OTHER_NYT
  CURATED
  EXTERNAL
  BRANDED
  FACEBOOK_LIVE
  NEWS_PRODUCTION
  DAILY_360
  EMBEDDED_MULTIMEDIA
  CLIP
  OBITS
  SHORT_FORM
  PREMIUM_SHOW
  ENTERPRISE
  INTERACTIVE
  OP_DOC
  SERIES
  CINEMAGRAPH
}
type VideoRendition {
  width: Int
  url: String!
  type: String!
  height: Int
  bitrate: Int
  "the aspect ratio of the given rendition, for example '16:9', returns empty string if doesn't exist"
  aspectRatio: String!
  "The size of the rendition in bytes."
  fileSize: String
}
type VideoTranslation {
  "Derived field representing either translation.url if present or url"
  url: String!
  translation: Video
  translatedLinkText: String!
  linkText: String!
  language: Language
}
type VideosConnection implements RelayConnection {
  "RelayConnection"
  pageInfo: PageInfo!
  totalCount: Int
  "VideosConnection"
  edges: [VideosEdge]
}
type VideosEdge implements RelayEdge {
  "RelayEdge"
  cursor: String!
  "VideosEdge"
  node: Video
}
type VisualCard implements CardInterface {
  newsStatus: NewsStatusType!
  url: String!
  lastModified: DateTime
  promotionalSummary: String!
  section: Section
  shortUrl: String!
  promotionalHeadline: String!
  promotionalMedia: PromotionalPropertiesMedia
  promotionalMediaEmphasis: MediaEmphasis!
  "Derived field determined to be the first collection in the collections list of type Column"
  column: LegacyCollection
  "The asset underlying this Card"
  asset: HasPromotionalProperties!
  cardType: String!
  subsection: Section
  lastMajorModification: DateTime
}
"Represents a Watching Recommendation"
type WatchingRecommendation implements Published & CreativeWork & HasPromotionalProperties & Node {
  "Is the recommendation for a tv show or movie"
  watchingRecommendationType: WatchingRecommendationType!
  "Data that's rendered in the watching app"
  legacyData: WatchingRecommendationLegacyData
  "How long it will take to watch"
  duration: Int!
  "If tv show, when the series ended"
  yearEnd: Int!
  "External content used to fill in 'read before/after you watch'"
  relatedLinks: [WatchingRecommendationRelatedLink!]!
  "References to this recommendation from external services."
  externalRefs: [WatchingRecommendationExternalRef!]!
  "Film and Television ratings from Common Sense Media, a non-profit which provides age ratings for a range of media"
  commonSenseAgeRating: Int!
  "URL to the Common Sense Media website for the recommendation"
  commonSenseUrl: String!
  "A tag describing the genre of the recommendation (e.g. Horror)"
  genreTags: [WatchingRecommendationTag!]!
  "A tag describing the subgenre of the recommendation (e.g. Monsters)"
  subGenreTags: [WatchingRecommendationTag!]!
  "A tag describing the mood of the recommendation (e.g. Bloody)"
  moodTags: [WatchingRecommendationTag!]!
  headline: CreativeWorkHeadline
  "Derived field determined by ad-tech rules based on the asset's section and\nsubsection"
  dfpTaxonomyException: String
  sourceApplication: String!
  standout: Boolean!
  source: Organization
  commentStatus: CommentStatus!
    @deprecated(reason: "Use commentProperties.status instead")
  personalizationProperties: PersonalizationProperties
  "An alternate summary in the form of a bulleted list, tailored for the\nhomepage."
  promotionalBullets: [String!]!
  newsStatus: NewsStatusType!
  firstPublished: DateTime
  url: String!
  typeOfMaterials: [String!]!
  addendums: [CreativeWorkAddendum]!
  lastModified: DateTime
  "Derived field defining ad parameters to send along with DFP request"
  adTargetingParams(clientAdParams: ClientAdParams!): [AdTargetingParam]
  sourcePublisher: String!
  uri: String!
  "An array of LegacyCollections associated with a particular work.\n\nCan be filtered by either name, type, or both. Name filtering allows for partial prefix\nmatching (i.e. an input of 'match-box-' will return both 'match-box-20' and 'match-box-30') \n Any returned types that do not match an expected GQL type on this field will be filtered out,\n with null being returned instead.\n                    "
  collections(name: String, type: CollectionType): [LegacyCollection]!
  "Person/Organizations with specific roles in creating the asset.\n\nUnlike 'bylines', this field represents the most current data available (i.e.\nNOT a snapshot)"
  credits: [Credit]!
  "An additional piece of metadata for cards that the news desk uses to capture\nsentence renditions."
  oneLine: String!
  kicker: String!
  "A summary specially tailored for the homepage."
  promotionalSummary: String!
  slug: String!
  desk: String!
  section: Section
  "The unique identifier of the event."
  eventId: String
  shortUrl: String!
  "A banner displayed across the top an individual article/video/interactive or\npackage to allow the news desk to give extra emphasis to high-priority\ncoverage."
  banner: String!
  "A headline specially tailored for the homepage."
  promotionalHeadline: String!
  firstReportedAtURL: String!
  originalDesk: String!
  id: ID!
  commentProperties: CreativeWorkCommentProperties!
  "A list of related creative works.  \n Any returned types that do not match an expected GQL type on this field will be filtered out,\n with null being returned instead.\n                     The results are limited to the first 20 elements returned."
  related: [HasPromotionalProperties]!
  language: Language
  "The multimedia that should be used to promote the story."
  promotionalMedia: PromotionalPropertiesMedia
  "MediaEmphasis can be influenced by cardType depending on the page layout.\n\nThis is business logic currently applied only by Samizdat, but could live on the Pipeline in the future.\n\nIf layout is not provided, the value is the mediaEmphasis from\npromotionalProperties.mediaEmphasis.\n\nIf layout is provided, and the layout value is\n  SMALL: Always force a MediaEmphasis of 'NONE' for TEXT cardTypes or\n         'MAXIMUM' for all others.\n  Anything else: Return the promotionalProperties.mediaEmphasis value"
  promotionalMediaEmphasis(layout: ProgramLayoutSize): MediaEmphasis!
  "Derived field determined to be the first collection in the collections list\nof type Column"
  column: LegacyCollection
  tone: Tone!
  followChannels: [ChannelMetadata]
  type: String!
  "An excerpt specially tailored for the homepage."
  promotionalExcerpt: String!
  displayProperties: CreativeWorkDisplayProperties
  card: CardUnion
  timesTags: [TimesTag]!
  cardType: CardType!
  subsection: Section
  advertisingProperties: CreativeWorkAdvertisingProperties
  "A snapshot of creator data at the time this CreativeWork is last published.\n\nSince it is a snapshot, it will NOT reflect any changes to the underlying\ndata after the CreativeWork is published."
  bylines: [Byline]!
  summary: String!
  sourceId: String!
  previouslyPublishedUrls: [String!]!
  "The full TZ name from the tzdata database, e.g. 'America/New_York', as set by\nthe editor in Scoop, for the timezone most relevant for the content"
  contentTimezoneName: String
  lastMajorModification: DateTime
  "Timezone offset string based on the publicationProperties.firstPublished and\ncreativeWork.contentTimezoneName fields formatted as: '+00:00, -00:00'."
  firstPublishedTimezoneOffset: String
}
"Link to data from GoWatchIt, IMDB, Common Sense Media, and Metacritic."
type WatchingRecommendationExternalRef {
  "What service the ref is from"
  type: String!
  "ID of the ref, specific to the service"
  externalRefId: String!
}
"Fields that are rendered directly in the watching app."
type WatchingRecommendationLegacyData {
  "Why you would want to watch this rec"
  htmlWatchIf: String!
  "Why you would want to skip this rec"
  htmlSkipIf: String!
  "Suggestions for how to watch the recommendation, such as which episodes or seasons to skip."
  htmlHowToWatch: String!
  "How long the rec will take to watch"
  htmlTimeCommitment: String!
  "Film ratings from the Motion Picture Association of America"
  htmlMPAARating: String!
  "Optional additional notes in the 'where to watch it' section such as where and when to watch a live broadcast."
  htmlWatchNotes: String!
  "The actors featured in the film or television recommendation"
  actors: [String!]!
  "The directors associated with the film or television recommendation"
  directors: [String!]!
}
"An entity, usually external to NYT, used to fill in 'read before you watch',\n'read after you watch', and 'related videos' sections in the watching app."
type WatchingRecommendationRelatedLink {
  "The related link type such as 'Read Before', 'Read After', 'We Discussed it Here', and 'Related Videos'"
  groupType: String!
  "The title of the related link"
  title: String!
  "The url of the related link"
  url: String!
}
"Defined in the watching app to tag a recommendation."
type WatchingRecommendationTag {
  "Used internally to identify the tag. It is not intended to change or be exposed to the user."
  slug: String!
  "The name of the tag to display to the user."
  name: String!
}
"A recommendation can be for either a movie or a tv show."
enum WatchingRecommendationType {
  "A type of recommendation with one installment"
  MOVIE
  "A type of recommendation with multiple installments"
  TV_SHOW
}
"A union of CreativeWork and HTTP-Response-like Status Types (Redirect,\nExpired). Use this if you need metadata about why an asset is not returned when\nexpected (e.g. need to set a 410 or 301).\n\nIf you wish GraphQL to automatically resolve/not resolve the asset regardless\nof reason, query for AnyWork."
union WorkOrLocation =
    ExpiredWork
  | RelocatedWork
  | Article
  | Audio
  | Capsule
  | CityGuide
  | EmbeddedInteractive
  | HelixNewsletter
  | Image
  | Interactive
  | LegacyCollection
  | Page
  | PaidPost
  | ParentingArticle
  | Playlist
  | Slideshow
  | Video
  | WatchingRecommendation
  | Guide
  | Podcast
  | Person
  | Recipe
type YouTubeEmbedBlock {
  youTubeId: String!
  caption: String!
  credit: String!
  startTime: Int!
}
"A directive that provides hints to how the query should be cached"
directive @cacheHint(
  "nyt:// surrogate key types to include in any surrogate key response headers.  This is a surrogate key type whitelist."
  includeSurrogateTypes: [String!]
  "nyt:// surrogate key types to exclude in any surrogate key response headers.  This is a surrogate key type blacklist."
  excludeSurrogateTypes: [String!]
) on QUERY
"A schema directive that filters out empty elements from the sequence"
directive @filterEmpty on FIELD
"Any HTML will be automatically stripped from the returned String result."
directive @stripHtml on FIELD
"The results are a limited set of the total results available."
directive @take(
  "The first N elements that should be returned from the query"
  first: Int!
) on FIELD
